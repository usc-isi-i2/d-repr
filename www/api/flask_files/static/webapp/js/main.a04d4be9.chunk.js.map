{"version":3,"sources":["store/constants/index.ts","store/constants/app.ts","store/constants/uiConf.ts","store/constants/ontology.ts","store/constants/semanticModel.ts","store/constants/mapping.ts","store/constants/dataset.ts","models/Resource.ts","models/ClassId.ts","models/SemanticModel.ts","models/Alignment.ts","models/Ontology.ts","models/DRepr.ts","models/index.ts","misc/JssInjection.ts","store/actions/variable.ts","store/actions/dataset.ts","store/actions/app.ts","store/actions/alignment.ts","store/actions/index.ts","store/types/UIConfiguration.ts","store/types/AppTbl.ts","store/types/Resource.ts","store/types/index.ts","models/data/UnitOfData.ts","misc/IDGenerator.ts","models/data/Dimension.ts","models/data/NDimData.ts","models/data/DataSlice.ts","models/data/ContinuousRangeDataSlice.tsx","models/data/IndexDataSlice.ts","models/data/dataHelpers.ts","models/data/index.ts","components/resources/UpsertResourceForm.tsx","store/actions/resource.ts","store/actions/semanticModel.ts","components/misc/matrix/TblCell.tsx","components/misc/matrix/CellViewportPosition.tsx","components/misc/matrix/DataView2D.tsx","components/misc/matrix/index.tsx","components/resources/ResourcePanelHeader.tsx","components/resources/components/interface.tsx","components/resources/components/CSVResource.tsx","misc/Polling.ts","components/resources/ResourcePanels.tsx","components/resources/index.tsx","misc/AntDForm.ts","components/layout/UpsertVariableForm.tsx","components/layout/VariableList.tsx","components/layout/index.tsx","components/mappings/VariableSelector.tsx","components/mappings/forms/MappingFormHeader.tsx","components/mappings/forms/IndexMappingForm.tsx","components/mappings/forms/ValueMappingForm.tsx","components/mappings/forms/MappingForm.tsx","components/misc/graph/CytoscapeGraph.tsx","components/mappings/MappingUI.tsx","components/dashboard/datasets/DatasetManager.tsx","components/dashboard/ontology/SimpleOntologyManager.tsx","components/dashboard/settings/Settings.tsx","components/dashboard/Dashboard.tsx","components/semanticModel/RStringSelector.tsx","components/semanticModel/ClassIdSelector.tsx","components/semanticModel/SetSemanticTypeForm.tsx","components/semanticModel/NodeSelector.tsx","components/semanticModel/EditNodeModal/InlineEdgeForm.tsx","components/semanticModel/EditNodeModal/index.tsx","components/semanticModel/UpsertEdgeModal.tsx","components/semanticModel/SemanticModelUI.tsx","Login.tsx","App.tsx","registerServiceWorker.ts","store/reducers/semanticModel.ts","store/reducers/index.ts","store/reducers/app.ts","store/reducers/uiConf.ts","store/reducers/dataset.ts","store/reducers/resource.ts","store/reducers/variable.ts","store/reducers/ontology.ts","store/reducers/alignment.ts","store/index.ts","store/middlewares/index.ts","index.tsx","misc/Exception.ts","store/actions/ontology.ts","models/Variable.ts","models/data/PortionOfData.ts"],"names":["__webpack_require__","d","__webpack_exports__","RESOURCE_UPSERT","RESOURCE_DELETE","RESOURCE_UPDATE_DATA","VARIABLE_UPSERT","VARIABLE_DELETE","SUPPORT_RESOURCE_TYPES","csv","json","netcdf4","Resource","resourceID","resourceType","this","resourceId","ClassId","shortURI","index","_shortURI","_index","deserialize4str","s","idx","lastIndexOf","substr","parseInt","Object","defineProperty","prototype","serialize2str","getNamespacePrefix","indexOf","next","DATA_TYPES","Node","id","label","type","dataType","classId","classId_","classnode","nid","undefined","datanode","variableId","literalnode","data","isClassNode","isDataNode","Edge","sourceId","predicate","targetId","SemanticModel_SemanticModel","SemanticModel","id2node","id2edge","lbl2nodes","type2nodes","incomingEdges","outgoingEdges","default","deserialize","sm","that","lodash","data_nodes","dnode","varId","addNode","data_type","hasNode","node_id","addEdge","_b","tslib_es6","relations","_c","done","srel","value","source_id","target_id","cloneRef","n","Set","splice","o","push","eid","Error","add","removeEdge","e","delete","upwardCascadeRemoveEdge","getNOutgoingEdges","cascadeRemoveNode","cascadeNodes","_d","_e","_f","_g","getNIncomingEdges","length","cascadeNodes_1","cascadeNodes_1_1","cid","iterNodes","sent","iterDataNodes","iterClassNodes","iterTriples","iterEdges","iterIncomingEdges","iterOutgoingEdges","getEdgeById","getNodeById","getDataNodeSemanticType","node","size","edge","values","ontClass","ontPredicate","getClassNodesByShortURI","getUsedNamespacePrefixes","ns","split","serialize","onts","dataNodes","literalNodes","target","source","class_uri","usedNs","literal_nodes","prefixes","namespace","Alignment_Alignment","Alignment","Alignment_DimensionAlignment","aligned_dims","m","Alignment_ValueAlignment","_super","ValueAlignment","isEqual","DimensionAlignment","var1id","var2id","alignedDimensions","_this","call","join","addAlignedDimension","Ontology","DRepr","resources","variables","mappings","semanticModel","r","layout","v","location","toString","transformation","semantic_model","prefix","_prefix","_ns","Variable","_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_0__","variableUpsert","variable","previousVariableId","constants","variableDelete","datasetList","dispatch","getState","app","get","then","resp","dsets","datasets","name","description","mbsize","datasetCreate","post","dataset","datasetRemove","datasetName","db","activeDataset","datasetDeSelect","datasetSelect","dismissNotifyError","alignments","models","rid","rawResource","dimension","pod","PortionOfData","resource","types","NDimData","vid","sorted","value_type","unique","missing_values","fromSerializedSlices","resource_id","slices","appSetSync","syncStatus","appReload","ontologies","URLSearchParams","window","search","catch","error","response","status","appLogin","email","password","axios_default","a","newApp","setAccessToken","auth_token","alignmentUpsert","alignment","mapping","alignmentRemove","actions_resource","SyncStatus","UIConfiguration","displayMax1Resource","setDisplayMax1Resource","instance","shallowClone","clone","AppTbl_AppTbl","AppTbl","synchStatus","accessToken","_email","_accessToken","synched","isLoggedIn","url","config","headers","Authorization","reason","notification","message","head","attempt2ReLoggedIn","js_cookie","Promise","resolve","na","Exception","ResourceRecord","data2","defaultResourceStoreState","defaultVariableStoreState","defaultOntologyStoreState","defaultAlignmentStoreState","defaultUIConfiguration","defaultSemanticModel","defaultAppStoreState","defaultDatasetStoreState","types_UIConfiguration","UnitOfData","indice","IDGenerator","start","counter","Dimension_Dimension","Dimension","depth","val","idgen","range","Infinity","i","Dimension_RangeDimension","index2val","_h","keys","_j","k","Dimension_IndexDimension","RangeDimension","getMaxNDims","Math","max","apply","map","isValidSlice","slice","allowSlicePassEnd","ContinuousRangeDataSlice_ContinuousRangeDataSlice","end","iterDFS","csptr","IndexDimension","IndexDataSlice_IndexDataSlice","index2slice","DataSlice_DataSlice","DataSlice","obj","deserializeDataSlice","fromSlices","dim","dslice","slices2DataSlices","maxNElements","maxElementPerRangeDim","maxElementPerIndexDim","maxDepth","iterDim","sptr","dptr","ru","dataHelpers_RangeUtil","changeRange","child","dimension2DataSlicesFixCostModel","concat","optimize","nIndex","deletedIds","deletedIds_1","deletedIds_1_1","nIncrease","restrainDataSliceFixedCostModel","fromDimension","isOverlappedWithSlices","isRangeOverlapped","isOverlapped","isSelected","sliceIndex","_a","ContinuousRangeDataSlice","setValue","getValue","isSlicingAllIndices","isSelectOne","toIndex","iter","mayHas","iterKeys","iterEntries","IndexDataSlice","isNaN","RangeUtil","validate","min","dataHelpers_DataSliceIndex","DataSliceIndex","idmap","stpr","getWithoutIndex","dataHelpers_DimensionIndex","DimensionIndex","dtpr","formItemProps","labelCol","span","wrapperCol","formTailItemProps","offset","ERROR_MSG_REQUIRE_EITHER_URL_OR_FILE","defaultProps","onClose","UpsertResourceForm","arguments","state","resourceFiles","showExtra","toggleShowExtraProperties","props","form","getFieldValue","setState","onRemoveResourceFile","file","onSelectResourceFile","errors","getFieldError","setFields","resourceURL","createNewResource","preventDefault","validateFieldsAndScroll","err","trim","resourceLoc","extra","resourceFile","isFile","src_models__WEBPACK_IMPORTED_MODULE_11__","delimiter","normDelimiterChar","key","src_store_actions__WEBPACK_IMPORTED_MODULE_12__","global","console","tslib__WEBPACK_IMPORTED_MODULE_0__","render","resourceIdRules","getFieldDecorator","resourceTypes","lodash__WEBPACK_IMPORTED_MODULE_8__","react__WEBPACK_IMPORTED_MODULE_9__","antd__WEBPACK_IMPORTED_MODULE_1__","Option","data-testid","data-testvalue","initialValue","rules","required","whitespace","showExtraBtn","extraProperties","style","marginLeft","fontSize","onClick","antd__WEBPACK_IMPORTED_MODULE_2__","antd__WEBPACK_IMPORTED_MODULE_3__","Item","validator","rule","callback","antd__WEBPACK_IMPORTED_MODULE_4__","antd__WEBPACK_IMPORTED_MODULE_5__","onSubmit","showSearch","labelInValue","antd__WEBPACK_IMPORTED_MODULE_6__","onRemove","beforeUpload","fileList","antd__WEBPACK_IMPORTED_MODULE_7__","className","classes","marginRightButton","htmlType","create","react_redux__WEBPACK_IMPORTED_MODULE_10__","_misc_JssInjection__WEBPACK_IMPORTED_MODULE_13__","marginRight","createResourceForm","marginTop","uploadBtnContainer","float","resourceInputContainer","overflow","paddingRight","resourceCreate","resourceDelete","resourceFetchData","_constants__WEBPACK_IMPORTED_MODULE_0__","_types__WEBPACK_IMPORTED_MODULE_1__","src_models_data__WEBPACK_IMPORTED_MODULE_2__","src_models__WEBPACK_IMPORTED_MODULE_3__","formData","FormData","set","JSON","stringify","Content-Type","dimensions","record","resourceUpdateData","params","action","dataSlice","portionSize","addData","smAddDataNode","smAddEdge","smRemoveNode","smRemoveEdge","smUpdateEdge","nodeId","edgeId","borderBtnClasses","top","right","bottom","left","cornerBtnClasses","TblCell_DataCell","DataCell","onBorderClick","border","getDimSliceIdxAndIndex","dimSliceIdx","stopPropagation","onCellClick","onCornerClick","rborder","cborder","dimSliceIdx0","index0","dimSliceIdx1","index1","select2all","enableSelection","vp","isInBorder","isInRightBorder","isInLeftBorder","isInTopBorder","isInBottomBorder","react","icon","cornerBtn","root","children","unboundedDim1SliceIdx","unboundedDim0SliceIdx","TblCell","JssInjection","controlPanel","margin","padding","position","& > div","display","&:hover","disable","selected","backgroundColor","borderTop","borderLeft","rborderBtn","cursor","height","paddingTop","paddingLeft","boxShadow","lborderBtn","& > i","transform","tborderBtn","width","paddingBottom","textAlign","bborderBtn","zIndex","rcornerBtn","& > b","lcornerBtn","CellViewPortPosition","vpIndex","vpSize","DataView2D_DataView2D","DataView2D","unboundDims","selectedSlices","dataDimIndex","models_data","fromData","dsliceId","sliceIdx","dimId","getNRows","stopDSlice","dimptr","hasAllUpperIndices","getRowsView","startRowIdx","endRowIdx","iterUnboundDimensionValues","removeSelectedSlices","clearSelectedSlicesMut","ridx","cidx","isNoSelection","rs","cs","click","isOneCellSelected","clickOnSameCell","unboundDims_1","unboundDims_1_1","matrix_defaultProps","onUpdateSelectedSlices","dataview","matrix_Matrix","Matrix","rowsPerPage","page","handleChangePage","pageSize","onUpdateDataSlices","handleChangeRowsPerPage","currentPageSize","newPageSize","getAntDTableByDataView","dataSource","columns","pagination","getAntDPagination","table","showHeader","bordered","rowKey","components","body","cell","cellIndex","dim1Values","Array","from","rowIdx","row","dim1Values_1","dim1Values_1_1","colIdx","getData","dim1Values_2","dim1Values_2_1","dataIndex","onCell","nPage","onChange","onShowSizeChange","total","showQuickJumper","showSizeChanger","current","showTotal","getNPageString","matrix","& ul.ant-pagination.ant-table-pagination","ResourcePanelHeader_ResourcePanelHeader","ResourcePanelHeader","onDeleteResource","modal","confirm","title","okText","okType","cancelText","onOk","es_row","col","toUpperCase","resources_ResourcePanelHeader","marginBottom","& > .ant-col-20","fontWeight","& > div:last-child","defaultResourceComponentProps","newRegion","onHideResourcePanel","getDefaultDataView","CSVResource_CSVResourcePanel","CSVResourcePanel","waitForInit","fn","timeout","interval","endTime","Number","Date","checkCondition","reject","setTimeout","disableSelection","setSelectedSlices","dslice_1","ndslice","getDerivedStateFromProps","card","overflowX","panelContent","CSVResource","es","& > div.ant-card-body","ResourcePanels_ResourcePanels","ResourcePanels","displayingResources","resourceComponents","postInit","memoize_one_esm","postInit_","getOpenedResources","delIds","delIds_1","delIds_1_1","uiConf","onDisplayingResourcesChange","openResourcePanels","minimizedResourcePanels","btnType","has","innerRef","btn","es_button","hideResourcePanels","divider","resources_ResourcePanels","store","& button","& .resource-list-header","minWidth","& .ant-divider","resources_defaultProps","resources_ResourceUI","ResourceUI","displayingCreateResourceForm","displayCreateResourceForm","event","hideCreateResourceForm","createResourceComponent","AntDFormField","validationStatus","validationMessage","isValid","UpsertVariableForm_UpsertVariableForm","UpsertVariableForm","missingValues","isCollapsed","onDelete","save","fromString","nv","onSave","toggleExpand","onSortedChange","onChangeResourceId","onVariableTypeChange","onUniqueChange","onVariableIdChange","onLayoutInputChange","onChangeLayout","delBtn","isInsert","expandedSection","gutter","es_form","es_switch","checked","es_select","mode","validateStatus","help","input","colon","onCancel","layout_UpsertVariableForm","VariableList_defaultProps","onVariableClick","highlightVariableIds","VariableList_VariableList","VariableList","selectedVariableId","layout_VariableList","&>div","& > div > .variable-list-header","layout_LayoutUI","LayoutUI","upsertVariable","upsertVariableResourceId","upsertVariableLayout","onCreateVariable","newVariable","resourcePanels","resourceIds","validateUpsertVariableLayoutField","onUpdateVariable","v_1","onDeleteVariable","prevID","actions","cancelUpsertVariableForm","onSaveVariable","createVariableForm","resourceId_1","onUpsertVariableChangeResourceId","onUpsertVariableChangeLayout","syncLayout","createVarForm","controlUnit","components_layout","&>*","innerSpace7","&>*:first-child","VariableSelector_defaultProps","forbiddenNodes","onChangeVariable","VariableSelector_VariableSelector","VariableSelector","field","validateNotInForbiddenList","onChangeValue","errorMsg","options","fieldName","MappingFormHeader","onSelectVar1","mappingType","onMappingTypeChange","onSelectVar2","dimensionColors","IndexMappingForm_IndexMappingForm","IndexMappingForm","alignedDims","selectedDimensions","dimensionElementCentroids","componentDidMount","getDimensionElementCentroids","var1","var2","componentDidUpdate","prevProps","prevState","saveMapping","im","mp","undoLatestMappingAction","centroids","crect","document","getElementById","getBoundingClientRect","getElementsByClassName","el","elr","dimensionelementindex","getVariableLocationElement","variableLocation","getDimensionElements","variableIndex","selectedDimension","elements","resourceType_1","dimName","dimensionElement","data-dimensionelementindex","selectVariableDimension","filter","dimensionIndex","otherVariableIndex","lines","mappedDim","x1","y1","x2","y2","stroke","controller","shape","disabled","onClear","theme","onDiscard","drawlingLine","forms_IndexMappingForm","& button:last-child","& span","ValueMappingForm_ValueMappingForm","ValueMappingForm","vm","forms_ValueMappingForm","MappingForm_MappingForm","MappingForm","hasVariable1","hasVariable2","setMapping","log","setVariable1","setVariable2","clearMapping","onClearMappingForm","onDiscardMappingForm","onSaveMappingForm","changeMappingType","comp","forms_MappingFormHeader","forms_MappingForm","forwardRef","cytoscape_cjs","cytoscape_edgehandles_default","cytoscape_spread_default","defaultEdgeDrawingStyles","selector","background-color","overlay-opacity","border-width","border-opacity","border-color","line-color","curve-style","control-point-step-size","target-arrow-color","target-arrow-shape","CytoscapeGraph_defaultProps","onNodeClick","onNodeRightClick","onEdgeClick","enableEdgeDrawingCreation","canDrawEdgeBetweenNodes","onDrawNewEdgeComplete","CytoscapeGraph_CytoscapeGraph","CytoscapeGraph","cy","cyEdgeDrawing","isHoveringEh","isHoveringNode","syncWithCytoscape","nodes","edges","syncWithCytoscape_","zoomIn","zoom","center","zoomOut","centerViewPort","container","fit","spacingFactor","directed","styles","eh","edgehandles","preview","hoverDelay","handleNodes","snap","snapThreshold","snapFrequency","noEdgeEventsInDraw","disableBrowserGestures","handleInDrawMode","nodeLoopOffset","edgeType","sourceNode","targetNode","edgeParams","ghostEdgeParams","complete","addedEles","remove","on","minDelay","hide","enable","userZoomingEnabled","titleComp","extraClassName","orientation","rootHasTitle","floatedControlBtn","ref","group","run","reset","graph_CytoscapeGraph","minHeight","&>div:last-child","lineHeight","cytoscapeSMGraphStyles","text-halign","text-valign","text-background-color","text-background-opacity","cytoscapeSMGraphLayout","animate","ready","stop","minDist","expandingFactor","prelayout","maxExpandIterations","boundingBox","randomize","getEdgeId","MappingUI_MappingsUI","MappingsUI","onGraphNodeClick","onVariableListClick","onGraphEdgeClick","mappingForm","mappings_1","mappings_1_1","parseEdgeId","MappingUI","DatasetManager_DatasetManager","DatasetManager","isSelectingDataset","datasetColumns","ghost","toggleDatasetActivation","isActive","removeDataset","uploadRepr","datasetTbl","success","downloadRepr","Blob","blob","URL","createObjectURL","createElement","href","download","appendChild","revokeObjectURL","downloadData","finishModeling","notifyUri","open","createDataset","resetFields","es_alert","upload","showUploadList","dropdown","overlay","menu","form_default","placeholder","datasets_DatasetManager","colors","SimpleOntologyManager_SimpleOntologyManager","SimpleOntologyManager","ontTableColumns","tag","color","deleteOntology","uri","ontology","createOntology","stopUpload","ontology_SimpleOntologyManager","inputOntologyURIContainer","Settings_defaultProps","formItemLayout","xs","Settings_Setting","Setting","Settings","Dashboard_defaultProps","clazz","Dashboard_ControlPanel","ControlPanel","activeMenu","onChangeMenu","selection","component","es_layout","background","Sider","onSelect","selectedKeys","Content","Dashboard","full","RStringSelector_defaultProps","RStringSelector_RStringSelector","RStringSelector","validateNotEmptyField","onSearch","isSearching","searchResults","defaultActiveFirstOption","notFoundContent","spin","showArrow","RStringSelector_OntClassSelector","OntClassSelector","query","q","results","RStringSelector_OntPredicateSelector","OntPredicateSelector","ClassIdSelector_ClassIdSelector","ClassIdSelector","validateClassIdField","onSearchOntClass","searchingOntClasses","searchOntClassResults","existingNodes","existingNodes_1","existingNodes_1_1","onChangeOntClassValue","rval","isNew","semanticModel_ClassIdSelector","SetSemanticTypeForm_defaultProps","formResult","SetSemanticTypeForm_SetSemanticTypeForm","SetSemanticTypeForm","getSType","getSType_","stype","classIdSelector","ontPredicateSelector","onDataTypeChange","dataTypes","semanticModel_SetSemanticTypeForm","NodeSelector_defaultProps","filterDataNode","NodeSelector_NodeSelector","NodeSelector","InlineEdgeForm_InlineEdgeForm","InlineEdgeForm","onCreateEdge","hasData","getSourceAndTarget","getPredicate","onUpdateEdge","onRemoveEdge","getOtherNodeId","nodeSelector","predicateSelector","currentNodeId","otherNodeId","otherNode","currentNode","isIncomingEdge","EditNodeModal_EditNodeModal","EditNodeModal","onHide","ontClassSelector","isIncomingMenu","edges_1","edges_1_1","visible","footer","defaultSelectedKeys","semanticModel_EditNodeModal","UpsertEdgeModal_formItemProps","UpsertEdgeModal_EditEdgeModal","EditEdgeModal","getEditingPredicate","UpsertEdgeModal","SemanticModelUI_cytoscapeSMGraphStyles","SemanticModelUI_cytoscapeSMGraphLayout","SemanticModelUI_SemanticModelUI","SemanticModelUI","editingVariableId","upsertEdgeForm","isVisible","showEditNodeForm","getHasSTypesVariableIds","getHasSTypesVariableIds_","onGraphNodeRightClick","hideEditNodeForm","hideEditEdgeForm","onSaveSTypeForm","onCancelSTypeForm","onDiscardSTypeForm","dnodeIds","editingVarForm","semanticModel_SemanticModelUI","Login_Login","Login","errorMessage","onLogin","validateFields","loginForm","banner","closable","valuePropName","es_checkbox","loginFormBtn","src_Login","& .login-form","App_App","App","loaded","sttTab","twoToneColor","synching","Header","hasActiveDataset","hasResources","SubMenu","avatar","verticalAlign","src_App_0","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","reducers","redux","newState","maps","state_1","state_1_1","align","src_store","redux_thunk_es","redux_logger_default","result","prev_id","react_dom","origin","addEventListener","fetch","unregister","reload","checkValidServiceWorker","BugError","msg","ontologyRemove","_constants__WEBPACK_IMPORTED_MODULE_1__","ontologyCreate","ontFile","n_classes","n_predicates","warning","info","SLICE_UNSET","RANGE_SLICE_REGEX","RangeSlice","step","isInteger","isUninitialized","IndexSlice","Location","sers","exec","withoutResourceID","validateSlices","_data__WEBPACK_IMPORTED_MODULE_1__","startIndex","lodash__WEBPACK_IMPORTED_MODULE_2__","subdims","subdims_1","subdims_1_1","sdim","subdim","$hasAllIndices","$hasAllUpperIndices","fromDataSlice","setHasAllIndices","setHasAllUpperIndices","addDataSlice","indices","___WEBPACK_IMPORTED_MODULE_1__","HashMapPortionOfData","hashMap","pop","hasAllIndices","DiscontinuousArrayPortionOfData","startExtractIndex","endExtractIndex","arrays","entries","da","start0","end0","start1","darray","unshift","indicesLastIdx","ArrayPortionOfData","sarray","newArrays","toJSON","items","item","reduce","accum","arrayPortion","mapPortion"],"mappings":"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","file":"static/js/main.a04d4be9.chunk.js","sourcesContent":["export const RESOURCE_UPSERT = \"RESOURCE_UPSERT\";\nexport type RESOURCE_UPSERT = typeof RESOURCE_UPSERT;\n\nexport const RESOURCE_DELETE = \"RESOURCE_DELETE\";\nexport type RESOURCE_DELETE = typeof RESOURCE_DELETE;\n\nexport const RESOURCE_UPDATE_DATA = \"RESOURCE_UPDATE_DATA\";\nexport type RESOURCE_UPDATE_DATA = typeof RESOURCE_UPDATE_DATA;\n\nexport const VARIABLE_UPSERT = \"VARIABLE_UPSERT\";\nexport type VARIABLE_UPSERT = typeof VARIABLE_UPSERT;\n\nexport const VARIABLE_DELETE = \"VARIABLE_DELETE\";\nexport type VARIABLE_DELETE = typeof VARIABLE_DELETE;\n\nexport * from \"./app\";\nexport * from \"./uiConf\";\nexport * from \"./ontology\";\nexport * from \"./semanticModel\";\nexport * from \"./mapping\";\nexport * from \"./dataset\";\n","export const APP_NEW = \"APP_NEW\";\nexport type APP_NEW = typeof APP_NEW;\n\nexport const APP_RELOAD = \"APP_RELOAD\";\nexport type APP_RELOAD = typeof APP_RELOAD;\n\nexport const APP_LOGIN = \"APP_LOGIN\";\nexport type APP_LOGIN = typeof APP_LOGIN;\n\nexport const APP_SET_SYNC = \"APP_SET_SYNC\";\nexport type APP_SET_SYNC = typeof APP_SET_SYNC;\n","export const UI_SET_DISPLAY_MAX_1_RESOURCE = \"UI_SET_DISPLAY_MAX_1_RESOURCE\";\nexport type UI_SET_DISPLAY_MAX_1_RESOURCE = typeof UI_SET_DISPLAY_MAX_1_RESOURCE;\n","export const ONTOLOGY_LIST = \"ONTOLOGY_LIST\";\nexport type ONTOLOGY_LIST = typeof ONTOLOGY_LIST;\n\nexport const ONTOLOGY_REMOVE = \"ONTOLOGY_REMOVE\";\nexport type ONTOLOGY_REMOVE = typeof ONTOLOGY_REMOVE;\n\nexport const ONTOLOGY_CREATE = \"ONTOLOGY_CREATE\";\nexport type ONTOLOGY_CREATE = typeof ONTOLOGY_CREATE;\n","export const SM_SET_SEMANTIC_TYPE = \"SM_SET_SEMANTIC_TYPE\";\nexport type SM_SET_SEMANTIC_TYPE = typeof SM_SET_SEMANTIC_TYPE;\n\nexport const SM_ADD_DATA_NODE = \"SM_ADD_DATA_NODE\";\nexport type SM_ADD_DATA_NODE = typeof SM_ADD_DATA_NODE;\n\nexport const SM_ADD_EDGE = \"SM_ADD_EDGE\";\nexport type SM_ADD_EDGE = typeof SM_ADD_EDGE;\n\nexport const SM_REMOVE_NODE = \"SM_REMOVE_NODE\";\nexport type SM_REMOVE_NODE = typeof SM_REMOVE_NODE;\n\nexport const SM_REMOVE_EDGE = \"SM_REMOVE_EDGE\";\nexport type SM_REMOVE_EDGE = typeof SM_REMOVE_EDGE;\n\nexport const SM_UPDATE_EDGE = \"SM_UPDATE_EDGE\";\nexport type SM_UPDATE_EDGE = typeof SM_UPDATE_EDGE;\n","export const ALIGNMENT_UPSERT = \"ALIGNMENT_UPSERT\";\nexport type ALIGNMENT_UPSERT = typeof ALIGNMENT_UPSERT;\n\nexport const ALIGNMENT_REMOVE = \"ALIGNMENT_REMOVE\";\nexport type ALIGNMENT_REMOVE = typeof ALIGNMENT_REMOVE;\n","export const DATASET_LIST = \"DATASET_LIST\";\nexport type DATASET_LIST = typeof DATASET_LIST;\n\nexport const DATASET_REMOVE = \"DATASET_REMOVE\";\nexport type DATASET_REMOVE = typeof DATASET_REMOVE;\n\nexport const DATASET_SELECT = \"DATASET_SELECT\";\nexport type DATASET_SELECT = typeof DATASET_SELECT;\n\nexport const DATASET_DESELECT = \"DATASET_DESELECT\";\nexport type DATASET_DESELECT = typeof DATASET_DESELECT;\n\nexport const DATASET_CREATE = \"DATASET_CREATE\";\nexport type DATASET_CREATE = typeof DATASET_CREATE;\n","export const SUPPORT_RESOURCE_TYPES = {\n  csv: \"CSV format\",\n  json: \"JSON format\",\n  netcdf4: \"NetCDF4 format\"\n};\n\nexport class Resource {\n  public resourceId: string;\n  public resourceType: string;\n\n  constructor(resourceID: string, resourceType: string) {\n    this.resourceId = resourceID;\n    this.resourceType = resourceType;\n  }\n}\n","export class ClassId {\n  public static deserialize4str(s: string): ClassId {\n    const idx = s.lastIndexOf(\":\");\n    return new ClassId(s.substr(0, idx), parseInt(s.substr(idx + 1), 10));\n  }\n\n  private _shortURI: string;\n  private _index: number;\n\n  constructor(shortURI: string, index: number) {\n    this._shortURI = shortURI;\n    this._index = index;\n  }\n\n  get shortURI() {\n    return this._shortURI;\n  }\n\n  get index() {\n    return this._index;\n  }\n\n  get label() {\n    return `${this._shortURI}${this._index}`;\n  }\n\n  get id() {\n    return `${this._shortURI}:${this._index}`;\n  }\n\n  public serialize2str(): string {\n    return `${this._shortURI}:${this._index}`;\n  }\n\n  public getNamespacePrefix(): string {\n    return this.shortURI.substr(0, this.shortURI.indexOf(\":\"));\n  }\n\n  // create next class id\n  public next(): ClassId {\n    return new ClassId(this._shortURI, this._index + 1);\n  }\n}\n","import * as _ from \"lodash\";\nimport { ClassId } from \"./ClassId\";\nimport { Ontology } from \".\";\n\ntype NodeType = \"classnode\" | \"datanode\" | \"literalnode\";\nexport type DataType =\n  | \"xsd:int\"\n  | \"xsd:string\"\n  | \"xsd:decimal\"\n  | \"xsd:dateTime\"\n  | \"xsd:anyURI\";\nexport const DATA_TYPES: DataType[] = [\n  \"xsd:string\",\n  \"xsd:int\",\n  \"xsd:decimal\",\n  \"xsd:dateTime\",\n  \"xsd:anyURI\"\n];\n\nexport class Node {\n  public static classnode(nid: ClassId) {\n    return new Node(nid.id, nid.shortURI, \"classnode\", undefined, nid);\n  }\n\n  public static datanode(variableId: string, dataType: DataType) {\n    return new Node(variableId, variableId, \"datanode\", dataType, undefined);\n  }\n\n  public static literalnode(nid: string, data: string, dataType: DataType) {\n    return new Node(nid, data, \"literalnode\", dataType, undefined);\n  }\n\n  public id: string;\n  public label: string;\n  public type: NodeType;\n  public dataType: DataType | undefined;\n  private classId_?: ClassId;\n\n  private constructor(\n    id: string,\n    label: string,\n    type: NodeType,\n    dataType?: DataType,\n    classId?: ClassId\n  ) {\n    this.id = id;\n    this.label = label;\n    this.type = type;\n    this.dataType = dataType;\n    this.classId_ = classId;\n  }\n\n  get classId() {\n    return this.classId_;\n  }\n\n  public isClassNode() {\n    return this.type === \"classnode\";\n  }\n\n  public isDataNode() {\n    return this.type === \"datanode\";\n  }\n}\n\nclass Edge {\n  public id: string;\n  public sourceId: string;\n  public targetId: string;\n  public predicate: string;\n\n  constructor(\n    id: string,\n    sourceId: string,\n    predicate: string,\n    targetId: string\n  ) {\n    this.id = id;\n    this.predicate = predicate;\n    this.sourceId = sourceId;\n    this.targetId = targetId;\n  }\n}\n\nexport class SemanticModel {\n  public static default() {\n    return new SemanticModel(\n      {},\n      {},\n      {},\n      { classnode: [], datanode: [] },\n      {},\n      {}\n    );\n  }\n\n  public static deserialize(sm: any) {\n    const that = SemanticModel.default();\n    _.each(sm.data_nodes, (dnode: any, varId: string) => {\n      that.addNode(Node.datanode(varId, dnode.data_type));\n      if (!that.hasNode(dnode.node_id)) {\n        that.addNode(Node.classnode(ClassId.deserialize4str(dnode.node_id)));\n      }\n      that.addEdge(dnode.node_id, dnode.predicate, varId);\n    });\n    for (const srel of sm.relations) {\n      that.addEdge(srel.source_id, srel.predicate, srel.target_id);\n    }\n\n    return that;\n  }\n\n  private id2node: { [id: string]: Node };\n  private id2edge: { [id: string]: Edge };\n  // store nodes in their index ascending order\n  private lbl2nodes: { [lbl: string]: Node[] };\n  // store nodes in arbitrary order\n  private type2nodes: { [type: string]: Node[] };\n  // store outgoing links and incoming links of nodes\n  private incomingEdges: { [id: string]: Set<string> };\n  private outgoingEdges: { [id: string]: Set<string> };\n\n  private constructor(\n    id2node: { [id: string]: Node },\n    id2edge: { [id: string]: Edge },\n    lbl2nodes: { [lbl: string]: Node[] },\n    type2nodes: { [type: string]: Node[] },\n    incomingEdges: { [id: string]: Set<string> },\n    outgoingEdges: { [id: string]: Set<string> }\n  ) {\n    this.id2edge = id2edge;\n    this.id2node = id2node;\n    this.lbl2nodes = lbl2nodes;\n    this.type2nodes = type2nodes;\n    this.incomingEdges = incomingEdges;\n    this.outgoingEdges = outgoingEdges;\n  }\n\n  public cloneRef() {\n    return new SemanticModel(\n      this.id2node,\n      this.id2edge,\n      this.lbl2nodes,\n      this.type2nodes,\n      this.incomingEdges,\n      this.outgoingEdges\n    );\n  }\n\n  public addNode(n: Node) {\n    this.id2node[n.id] = n;\n    this.incomingEdges[n.id] = new Set();\n    this.outgoingEdges[n.id] = new Set();\n\n    if (!(n.label in this.lbl2nodes)) {\n      this.lbl2nodes[n.label] = [];\n    }\n\n    if (n.isClassNode()) {\n      this.lbl2nodes[n.label].splice(\n        _.sortedIndexBy(\n          this.lbl2nodes[n.label],\n          n,\n          (o: Node) => o.classId!.index\n        ),\n        0,\n        n\n      );\n      this.type2nodes.classnode.push(n);\n    } else {\n      this.lbl2nodes[n.label].push(n);\n      this.type2nodes.datanode.push(n);\n    }\n  }\n\n  public hasNode(nid: string) {\n    return nid in this.id2node;\n  }\n\n  public addEdge(sourceId: string, predicate: string, targetId: string) {\n    const eid = `${sourceId}---${predicate}---${targetId}`;\n\n    if (!(sourceId in this.id2node) || !(targetId in this.id2node)) {\n      throw new Error(\"Cannot add an edge from un-existing node\");\n    }\n\n    if (eid in this.id2edge) {\n      throw new Error(\"Cannot have same predicate between two nodes\");\n    }\n\n    this.id2edge[eid] = new Edge(eid, sourceId, predicate, targetId);\n    this.incomingEdges[targetId].add(eid);\n    this.outgoingEdges[sourceId].add(eid);\n  }\n\n  public removeEdge(eid: string): Edge {\n    const e = this.id2edge[eid];\n    this.outgoingEdges[e.sourceId].delete(eid);\n    this.incomingEdges[e.targetId].delete(eid);\n    delete this.id2edge[eid];\n    return e;\n  }\n\n  public upwardCascadeRemoveEdge(eid: string) {\n    const e = this.removeEdge(eid);\n    if (this.getNOutgoingEdges(e.sourceId) === 0) {\n      // delete class nodes that don't have any children\n      this.cascadeRemoveNode(e.sourceId);\n    }\n  }\n\n  public cascadeRemoveNode(nid: string): void {\n    const n = this.id2node[nid];\n    const cascadeNodes = [];\n\n    // remove all incoming links\n    for (const eid of this.incomingEdges[nid]) {\n      const e = this.removeEdge(eid);\n      const source = this.id2node[e.sourceId];\n\n      if (source.isClassNode() && this.getNOutgoingEdges(e.sourceId) === 0) {\n        cascadeNodes.push(e.sourceId);\n      }\n    }\n\n    if (n.isClassNode()) {\n      // remove all outgoing links\n      for (const eid of this.outgoingEdges[nid]) {\n        const e = this.removeEdge(eid);\n        const target = this.id2node[e.targetId];\n\n        if (target.isClassNode()) {\n          // delete a class node when there is no outgoing edges\n          if (this.getNOutgoingEdges(e.targetId) === 0) {\n            cascadeNodes.push(e.targetId);\n          }\n        } else {\n          // delete a data node when there is no incoming edge\n          if (this.getNIncomingEdges(e.targetId) === 0) {\n            cascadeNodes.push(e.targetId);\n          }\n        }\n      }\n\n      const idx = this.type2nodes.classnode.indexOf(n);\n      this.type2nodes.classnode.splice(idx, 1);\n    } else {\n      const idx = this.type2nodes.datanode.indexOf(n);\n      this.type2nodes.datanode.splice(idx, 1);\n    }\n\n    delete this.id2node[nid];\n    delete this.outgoingEdges[nid];\n    delete this.incomingEdges[nid];\n    this.lbl2nodes[n.label].splice(this.lbl2nodes[n.label].indexOf(n), 1);\n    if (this.lbl2nodes[n.label].length === 0) {\n      delete this.lbl2nodes[n.label];\n    }\n\n    for (const cid of cascadeNodes) {\n      this.cascadeRemoveNode(cid);\n    }\n  }\n\n  public *iterNodes(): IterableIterator<Node> {\n    for (const nid in this.id2node) {\n      yield this.id2node[nid];\n    }\n  }\n\n  public *iterDataNodes(): IterableIterator<Node> {\n    for (const n of this.type2nodes.datanode) {\n      yield n;\n    }\n  }\n\n  public *iterClassNodes(): IterableIterator<Node> {\n    for (const n of this.type2nodes.classnode) {\n      yield n;\n    }\n  }\n\n  public *iterTriples(): IterableIterator<[Node, string, Node]> {\n    for (const eid in this.id2edge) {\n      const e = this.id2edge[eid];\n      yield [this.id2node[e.sourceId], e.predicate, this.id2node[e.targetId]];\n    }\n  }\n\n  public *iterEdges(): IterableIterator<Edge> {\n    for (const eid in this.id2edge) {\n      yield this.id2edge[eid];\n    }\n  }\n\n  public *iterIncomingEdges(nid: string): IterableIterator<Edge> {\n    for (const eid of this.incomingEdges[nid]) {\n      yield this.id2edge[eid];\n    }\n  }\n\n  public *iterOutgoingEdges(nid: string): IterableIterator<Edge> {\n    for (const eid of this.outgoingEdges[nid]) {\n      yield this.id2edge[eid];\n    }\n  }\n\n  public getEdgeById(eid: string): Edge {\n    return this.id2edge[eid];\n  }\n\n  public getNodeById(nid: string): Node {\n    return this.id2node[nid];\n  }\n\n  public getDataNodeSemanticType(nid: string) {\n    if (!this.hasNode(nid)) {\n      return undefined;\n    }\n\n    const node = this.id2node[nid];\n    if (this.incomingEdges[node.id].size === 0) {\n      return undefined;\n    }\n\n    const edge = this.id2edge[\n      this.incomingEdges[node.id].values().next().value\n    ];\n    return {\n      ontClass: this.id2node[edge.sourceId].classId,\n      ontPredicate: edge.predicate\n    };\n  }\n\n  public getNOutgoingEdges(nid: string) {\n    return this.outgoingEdges[nid].size;\n  }\n\n  public getNIncomingEdges(nid: string) {\n    return this.incomingEdges[nid].size;\n  }\n\n  // return list of class nodes by their short URI in ascending order\n  public getClassNodesByShortURI(shortURI: string): Node[] {\n    return this.lbl2nodes[shortURI] || [];\n  }\n\n  public getUsedNamespacePrefixes(): Set<string> {\n    const ns = new Set();\n    for (const n of this.iterClassNodes()) {\n      ns.add(n.classId!.getNamespacePrefix());\n    }\n\n    // TODO: fix me, hard code\n    for (const e of this.iterEdges()) {\n      if (e.predicate.indexOf(\":\") !== -1) {\n        ns.add(e.predicate.split(\":\", 2)[0]);\n      }\n    }\n    return ns;\n  }\n\n  public serialize(onts: { [prefix: string]: Ontology }) {\n    const dataNodes = {};\n    const relations = [];\n    const literalNodes = [];\n\n    for (const e of this.iterEdges()) {\n      const target = this.id2node[e.targetId];\n      if (target.isClassNode()) {\n        relations.push({\n          source: e.sourceId,\n          predicate: e.targetId,\n          target: e.targetId\n        });\n      } else if (target.isDataNode()) {\n        dataNodes[e.targetId] = {\n          node_id: e.sourceId,\n          class_uri: this.id2node[e.sourceId].label,\n          predicate: e.predicate,\n          data_type: target.dataType\n        };\n      } else {\n        literalNodes.push({\n          node_id: e.sourceId,\n          class_uri: this.id2node[e.sourceId].label,\n          predicate: e.predicate,\n          data: target.label,\n          data_type: target.dataType\n        });\n      }\n    }\n\n    const usedNs = this.getUsedNamespacePrefixes();\n    return {\n      data_nodes: dataNodes,\n      literal_nodes: literalNodes,\n      relations,\n      prefixes: _.fromPairs(_.map([...usedNs], ns => [ns, onts[ns].namespace]))\n    };\n  }\n}\n","import { Index } from \"./data\";\nimport * as _ from \"lodash\";\n\nexport abstract class Alignment {\n  public static deserialize(o: any): Alignment {\n    if (o.type === \"dimension\") {\n      return new DimensionAlignment(\n        o.source,\n        o.target,\n        _.map(o.aligned_dims, m => ({\n          source: m.source,\n          target: m.target\n        }))\n      );\n    } else {\n      return new ValueAlignment(o.source, o.target);\n    }\n  }\n\n  public source: string;\n  public target: string;\n\n  abstract get id(): string;\n\n  constructor(source: string, target: string) {\n    this.source = source;\n    this.target = target;\n  }\n\n  public abstract isEqual(another: Alignment): boolean;\n  public abstract serialize(): any;\n}\n\nexport type AlignmentImpl = ValueAlignment | DimensionAlignment;\n\nexport class ValueAlignment extends Alignment {\n  get id() {\n    return `value:${this.source}---${this.target}`;\n  }\n\n  public isEqual(m: Alignment): boolean {\n    if (!(m instanceof ValueAlignment) || m === null) {\n      return false;\n    }\n\n    return m.source === this.source && m.target === this.target;\n  }\n\n  public serialize() {\n    return {\n      type: \"value\",\n      source: this.source,\n      target: this.target\n    };\n  }\n}\n\nexport class DimensionAlignment extends Alignment {\n  public alignedDimensions: Array<{ source: number; target: number }>;\n\n  get id() {\n    return `index:${this.source}---${this.target}---${_.map(\n      this.alignedDimensions,\n      m => `${m.source}-${m.target}`\n    ).join(\",\")}`;\n  }\n\n  constructor(\n    var1id: string,\n    var2id: string,\n    alignedDimensions: Array<{ source: number; target: number }>\n  ) {\n    super(var1id, var2id);\n    this.alignedDimensions = alignedDimensions;\n  }\n\n  public addAlignedDimension(source: number, target: number) {\n    this.alignedDimensions.push({ source, target });\n  }\n\n  public isEqual(m: Alignment): boolean {\n    if (!(m instanceof DimensionAlignment) || m === null) {\n      return false;\n    }\n\n    return (\n      m.source === this.source &&\n      m.target === this.target &&\n      _.isEqual(this.alignedDimensions, m.alignedDimensions)\n    );\n  }\n\n  public serialize() {\n    return {\n      type: \"dimension\",\n      source: this.source,\n      target: this.target,\n      aligned_dims: _.map(this.alignedDimensions, m => ({\n        source: m.source,\n        target: m.target\n      }))\n    };\n  }\n}\n","export class Ontology {\n  private _prefix: string;\n  private _ns: string;\n\n  constructor(prefix: string, namespace: string) {\n    this._prefix = prefix;\n    this._ns = namespace;\n  }\n\n  get prefix() {\n    return this._prefix;\n  }\n\n  get namespace() {\n    return this._ns;\n  }\n}\n","import { Resource, Variable, SemanticModel, Ontology, Alignment } from \".\";\nimport * as _ from \"lodash\";\nimport { ValueAlignment, DimensionAlignment } from \"./Alignment\";\n\nexport class DRepr {\n  public resources: Resource[];\n  public transformation: any;\n  public variables: Variable[];\n  public mappings: Alignment[];\n  public semanticModel: SemanticModel;\n  private onts: { [prefix: string]: Ontology };\n\n  constructor(\n    resources: Resource[],\n    variables: Variable[],\n    mappings: Alignment[],\n    sm: SemanticModel,\n    onts: { [prefix: string]: Ontology }\n  ) {\n    this.resources = resources;\n    this.variables = variables;\n    this.mappings = mappings;\n    this.semanticModel = sm;\n    this.onts = onts;\n  }\n\n  public serialize() {\n    const resources = {};\n    for (const r of this.resources) {\n      resources[r.resourceId] = r.resourceType;\n    }\n    const layout = {};\n    for (const v of this.variables) {\n      layout[v.id] = {\n        location: v.location.toString(false)\n      };\n    }\n    // // create semantic model\n    // const semanticTypes = {};\n    // for (const n of this.semanticModel.iterDataNodes()) {\n    //   const stype = this.semanticModel.getDataNodeSemanticType(n.id);\n    //   if (stype !== undefined) {\n    //     semanticTypes[n.id] = `${stype.ontClass!.serialize2str()}--${\n    //       stype.ontPredicate\n    //     }`;\n    //   }\n    // }\n    // const semanticRelations = [];\n    // for (const [s, p, o] of this.semanticModel.iterTriples()) {\n    //   if (o.isClassNode()) {\n    //     semanticRelations.push(\n    //       `${s.classId!.serialize2str()}--${p}--${o.classId!.serialize2str()}`\n    //     );\n    //   }\n    // }\n\n    // create mappings\n    const mappings = _.map(this.mappings, m => {\n      const o: any = m.serialize();\n      if (m instanceof ValueAlignment) {\n        o.type = \"value_mapping\";\n      } else if (m instanceof DimensionAlignment) {\n        o.type = \"dimension_mapping\";\n      } else {\n        throw new Error(\"Congrat! You found a bug\");\n      }\n\n      return o;\n    });\n\n    return {\n      resources,\n      transformation: [],\n      layout,\n      mappings,\n      semantic_model: this.semanticModel.serialize(this.onts)\n    };\n  }\n}\n","export * from \"./Resource\";\nexport * from \"./Variable\";\nexport * from \"./SemanticModel\";\nexport * from \"./DRepr\";\nexport * from \"./Ontology\";\nexport * from \"./SemanticModel\";\nexport * from \"./ClassId\";\nexport * from \"./Alignment\";\nimport * as data from \"./data\";\nexport { data };\n","import { withStyles, WithStyles } from \"@material-ui/core/styles\";\nexport { withStyles as injectStyles, WithStyles };\n","import * as constants from \"../constants\";\nimport { Variable } from \"src/models\";\nimport { Dispatch } from \"react\";\nimport { DReprAction } from \".\";\nimport { DB } from \"../types\";\n\nexport interface VariableUpsert {\n  type: constants.VARIABLE_UPSERT;\n  variable: Variable;\n  previousVariableId: string | null;\n}\n\nexport interface VariableDelete {\n  type: constants.VARIABLE_DELETE;\n  variableId: string;\n}\n\nexport function variableUpsert(\n  variable: Variable,\n  previousVariableId: string | null = null\n): VariableUpsert {\n  return {\n    type: constants.VARIABLE_UPSERT,\n    variable,\n    previousVariableId\n  };\n}\n\nexport function variableDelete(variableId: string): VariableDelete {\n  return {\n    type: constants.VARIABLE_DELETE,\n    variableId\n  };\n}\n","import * as constants from \"../constants\";\nimport axios from \"axios\";\nimport {\n  data,\n  Resource,\n  Variable,\n  Location,\n  SemanticModel,\n  Ontology,\n  Alignment\n} from \"../../models\";\nimport { ResourceRecord, DB, AppTbl, SyncStatus, Dataset } from \"../types\";\nimport { Dispatch } from \"redux\";\nimport {\n  DiscontinuousArrayPortionOfData,\n  HashMapPortionOfData\n} from \"../../models/data/PortionOfData\";\nimport { DReprAction } from \".\";\nimport { RangeDimension, Dimension } from \"src/models/data\";\nimport * as _ from \"lodash\";\n\nexport interface DatasetRemove {\n  type: constants.DATASET_REMOVE;\n  datasetName: string;\n}\n\nexport interface DatasetList {\n  type: constants.DATASET_LIST;\n  datasets: Dataset[];\n}\n\nexport interface DatasetCreate {\n  type: constants.DATASET_CREATE;\n  dataset: Dataset;\n}\n\nexport interface DatasetSelect {\n  type: constants.DATASET_SELECT;\n  datasetName: string;\n  variables: Variable[];\n  alignments: Alignment[];\n  resources: ResourceRecord[];\n  semanticModel: SemanticModel;\n}\n\nexport interface DatasetDeSelect {\n  type: constants.DATASET_DESELECT;\n}\n\nexport function datasetList(): any {\n  return (dispatch: Dispatch<DReprAction>, getState: () => DB) => {\n    return getState()\n      .app.get(\"/datasets\")\n      .then((resp: any) => {\n        const dsets = _.map(resp.data.datasets, d => ({\n          name: d.name,\n          description: d.description,\n          mbsize: null\n        }));\n\n        return dispatch({\n          type: constants.DATASET_LIST,\n          datasets: dsets\n        });\n      });\n  };\n}\n\nexport function datasetCreate(name: string, description: string): any {\n  return (dispatch: Dispatch<DReprAction>, getState: () => DB) => {\n    return getState()\n      .app.post(`/datasets`, {\n        name,\n        description\n      })\n      .then(() => {\n        return dispatch({\n          type: constants.DATASET_CREATE,\n          dataset: {\n            name,\n            description,\n            mbsize: null\n          }\n        });\n      });\n  };\n}\n\nexport function datasetRemove(datasetName: string): any {\n  return (dispatch: Dispatch<DReprAction>, getState: () => DB) => {\n    const db = getState();\n    if (db.datasets.activeDataset === datasetName) {\n      dispatch(datasetDeSelect());\n    }\n\n    return db.app.delete(`/datasets/${datasetName}`).then((resp: any) => {\n      return dispatch({\n        type: constants.DATASET_REMOVE,\n        datasetName\n      });\n    });\n  };\n}\n\nexport function datasetDeSelect(): DatasetDeSelect {\n  return {\n    type: constants.DATASET_DESELECT\n  };\n}\n\nexport function datasetSelect(\n  datasetName: string,\n  dismissNotifyError?: boolean\n): any {\n  return (dispatch: Dispatch<DReprAction>, getState: () => DB) => {\n    const db = getState();\n    return db.app\n      .get(`/datasets/${datasetName}`, undefined, dismissNotifyError)\n      .then((resp: any) => {\n        const resources: { [rid: string]: ResourceRecord } = {};\n        const variables: Variable[] = [];\n        const alignments: Alignment[] = _.map(resp.data.alignments, m =>\n          Alignment.deserialize(m)\n        );\n\n        for (const rid in resp.data.resources) {\n          const rawResource = resp.data.resources[rid];\n          const dimension = Dimension.deserialize(rawResource.dimension);\n          const pod =\n            dimension instanceof RangeDimension\n              ? new DiscontinuousArrayPortionOfData([])\n              : new HashMapPortionOfData();\n\n          const resource = new ResourceRecord(\n            new Resource(rid, rawResource.type),\n            new data.NDimData(rid, dimension, pod)\n          );\n\n          resources[rid] = resource;\n        }\n\n        for (const vid in resp.data.variables) {\n          const v = resp.data.variables[vid];\n          variables.push(\n            new Variable(\n              v.id,\n              v.sorted,\n              v.value_type,\n              v.unique,\n              v.missing_values,\n              Location.fromSerializedSlices(\n                v.location.resource_id,\n                v.location.slices\n              )\n            )\n          );\n        }\n\n        dispatch({\n          type: constants.DATASET_SELECT,\n          datasetName,\n          resources: _.values(resources),\n          variables,\n          alignments,\n          semanticModel: SemanticModel.deserialize(resp.data.semantic_model)\n        });\n      });\n  };\n}\n","import axios from \"axios\";\nimport * as _ from \"lodash\";\nimport { Dispatch } from \"redux\";\nimport { DReprAction } from \".\";\nimport { Ontology } from \"../../models\";\nimport * as constants from \"../constants\";\nimport { AppTbl, DB, SyncStatus } from \"../types\";\nimport { datasetSelect } from \"./dataset\";\n\nexport interface AppReload {\n  type: constants.APP_RELOAD;\n  app: AppTbl;\n}\n\nexport interface AppSetSync {\n  type: constants.APP_SET_SYNC;\n  syncStatus: SyncStatus;\n}\n\nexport function appSetSync(syncStatus: SyncStatus) {\n  return {\n    type: constants.APP_SET_SYNC,\n    syncStatus\n  };\n}\n\nexport function appReload(app: AppTbl): any {\n  return (dispatch: Dispatch<DReprAction>, getState: () => DB) => {\n    return app.get(`/ontologies`).then((resp: any) => {\n      dispatch({\n        type: constants.APP_RELOAD,\n        app\n      });\n\n      dispatch({\n        type: constants.ONTOLOGY_LIST,\n        ontologies: _.map(\n          resp.data.ontologies,\n          (ns, prefix) => new Ontology(prefix, ns)\n        )\n      });\n\n      // checking if we need to load specific dataset that user has specified\n      const params = new URLSearchParams(window.location.search);\n      const datasetName = params.get(\"dataset\");\n      if (datasetName !== null) {\n        return dispatch(datasetSelect(datasetName, true)).catch(\n          (error: any) => {\n            if (error.response.status === 404) {\n              // the dataset doesn't exist, we silent the error;\n            } else {\n              throw error;\n            }\n          }\n        );\n      }\n    });\n  };\n}\n\nexport function appLogin(email: string, password: string): any {\n  return (dispatch: Dispatch<DReprAction>, getState: () => DB) => {\n    return axios\n      .post(\"/login\", {\n        email,\n        password\n      })\n      .then((resp: any) => {\n        // set authentication token\n        const newApp = getState().app.cloneRef();\n        newApp.setAccessToken(email, resp.data.auth_token);\n\n        return dispatch(appReload(newApp));\n      });\n  };\n}\n","import * as constants from \"../constants\";\nimport { ResourceRecord, DB } from \"../types\";\nimport { DataSlice, PortionOfData } from \"src/models/data\";\nimport { DReprAction } from \".\";\nimport { Dispatch } from \"redux\";\nimport axios from \"axios\";\nimport { Alignment } from \"src/models\";\n\nexport interface AlignmentUpsert {\n  type: constants.ALIGNMENT_UPSERT;\n  mapping: Alignment;\n}\n\nexport interface MappingRemove {\n  type: constants.ALIGNMENT_REMOVE;\n  mapping: Alignment;\n}\n\nexport function alignmentUpsert(alignment: Alignment): AlignmentUpsert {\n  return {\n    type: constants.ALIGNMENT_UPSERT,\n    mapping: alignment\n  };\n}\n\nexport function alignmentRemove(alignment: Alignment): MappingRemove {\n  return {\n    type: constants.ALIGNMENT_REMOVE,\n    mapping: alignment\n  };\n}\n","import { ResourceUpsert, ResourceUpdateData, ResourceDelete } from \"./resource\";\nimport { UISetDisplayMax1Resource } from \"./uiConf\";\nimport { AppReload, AppSetSync } from \"./app\";\nimport { VariableUpsert, VariableDelete } from \"./variable\";\nimport { OntologyList, OntologyRemove, OntologyCreate } from \"./ontology\";\nimport { MappingRemove, AlignmentUpsert } from \"./alignment\";\nimport {\n  SemanticModelAddDataNode,\n  SemanticModelAddEdge,\n  SemanticModelRemoveNode,\n  SemanticModelUpdateEdge,\n  SemanticModelRemoveEdge\n} from \"./semanticModel\";\nimport {\n  DatasetSelect,\n  DatasetRemove,\n  DatasetList,\n  DatasetCreate,\n  DatasetDeSelect\n} from \"./dataset\";\n\nexport type DReprAction =\n  | AppReload\n  | AppSetSync\n  | ResourceUpsert\n  | ResourceUpdateData\n  | ResourceDelete\n  | VariableUpsert\n  | VariableDelete\n  | MappingRemove\n  | AlignmentUpsert\n  | UISetDisplayMax1Resource\n  | OntologyList\n  | OntologyRemove\n  | OntologyCreate\n  | DatasetSelect\n  | DatasetRemove\n  | DatasetList\n  | DatasetCreate\n  | DatasetDeSelect\n  | SemanticModelAddDataNode\n  | SemanticModelAddEdge\n  | SemanticModelRemoveNode\n  | SemanticModelUpdateEdge\n  | SemanticModelRemoveEdge;\n\nexport { resourceCreate, resourceDelete, resourceFetchData } from \"./resource\";\nexport { variableUpsert, variableDelete } from \"./variable\";\nexport { appReload, appSetSync, appLogin } from \"./app\";\nexport { uiSetDisplayMax1Resource } from \"./uiConf\";\nexport {\n  smAddDataNode,\n  smAddEdge,\n  smRemoveEdge,\n  smUpdateEdge,\n  smRemoveNode\n} from \"./semanticModel\";\nexport { ontologyList, ontologyRemove, ontologyCreate } from \"./ontology\";\nexport { alignmentUpsert, alignmentRemove } from \"./alignment\";\nexport {\n  datasetList,\n  datasetCreate,\n  datasetRemove,\n  datasetSelect,\n  datasetDeSelect\n} from \"./dataset\";\n","export default class UIConfiguration {\n  public displayMax1Resource: boolean;\n\n  constructor(displayMax1Resource: boolean) {\n    this.displayMax1Resource = displayMax1Resource;\n  }\n\n  public setDisplayMax1Resource(displayMax1Resource: boolean) {\n    const instance = this.shallowClone();\n    instance.displayMax1Resource = displayMax1Resource;\n    return instance;\n  }\n\n  private clone() {\n    return new UIConfiguration(this.displayMax1Resource);\n  }\n\n  private shallowClone() {\n    return new UIConfiguration(this.displayMax1Resource);\n  }\n}\n","import * as Cookies from \"js-cookie\";\nimport { access } from \"fs\";\nimport { runInNewContext } from \"vm\";\nimport axios, { AxiosRequestConfig } from \"axios\";\nimport { BugError } from \"src/misc/Exception\";\nimport { notification } from \"antd\";\n\nexport enum SyncStatus {\n  synched = \"synched\",\n  synching = \"synching\",\n  error = \"error\"\n}\n\nexport class AppTbl {\n  public static default() {\n    return new AppTbl(SyncStatus.synched, \"\", \"\");\n  }\n\n  public synchStatus: SyncStatus;\n  private _email: string;\n  private _accessToken: string;\n\n  constructor(synchStatus: SyncStatus, email: string, accessToken: string) {\n    this.synchStatus = synchStatus;\n    this._email = email;\n    this._accessToken = accessToken;\n  }\n\n  public cloneRef() {\n    return new AppTbl(this.synchStatus, this._email, this._accessToken);\n  }\n\n  get email(): string {\n    return this._email;\n  }\n\n  public isLoggedIn(): boolean {\n    return this._email !== \"\";\n  }\n\n  // send post request to server\n  public post(\n    url: string,\n    data?: any,\n    config?: AxiosRequestConfig,\n    dismissNotifyError?: boolean\n  ) {\n    if (config && config.headers) {\n      config.headers.Authorization = this._accessToken;\n    } else {\n      config = {\n        ...config,\n        headers: { Authorization: this._accessToken }\n      };\n    }\n\n    if (dismissNotifyError) {\n      return axios.post(url, data, config);\n    }\n\n    return axios.post(url, data, config).catch(reason => {\n      notification.error({\n        message: \"Error\",\n        description: reason.response.data.message || reason.message\n      });\n\n      throw reason;\n    });\n  }\n\n  // send get request to server\n  public get(\n    url: string,\n    config?: AxiosRequestConfig,\n    dismissNotifyError?: boolean\n  ) {\n    if (config && config.headers) {\n      config.headers.Authorization = this._accessToken;\n    } else {\n      config = {\n        ...config,\n        headers: { Authorization: this._accessToken }\n      };\n    }\n\n    if (dismissNotifyError) {\n      return axios.get(url, config);\n    }\n\n    return axios.get(url, config).catch(reason => {\n      notification.error({\n        message: \"Error\",\n        description: reason.response.data.message || reason.message\n      });\n\n      throw reason;\n    });\n  }\n\n  public head(\n    url: string,\n    config?: AxiosRequestConfig,\n    dismissNotifyError?: boolean\n  ) {\n    if (config && config.headers) {\n      config.headers.Authorization = this._accessToken;\n    } else {\n      config = {\n        ...config,\n        headers: { Authorization: this._accessToken }\n      };\n    }\n\n    if (dismissNotifyError) {\n      return axios.head(url, config);\n    }\n\n    return axios.head(url, config).catch(reason => {\n      notification.error({\n        message: \"Error\",\n        description: reason.response.data.message || reason.message\n      });\n\n      throw reason;\n    });\n  }\n\n  public delete(\n    url: string,\n    config?: AxiosRequestConfig,\n    dismissNotifyError?: boolean\n  ) {\n    if (config && config.headers) {\n      config.headers.Authorization = this._accessToken;\n    } else {\n      config = {\n        ...config,\n        headers: { Authorization: this._accessToken }\n      };\n    }\n\n    if (dismissNotifyError) {\n      return axios.delete(url, config);\n    }\n\n    return axios.delete(url, config).catch(reason => {\n      notification.error({\n        message: \"Error\",\n        description: reason.response.data.message || reason.message\n      });\n\n      throw reason;\n    });\n  }\n\n  // attempt to re-login\n  public attempt2ReLoggedIn(): Promise<AppTbl> {\n    const email = Cookies.get(\"email\");\n    const accessToken = Cookies.get(\"accessToken\");\n    if (email === undefined || accessToken === undefined) {\n      return Promise.resolve(this);\n    }\n\n    // TODO: need to re-connect with server to verify\n    const na = this.cloneRef();\n    na._email = email;\n    na._accessToken = accessToken;\n\n    return na\n      .head(`/has_authority`, undefined, true)\n      .then(() => na)\n      .catch(() => this);\n  }\n\n  // update the current access token\n  public setAccessToken(email: string, accessToken: string) {\n    if (\n      !(\n        typeof accessToken === \"string\" &&\n        typeof email === \"string\" &&\n        accessToken.length > 0 &&\n        email.length > 0\n      )\n    ) {\n      throw new BugError(\n        \"AccessToken or Email should not be null or undefined\"\n      );\n    }\n\n    this._accessToken = accessToken;\n    this._email = email;\n    Cookies.set(\"accessToken\", accessToken);\n    Cookies.set(\"email\", email);\n  }\n}\n","import { Resource, data } from \"src/models\";\n\nexport class ResourceRecord {\n  public resource: Resource;\n  public data: data.NDimData;\n\n  constructor(resource: Resource, data2: data.NDimData) {\n    this.resource = resource;\n    this.data = data2;\n  }\n}\n","import UIConfiguration from \"./UIConfiguration\";\nimport { ResourceRecord } from \"./Resource\";\nimport { Variable, Ontology, SemanticModel, Alignment } from \"src/models\";\nimport { AppTbl } from \"./AppTbl\";\nexport { AppTbl, SyncStatus } from \"./AppTbl\";\nexport { ResourceRecord } from \"./Resource\";\nexport { default as UIConfiguration } from \"./UIConfiguration\";\n\nexport interface Dataset {\n  name: string;\n  description: string;\n  mbsize: number | null; // size of the dataset in megabytes\n}\n\nexport interface DatasetTbl {\n  datasets: Dataset[];\n  activeDataset: string | null;\n}\n\nexport interface ResourcesTbl {\n  [rid: string]: ResourceRecord;\n}\n\nexport interface VariableTbl {\n  [vid: string]: Variable;\n}\n\nexport interface OntologyTbl {\n  [prefix: string]: Ontology;\n}\n\nexport type AlignmentTbl = Alignment[];\n\nexport interface DB {\n  app: AppTbl;\n  datasets: DatasetTbl;\n  resources: ResourcesTbl;\n  variables: VariableTbl;\n  ontologies: OntologyTbl;\n  alignments: AlignmentTbl;\n  semanticModel: SemanticModel;\n  uiConf: UIConfiguration;\n}\n\nexport const defaultResourceStoreState = {};\nexport const defaultVariableStoreState = {};\nexport const defaultOntologyStoreState = {};\nexport const defaultAlignmentStoreState = [];\nexport const defaultUIConfiguration = new UIConfiguration(true);\nexport const defaultSemanticModel = SemanticModel.default();\nexport const defaultAppStoreState = AppTbl.default();\nexport const defaultDatasetStoreState = { datasets: [], activeDataset: null };\n","import { Index } from \".\";\n\nexport class UnitOfData {\n  // present a primitive value or a nested object that we cannot divide any further\n  public indice: Index[];\n  public value: any;\n\n  public constructor(indice: Index[], value: any) {\n    this.indice = indice;\n    this.value = value;\n  }\n}\n","export class IDGenerator {\n  private counter: number;\n\n  constructor(start: number = 0) {\n    this.counter = start;\n  }\n\n  public next(): number {\n    return this.counter++;\n  }\n}\n","import * as _ from \"lodash\";\nimport { IDGenerator } from \"../../misc/IDGenerator\";\nimport { DataSlice, ContinuousRangeDataSlice, IndexDataSlice } from \".\";\n\nexport abstract class Dimension {\n  public static deserialize(\n    val: any,\n    depth: number = 0,\n    idgen: IDGenerator = new IDGenerator()\n  ): Dimension {\n    if (val.type === \"range\") {\n      if (\n        val.range.length !== val.values.length + 1 ||\n        val.values.length === 0 ||\n        val.range[0] < 0\n      ) {\n        throw new Error(\"Invalid values of RangeDimension\");\n      }\n\n      const range = [];\n      for (const v of val.range) {\n        if (v === \"inf\") {\n          range.push(Infinity);\n          continue;\n        } else {\n          range.push(v);\n        }\n\n        if (typeof v !== \"number\") {\n          throw new Error(\"Invalid range values of RangeDimension\");\n        }\n      }\n      for (let i = 1; i < range.length; i++) {\n        if (range[i] < range[i - 1]) {\n          throw new Error(\"Invalid range values of RangeDimension\");\n        }\n      }\n\n      const values = [];\n      for (const v of val.values) {\n        if (v === null) {\n          values.push(v);\n        } else {\n          values.push(Dimension.deserialize(v, depth + 1, idgen));\n        }\n      }\n\n      return new RangeDimension(`rd_${idgen.next()}`, depth, range, values);\n    }\n\n    if (val.type === \"index\") {\n      const index2val = {};\n      for (const k of Object.keys(val.values)) {\n        if (val.values[k] === null) {\n          index2val[k] = null;\n        } else {\n          index2val[k] = Dimension.deserialize(val.values[k], depth + 1, idgen);\n        }\n      }\n\n      return new IndexDimension(`id_${idgen.next()}`, depth, index2val);\n    }\n\n    throw new Error(\n      `Invalid type of dimension. Expected range or index. Got ${val.type}`\n    );\n  }\n\n  public readonly id: string; // unique id of the dimension\n  public readonly depth: number; // since this is tree structure, depth here is the same concept\n\n  constructor(id: string, depth: number) {\n    this.id = id;\n    this.depth = depth;\n  }\n\n  // return sub-dimension\n  public abstract get(idx: string | number): Dimension | null | undefined;\n  // return the maximum number of dimensions in this heterogeneous data\n  public abstract getMaxNDims(): number;\n  // validate if data slices is valid\n  public abstract isValidSlice(\n    slices: DataSlice,\n    allowSlicePassEnd?: boolean\n  ): boolean;\n  // get the size of the dimension, undefined if the size is varied\n  public abstract size(): undefined | number;\n  public abstract iterDFS(\n    depth?: number\n  ): IterableIterator<[Dimension, number]>;\n}\n\nexport type DimensionImpl = RangeDimension | IndexDimension;\n\nexport class RangeDimension extends Dimension {\n  // the start is always >= 0, and the end can be a number or Infinity\n  public range: number[];\n  public values: Array<DimensionImpl | null>;\n\n  constructor(\n    id: string,\n    depth: number,\n    range: number[],\n    values: Array<DimensionImpl | null>\n  ) {\n    super(id, depth);\n    this.range = range;\n    this.values = values;\n  }\n\n  public get(idx: string | number): Dimension | null {\n    return this.values[_.sortedLastIndex(this.range, idx as number) - 1];\n  }\n\n  public getMaxNDims(): number {\n    return (\n      Math.max(...this.values.map(v => (v === null ? 0 : v.getMaxNDims()))) + 1\n    );\n  }\n\n  public isValidSlice(\n    slice: DataSlice,\n    allowSlicePassEnd: boolean = false\n  ): boolean {\n    if (slice === null) {\n      return false;\n    }\n\n    if (slice instanceof ContinuousRangeDataSlice) {\n      if (\n        slice.start < this.range[0] ||\n        (!allowSlicePassEnd &&\n          slice.end !== Infinity &&\n          slice.end > this.range[this.range.length - 1])\n      ) {\n        // out of the range\n        return false;\n      }\n      // we accept the empty slice at the end\n      if (\n        slice.start === slice.end &&\n        this.range[this.range.length - 1] === slice.end\n      ) {\n        return true;\n      }\n\n      // we accept a data slice what span through multiple heterogeneous dimensions\n      let idx = _.sortedLastIndex(this.range, slice.start) - 1;\n      do {\n        if (\n          !(\n            (this.values[idx] === null && slice.values[idx] === null) ||\n            (this.values[idx] !== null &&\n              this.values[idx]!.isValidSlice(\n                slice.values[idx]!,\n                allowSlicePassEnd\n              ))\n          )\n        ) {\n          return false;\n        }\n        idx += 1;\n      } while (idx < this.values.length && this.range[idx] < slice.end);\n\n      return true;\n    }\n\n    return false;\n  }\n\n  public size(): undefined | number {\n    if (this.range[this.range.length - 1] === Infinity) {\n      return undefined;\n    }\n\n    return this.range[this.range.length - 1] - this.range[0];\n  }\n\n  public *iterDFS(depth: number = 0): IterableIterator<[Dimension, number]> {\n    yield [this, depth];\n    for (let i = 0; i < this.range.length - 1; i++) {\n      const csptr = this.get(this.range[i]);\n      if (csptr === null) {\n        continue;\n      }\n\n      for (const [s, d] of csptr.iterDFS(depth + 1)) {\n        yield [s, d];\n      }\n    }\n  }\n}\n\nexport class IndexDimension extends Dimension {\n  public index2val: { [index: string]: DimensionImpl | null };\n\n  constructor(\n    id: string,\n    depth: number,\n    index2val: { [index: string]: DimensionImpl | null }\n  ) {\n    super(id, depth);\n    this.index2val = index2val;\n  }\n\n  public get(idx: string | number): Dimension | null | undefined {\n    return this.index2val[idx];\n  }\n\n  public getMaxNDims(): number {\n    return (\n      Math.max(\n        ...Object.keys(this.index2val).map((k: string) =>\n          this.index2val[k] === null\n            ? 0\n            : (this.index2val[k] as DimensionImpl).getMaxNDims()\n        )\n      ) + 1\n    );\n  }\n\n  public isValidSlice(\n    slice: DataSlice,\n    allowSlicePassEnd: boolean = false\n  ): boolean {\n    if (slice === null) {\n      return false;\n    }\n\n    if (slice instanceof IndexDataSlice) {\n      for (const k of Object.keys(slice.index2slice)) {\n        if (!(k in this.index2val)) {\n          return false;\n        }\n\n        if (\n          !(\n            (this.index2val[k] === null && slice.index2slice[k] === null) ||\n            this.index2val[k]!.isValidSlice(\n              slice.index2slice[k]!,\n              allowSlicePassEnd\n            )\n          )\n        ) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  public size(): undefined | number {\n    return Object.keys(this.index2val).length;\n  }\n\n  public *iterDFS(depth: number = 0): IterableIterator<[Dimension, number]> {\n    yield [this, depth];\n\n    for (const idx in this.index2val) {\n      const val = this.index2val[idx];\n      if (val === null) {\n        continue;\n      }\n\n      for (const [s, d] of val.iterDFS(depth + 1)) {\n        yield [s, d];\n      }\n    }\n  }\n}\n","import { PortionOfData, Dimension } from \".\";\n\nexport class NDimData {\n  public id: string;\n  public dimension: Dimension;\n  public pod: PortionOfData;\n\n  constructor(id: string, dimension: Dimension, data: PortionOfData) {\n    this.id = id;\n    this.pod = data;\n    this.dimension = dimension;\n  }\n}\n","import { IDGenerator } from \"../../misc/IDGenerator\";\nimport { Slice, RangeSlice } from \"../Variable\";\nimport {\n  PortionOfData,\n  UnitOfData,\n  Dimension,\n  ContinuousRangeDataSlice,\n  IndexDataSlice,\n  Index,\n  RangeUtil,\n  RangeDimension,\n  DimensionImpl\n} from \".\";\nimport * as _ from \"lodash\";\n\ntype PUData = PortionOfData | UnitOfData;\ntype II<X> = IterableIterator<X>;\n\nexport abstract class DataSlice {\n  public static deserialize(obj: any): DataSlice {\n    return deserializeDataSlice(obj, new IDGenerator());\n  }\n\n  public static fromSlices(\n    resourceId: string,\n    dim: Dimension,\n    slices: Slice[]\n  ): DataSlice {\n    const dslice = slices2DataSlices(0, slices, new IDGenerator())!;\n    restrainDataSliceFixedCostModel(dslice, dim, 1000, 10, 20);\n    return dslice;\n  }\n\n  public static fromDimension(resourceId: string, dim: Dimension): DataSlice {\n    return dimension2DataSlicesFixCostModel(\n      dim instanceof RangeDimension ? dim.range[0] : Infinity,\n      dim as DimensionImpl,\n      new IDGenerator(),\n      2000,\n      10,\n      30\n    );\n  }\n\n  public readonly id: string;\n\n  constructor(id: string) {\n    this.id = id;\n  }\n\n  // test if data slice is overlapped with slices, the slices should be checked to make sure it is valid before calling this function\n  public isOverlappedWithSlices(slices: Slice[]): boolean {\n    for (const [sptr, depth] of this.iterDFS()) {\n      const slice = slices[depth];\n      if (sptr instanceof ContinuousRangeDataSlice) {\n        if (slice instanceof RangeSlice) {\n          if (!slice.isRangeOverlapped(sptr.start, sptr.end)) {\n            return false;\n          }\n        } else {\n          if (!(slice.index >= sptr.start && slice.index < sptr.end)) {\n            return false;\n          }\n        }\n      } else {\n        if (slice instanceof RangeSlice) {\n          let isOverlapped = false;\n          for (const idx in (sptr as IndexDataSlice).index2slice) {\n            if (typeof idx === \"number\" && slice.isSelected(idx)) {\n              isOverlapped = true;\n              break;\n            }\n          }\n\n          if (!isOverlapped) {\n            return false;\n          }\n        } else {\n          if (!(slice.index in (sptr as IndexDataSlice).index2slice)) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n\n  // if an index is selected in this data slice\n  public abstract isSelected(idx: Index): boolean;\n  // set nested data slice\n  public abstract setValue(idx: Index, val: DataSlice | null): void;\n  // get nested data slice\n  public abstract getValue(idx: Index): DataSlice | null;\n  // test if the slice select all indices in the given dimension (non-recursive)\n  public abstract isSlicingAllIndices(dim: Dimension): boolean;\n  // test if this slice is select only one element\n  public abstract isSelectOne(): boolean;\n  // convert the slice into an index if it only select one element in the current dimension\n  public abstract toIndex(): Index;\n  // iterate through all values of data in this dimension\n  public abstract iter(data: PortionOfData): II<PUData>;\n  // iterate through all values in this dimension (we need data because the slice can be infinity)\n  public abstract iterKeys(data: PortionOfData): II<Index>;\n  // iterate through all index and values in this dimension\n  public abstract iterEntries(data: PortionOfData): II<[Index, PUData]>;\n  // iterate through nested data slice (DFS)\n  public abstract iterDFS(depth?: number): II<[DataSlice, number]>;\n  // iterate through nested dimension (DFS)\n  public abstract iterDim(dim: Dimension): II<[DataSlice, Dimension]>;\n  public abstract serialize(): object;\n  public abstract clone(): DataSlice;\n}\n\nexport type DataSliceImpl = ContinuousRangeDataSlice | IndexDataSlice;\n\nfunction deserializeDataSlice(obj: any, idgen: IDGenerator): DataSlice {\n  if (obj.type === \"range\") {\n    return new ContinuousRangeDataSlice(\n      `rds_${idgen.next()}`,\n      obj.range,\n      _.map(obj.values, v =>\n        v === null ? null : deserializeDataSlice(v, idgen)\n      )\n    );\n  } else {\n    const id = `ids_${idgen.next()}`;\n    const index2slice = {};\n    for (const [idx, val] of obj.index2slice) {\n      if (obj.index2slice[idx] !== null) {\n        index2slice[idx] = deserializeDataSlice(val, idgen);\n      } else {\n        index2slice[idx] = null;\n      }\n    }\n    return new IndexDataSlice(id, index2slice);\n  }\n}\n\nexport function slices2DataSlices(\n  sliceIndex: number,\n  slices: Slice[],\n  idgen: IDGenerator\n): DataSlice | null {\n  if (sliceIndex >= slices.length) {\n    return null;\n  }\n\n  const slice = slices[sliceIndex];\n  if (slice instanceof RangeSlice) {\n    const id = `rds_${idgen.next()}`;\n    const range = [slice.start, slice.end];\n    const values = [slices2DataSlices(sliceIndex + 1, slices, idgen)];\n\n    return new ContinuousRangeDataSlice(id, range, values);\n  } else {\n    return new IndexDataSlice(`ids_${idgen.next()}`, {\n      [slice.index]: slices2DataSlices(sliceIndex + 1, slices, idgen)\n    });\n  }\n}\n\nfunction dimension2DataSlicesFixCostModel(\n  start: number, // to only set\n  dim: DimensionImpl,\n  idgen: IDGenerator,\n  maxNElements: number,\n  maxElementPerRangeDim: number,\n  maxElementPerIndexDim: number\n): DataSlice {\n  if (dim instanceof RangeDimension) {\n    const id = `rds_${idgen.next()}`;\n    let ru = new RangeUtil(dim.range, dim.values);\n    ru = ru.changeRange(start, maxElementPerRangeDim);\n    const range = ru.range;\n    const values = _.map(ru.values, v => {\n      if (v === null) {\n        return null;\n      }\n\n      return dimension2DataSlicesFixCostModel(\n        v instanceof RangeDimension ? v.range[0] : Infinity,\n        v,\n        idgen,\n        maxNElements,\n        // TODO: fix me! hard code here to select > 10 columns\n        20,\n        maxElementPerIndexDim\n      );\n    });\n\n    return new ContinuousRangeDataSlice(id, range, values);\n  } else {\n    const id = `ids_${idgen.next()}`;\n    const index2slice = {};\n    let val;\n\n    for (const idx in dim.index2val) {\n      if (_.size(index2slice) > maxElementPerIndexDim) {\n        break;\n      }\n\n      val = dim.index2val[idx];\n      if (val === null) {\n        index2slice[idx] = null;\n      } else {\n        index2slice[idx] = dimension2DataSlicesFixCostModel(\n          val instanceof RangeDimension ? val.range[0] : Infinity,\n          val,\n          idgen,\n          maxNElements,\n          maxElementPerRangeDim,\n          maxElementPerIndexDim\n        );\n      }\n    }\n\n    return new IndexDataSlice(id, index2slice);\n  }\n}\n\nfunction restrainDataSliceFixedCostModel(\n  dslice: DataSlice,\n  dim: Dimension,\n  maxNElements: number,\n  maxElementPerRangeDim: number,\n  maxElementPerIndexDim: number\n) {\n  // apply the following heuristic: apply in reverse direction (from bottom to top)\n  // if the size is too big, we shrink it down, if the size is too small, be make it bigger\n  // until the total selected is not exceeded certain size\n  const idgen = new IDGenerator();\n  // mapping between depth to data slices\n  const index = {};\n  let maxDepth = 0;\n  for (const [sptr, dptr] of dslice.iterDim(dim)) {\n    if (!(dptr.depth in index)) {\n      index[dptr.depth] = [];\n    }\n\n    index[dptr.depth].push([sptr, dptr]);\n    if (dptr.depth > maxDepth) {\n      maxDepth = dptr.depth;\n    }\n  }\n\n  // start work from bottom to top\n  for (let d = maxDepth; d >= 0; d--) {\n    // examine each data slice\n    for (const [sptr, dptr] of index[d]) {\n      if (sptr instanceof ContinuousRangeDataSlice) {\n        if (sptr.end - sptr.start > maxElementPerRangeDim) {\n          // reduce the size\n          const ru = new RangeUtil(sptr.range, sptr.values).changeRange(\n            sptr.start,\n            maxElementPerRangeDim\n          );\n          sptr.range = ru.range;\n          sptr.values = ru.values;\n        } else if (sptr.end - sptr.start < maxElementPerRangeDim) {\n          // increase the size\n          const child = dimension2DataSlicesFixCostModel(\n            sptr.end,\n            dptr,\n            idgen,\n            maxNElements,\n            maxElementPerRangeDim,\n            maxElementPerRangeDim\n          ) as ContinuousRangeDataSlice;\n\n          const ru = new RangeUtil(\n            sptr.range.concat(child.range.slice(1)),\n            sptr.values.concat(child.values)\n          )\n            .changeRange(sptr.start, maxElementPerRangeDim)\n            .optimize();\n          sptr.range = ru.range;\n          sptr.values = ru.values;\n        }\n      } else {\n        const nIndex = _.size(sptr.index2slice);\n        if (nIndex > maxElementPerIndexDim) {\n          // reduce the size\n          const deletedIds = Object.keys(sptr.index2slice).slice(\n            0,\n            maxElementPerIndexDim - nIndex\n          );\n          for (const idx of deletedIds) {\n            delete sptr.index2slice[idx];\n          }\n        } else if (nIndex < maxElementPerIndexDim) {\n          // increase the size\n          let nIncrease = maxElementPerIndexDim - nIndex;\n          let val;\n          for (const idx in dptr.index2val) {\n            if (!(idx in sptr.index2slice)) {\n              val = dptr.index2val[idx];\n              if (val === null) {\n                sptr.index2slice[idx] = null;\n              } else {\n                sptr.index2slice[idx] = dimension2DataSlicesFixCostModel(\n                  Infinity,\n                  val,\n                  idgen,\n                  maxNElements,\n                  maxElementPerRangeDim,\n                  maxElementPerIndexDim\n                );\n              }\n              if (--nIncrease === 0) {\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n","import {\n  DataSlice,\n  Index,\n  Dimension,\n  RangeDimension,\n  PortionOfData,\n  UnitOfData\n} from \".\";\nimport * as _ from \"lodash\";\nimport { IndexDataSlice } from \"./IndexDataSlice\";\n\ntype PUData = PortionOfData | UnitOfData;\ntype II<X> = IterableIterator<X>;\n\nexport class ContinuousRangeDataSlice extends DataSlice {\n  // the start is always >= 0 and the end can be a number or Infinity\n  public range: number[];\n  public values: Array<DataSlice | null>;\n\n  constructor(id: string, range: number[], values: Array<DataSlice | null>) {\n    super(id);\n    this.range = range;\n    this.values = values;\n  }\n\n  get start(): number {\n    return this.range[0];\n  }\n\n  get end(): number {\n    return this.range[this.range.length - 1];\n  }\n\n  public isSelected(idx: Index): boolean {\n    return this.start <= idx && idx < this.end;\n  }\n\n  public setValue(idx: Index, val: DataSlice | null) {\n    this.values[_.sortedLastIndex(this.range, idx as number) - 1] = val;\n  }\n\n  public getValue(idx: Index) {\n    return this.values[_.sortedLastIndex(this.range, idx as number) - 1];\n  }\n\n  public isSlicingAllIndices(dim: Dimension): boolean {\n    if (dim instanceof RangeDimension) {\n      return (\n        this.start === dim.range[0] &&\n        this.end === dim.range[dim.range.length - 1]\n      );\n    }\n\n    throw new Error(\"Invalid type of dim, expected to be RangeDimension\");\n  }\n\n  public isSelectOne(): boolean {\n    return this.end - this.start === 1;\n  }\n\n  public toIndex(): Index {\n    if (this.isSelectOne()) {\n      return this.start;\n    }\n    throw new Error(\n      \"Cannot convert the current slice into an index because it selects more than one element\"\n    );\n  }\n\n  public *iter(data: PortionOfData): II<PortionOfData | UnitOfData> {\n    if (this.end === Infinity) {\n      let idx = this.start;\n      while (data.mayHas(idx)) {\n        yield data.get(idx);\n        idx++;\n      }\n    } else {\n      for (let i = this.start; i < this.end; i++) {\n        yield data.get(i);\n      }\n    }\n  }\n\n  public *iterKeys(data: PortionOfData): II<Index> {\n    if (this.end === Infinity) {\n      let idx = this.start;\n      while (data.mayHas(idx)) {\n        yield idx;\n        idx++;\n      }\n    } else {\n      for (let i = this.start; i < this.end; i++) {\n        yield i;\n      }\n    }\n  }\n\n  public *iterEntries(data: PortionOfData): II<[Index, PUData]> {\n    if (this.end === Infinity) {\n      let idx = this.start;\n      while (data.mayHas(idx)) {\n        yield [idx, data.get(idx)];\n        idx++;\n      }\n    } else {\n      for (let i = this.start; i < this.end; i++) {\n        yield [i, data.get(i)];\n      }\n    }\n  }\n\n  public *iterDFS(depth: number = 0): II<[DataSlice, number]> {\n    yield [this, depth];\n    for (let i = 0; i < this.range.length - 1; i++) {\n      const csptr = this.getValue(this.range[i]);\n      if (csptr === null) {\n        continue;\n      }\n\n      for (const [s, d] of csptr.iterDFS(depth + 1)) {\n        yield [s, d];\n      }\n    }\n  }\n\n  public *iterDim(dim: Dimension): II<[DataSlice, Dimension]> {\n    yield [this, dim];\n    for (let i = 0; i < this.range.length - 1; i++) {\n      const csptr = this.getValue(this.range[i]);\n      if (csptr === null) {\n        continue;\n      }\n\n      for (const [s, d] of csptr.iterDim(dim.get(this.range[i])!)) {\n        yield [s, d];\n      }\n    }\n  }\n\n  public serialize(): object {\n    return {\n      type: \"range\",\n      range: this.range,\n      values: _.map(this.values, v => (v === null ? null : v.serialize()))\n    };\n  }\n\n  public clone(): DataSlice {\n    return new ContinuousRangeDataSlice(\n      this.id,\n      this.range,\n      _.map(this.values, v => (v === null ? null : v.clone()))\n    );\n  }\n}\n","import {\n  DataSlice,\n  Index,\n  IndexDimension,\n  PortionOfData,\n  UnitOfData,\n  Dimension\n} from \".\";\n\ntype II<X> = IterableIterator<X>;\ntype PUData = PortionOfData | UnitOfData;\n\nexport class IndexDataSlice extends DataSlice {\n  public index2slice: { [idx in Index]: DataSlice | null };\n\n  constructor(id: string, index2slice: { [idx in Index]: DataSlice | null }) {\n    super(id);\n    this.index2slice = index2slice;\n  }\n\n  public isSelected(idx: Index) {\n    return idx in this.index2slice;\n  }\n\n  public setValue(idx: Index, val: DataSlice | null) {\n    this.index2slice[idx] = val;\n  }\n\n  public getValue(idx: Index) {\n    return this.index2slice[idx];\n  }\n\n  public isSlicingAllIndices(dim: Dimension): boolean {\n    if (dim instanceof IndexDimension) {\n      return (\n        new Set(Object.keys(this.index2slice)) ===\n        new Set(Object.keys(dim.index2val))\n      );\n    }\n\n    throw new Error(\"Invalid type of dim, expected to be RangeDimension\");\n  }\n\n  public isSelectOne(): boolean {\n    return Object.keys(this.index2slice).length === 1;\n  }\n\n  public toIndex(): Index {\n    if (this.isSelectOne()) {\n      return Object.keys(this.index2slice)[0];\n    }\n    throw new Error(\n      \"Cannot convert the current slice into an index because it selects more than one element\"\n    );\n  }\n\n  public *iter(data: PortionOfData): II<PortionOfData | UnitOfData> {\n    for (const k of Object.keys(this.index2slice)) {\n      yield data[k];\n    }\n  }\n\n  public *iterKeys(data: PortionOfData): IterableIterator<Index> {\n    for (const k of Object.keys(this.index2slice)) {\n      yield k;\n    }\n  }\n\n  public *iterEntries(data: PortionOfData): II<[Index, PUData]> {\n    for (const k of Object.keys(this.index2slice)) {\n      yield [k, data[k]];\n    }\n  }\n\n  public *iterDFS(depth: number = 0): II<[DataSlice, number]> {\n    yield [this, depth];\n\n    for (const idx in this.index2slice) {\n      const val = this.index2slice[idx];\n      if (val === null) {\n        continue;\n      }\n\n      for (const [s, d] of val.iterDFS(depth + 1)) {\n        yield [s, d];\n      }\n    }\n  }\n\n  public *iterDim(dim: Dimension): II<[DataSlice, Dimension]> {\n    yield [this, dim];\n\n    for (const idx in this.index2slice) {\n      const val = this.index2slice[idx];\n      if (val === null) {\n        continue;\n      }\n\n      for (const [s, d] of val.iterDim(dim.get(idx)!)) {\n        yield [s, d];\n      }\n    }\n  }\n\n  public serialize(): object {\n    const obj: any = {\n      type: \"index\",\n      index2slice: []\n    };\n    for (const k in this.index2slice) {\n      // TODO: fix me! hard code to fix the issue that javascript always convert number to string\n      // in object keys\n      obj.index2slice.push([\n        isNaN(k as any) ? k : parseInt(k, 10),\n        this.index2slice[k] !== null ? this.index2slice[k]!.serialize() : null\n      ]);\n    }\n    return obj;\n  }\n\n  public clone(): DataSlice {\n    const obj = {};\n    for (const k in this.index2slice) {\n      obj[k] =\n        this.index2slice[k] === null ? null : this.index2slice[k]!.clone();\n    }\n\n    return new IndexDataSlice(this.id, obj);\n  }\n}\n","import * as _ from \"lodash\";\nimport { DataSlice } from \".\";\nimport { Dimension } from \"./Dimension\";\n\nexport class RangeUtil<T> {\n  public readonly range: number[];\n  public readonly values: Array<T | null>;\n\n  // use to manage range & values\n  constructor(range: number[], values: Array<T | null>) {\n    this.range = range;\n    this.values = values;\n  }\n\n  public validate(): boolean {\n    if (this.range.length !== this.values.length + 1) {\n      return false;\n    }\n\n    // must be monotonically increasing\n    for (let i = 1; i < this.range.length; i++) {\n      if (this.range[i] < this.range[i - 1]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public changeRange(start: number, size: number): RangeUtil<T> {\n    // change the range so that range[0] = start & size of range = size\n    if (start < this.range[0] || start >= this.range[this.range.length - 1]) {\n      throw new Error(\"Invalid start\");\n    }\n\n    size = Math.min(size, this.range[this.range.length - 1] - start);\n\n    let idx = _.sortedLastIndex(this.range, start) - 1;\n    const range = [start];\n    const values = [this.values[idx]];\n    while (++idx < this.range.length) {\n      if (this.range[idx] - range[0] >= size) {\n        range.push(range[0] + size);\n        break;\n      }\n\n      range.push(this.range[idx]);\n      values.push(this.values[idx]);\n    }\n\n    return new RangeUtil(range, values);\n  }\n\n  public optimize(): RangeUtil<T> {\n    const range = [this.range[0]];\n    const values = [];\n\n    for (let i = 1; i < this.values.length; i++) {\n      if (!_.isEqual(this.values[i - 1], this.values[i])) {\n        range.push(this.range[i]);\n        values.push(this.values[i - 1]);\n      }\n    }\n\n    range.push(this.range[this.range.length - 1]);\n    values.push(this.values[this.values.length - 1]);\n\n    return new RangeUtil(range, values);\n  }\n}\n\nexport class DataSliceIndex {\n  public static getWithoutIndex(dslice: DataSlice, id: string) {\n    for (const [stpr, depth] of dslice.iterDFS()) {\n      if (stpr.id === id) {\n        return stpr;\n      }\n    }\n\n    throw new Error(`Doesn't have any data slice with id ${id}`);\n  }\n\n  private idmap: { [id: string]: DataSlice };\n\n  constructor(dslice: DataSlice) {\n    this.idmap = {};\n    for (const [stpr, depth] of dslice.iterDFS()) {\n      this.idmap[stpr.id] = stpr;\n    }\n  }\n\n  public get(id: string) {\n    return this.idmap[id];\n  }\n}\n\nexport class DimensionIndex {\n  public static getWithoutIndex(dimension: Dimension, id: string) {\n    for (const [dptr, depth] of dimension.iterDFS()) {\n      if (dptr.id === id) {\n        return dptr;\n      }\n    }\n\n    throw new Error(`Doesn't have any dimension with id ${id}`);\n  }\n\n  private idmap: { [id: string]: Dimension };\n\n  constructor(dim: Dimension) {\n    this.idmap = {};\n    for (const [dtpr, depth] of dim.iterDFS()) {\n      this.idmap[dtpr.id] = dtpr;\n    }\n  }\n\n  public get(id: string) {\n    return this.idmap[id];\n  }\n}\n","export type Index = number | string;\nexport * from \"./UnitOfData\";\n\nexport * from \"./PortionOfData\";\nexport * from \"./Dimension\";\nexport * from \"./NDimData\";\nexport * from \"./DataSlice\";\nexport * from \"./ContinuousRangeDataSlice\";\nexport * from \"./IndexDataSlice\";\nexport * from \"./dataHelpers\";\n","import { Button, Card, Form, Icon, Input, Select, Upload } from \"antd\";\nimport { FormComponentProps } from \"antd/lib/form\";\nimport { UploadFile } from \"antd/lib/upload/interface\";\nimport * as _ from \"lodash\";\nimport * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { SUPPORT_RESOURCE_TYPES } from \"src/models\";\nimport { resourceCreate } from \"src/store/actions\";\nimport { DatasetTbl, DB, ResourcesTbl } from \"src/store/types\";\nimport { injectStyles, WithStyles } from \"../../misc/JssInjection\";\n\nconst styles = {\n  marginRightButton: {\n    marginRight: 8\n  },\n  createResourceForm: {\n    marginTop: 8\n  },\n  uploadBtnContainer: {\n    float: \"right\" as \"right\"\n  },\n  resourceInputContainer: {\n    overflow: \"hidden\",\n    paddingRight: 8\n  }\n};\n\nconst formItemProps = {\n  labelCol: { span: 4 },\n  wrapperCol: { span: 20 }\n};\nconst formTailItemProps = { wrapperCol: { span: 20, offset: 4 } };\nconst ERROR_MSG_REQUIRE_EITHER_URL_OR_FILE =\n  \"Must upload a resource or specify its URL\";\nconst defaultProps = {\n  onClose: () => {\n    /* empty function */\n  }\n};\n\ninterface PublicProps\n  extends Readonly<typeof defaultProps>,\n    FormComponentProps {}\n\ninterface Props extends WithStyles<typeof styles>, PublicProps {\n  datasets: DatasetTbl;\n  resources: ResourcesTbl;\n  dispatch: Dispatch;\n}\n\ninterface State {\n  // need to manage the resoucreFiles as we want to allow maximum one file\n  resourceFiles: UploadFile[];\n  showExtra: boolean;\n}\n\nexport class UpsertResourceForm extends React.Component<Props, State> {\n  public static defaultProps = defaultProps;\n  public state: State = {\n    resourceFiles: [],\n    showExtra: false\n  };\n\n  public render() {\n    const { getFieldDecorator } = this.props.form;\n    const resourceTypes = _.map(\n      SUPPORT_RESOURCE_TYPES,\n      (description, resourceType) => (\n        <Select.Option\n          key={resourceType}\n          data-testid=\"antd-select-options\"\n          data-testvalue={resourceType}\n        >\n          {description}\n        </Select.Option>\n      )\n    );\n    let resourceIdRules;\n    if (_.size(this.props.resources) === 0) {\n      resourceIdRules = {\n        initialValue: \"default\",\n        rules: [{ required: false, whitespace: true }]\n      };\n    } else {\n      resourceIdRules = {\n        rules: [{ required: true, whitespace: true }]\n      };\n    }\n\n    let showExtraBtn = null;\n    const extraProperties = [];\n\n    if (this.props.form.getFieldValue(\"resourceType\")) {\n      showExtraBtn = (\n        <a\n          style={{ marginLeft: 8, fontSize: 12 }}\n          onClick={this.toggleShowExtraProperties}\n        >\n          {this.state.showExtra ? \"Collapse\" : \"Show\"} extra properties{\" \"}\n          <Icon type={this.state.showExtra ? \"up\" : \"down\"} />\n        </a>\n      );\n    }\n\n    if (this.state.showExtra) {\n      switch (this.props.form.getFieldValue(\"resourceType\").label) {\n        case SUPPORT_RESOURCE_TYPES.csv: {\n          extraProperties.push(\n            <Form.Item\n              label=\"Delimiter\"\n              key=\"extra-delimiter\"\n              {...formItemProps}\n              data-testid=\"upsert-resource-form-delimiter-wrapper\"\n            >\n              {getFieldDecorator(\"delimiter\", {\n                initialValue: \",\",\n                rules: [\n                  {\n                    required: false,\n                    whitespace: true,\n                    validator: (rule: any, value: any, callback: any) => {\n                      if (this.normDelimiterChar(value).length !== 1) {\n                        callback([\n                          new Error(\"Delimiter must be 1-character string\")\n                        ]);\n                      }\n                    }\n                  }\n                ]\n              })(<Input data-testid=\"upsert-resource-form-delimiter\" />)}\n            </Form.Item>\n          );\n          break;\n        }\n        case SUPPORT_RESOURCE_TYPES.json:\n        case SUPPORT_RESOURCE_TYPES.netcdf4:\n          break;\n        default: {\n          throw new Error(\n            `Doesn't handle type ${\n              this.props.form.getFieldValue(\"resourceType\").key\n            } yet`\n          );\n        }\n      }\n    }\n\n    return (\n      <Card size=\"small\">\n        <h2>Create Resource</h2>\n        <Form\n          onSubmit={this.createNewResource}\n          data-testid=\"upsert-resource-form\"\n        >\n          <Form.Item label=\"Id\" {...formItemProps}>\n            {getFieldDecorator(\"resourceId\", resourceIdRules)(\n              <Input data-testid=\"upsert-resource-form-resource-id\" />\n            )}\n          </Form.Item>\n          <Form.Item label=\"Type\" {...formItemProps}>\n            {getFieldDecorator(\"resourceType\", {\n              rules: [\n                { required: true, message: \"Please select resource type\" }\n              ]\n            })(\n              <Select\n                showSearch={true}\n                labelInValue={true}\n                data-testid=\"upsert-resource-form-resource-type\"\n              >\n                {resourceTypes}\n              </Select>\n            )}\n          </Form.Item>\n          <Form.Item label=\"Remote File\" {...formItemProps}>\n            {getFieldDecorator(\"resourceURL\", {\n              rules: [\n                {\n                  whitespace: true\n                }\n              ]\n            })(<Input data-testid=\"upsert-resource-form-resource-url\" />)}\n          </Form.Item>\n          <Form.Item label=\"Upload File\" {...formItemProps}>\n            {getFieldDecorator(\"resourceFile\")(\n              <Upload\n                onRemove={this.onRemoveResourceFile}\n                beforeUpload={this.onSelectResourceFile}\n                fileList={this.state.resourceFiles}\n              >\n                <Button>\n                  <Icon type=\"upload\" /> Upload file\n                </Button>\n              </Upload>\n            )}\n          </Form.Item>\n          {extraProperties}\n          <Form.Item {...formTailItemProps}>\n            <Button\n              className={this.props.classes.marginRightButton}\n              type=\"danger\"\n            >\n              Clear\n            </Button>\n            <Button\n              onClick={this.props.onClose}\n              className={this.props.classes.marginRightButton}\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"primary\"\n              htmlType=\"submit\"\n              data-testid=\"upsert-resource-form-submit-button\"\n            >\n              Create\n            </Button>\n            {showExtraBtn}\n          </Form.Item>\n        </Form>\n      </Card>\n    );\n  }\n\n  private toggleShowExtraProperties = () => {\n    if (!this.state.showExtra) {\n      // only show extra properties when resource type is selected\n      if (!this.props.form.getFieldValue(\"resourceType\")) {\n        return;\n      }\n    }\n    this.setState({ showExtra: !this.state.showExtra });\n  };\n\n  private onRemoveResourceFile = (file: UploadFile) => {\n    this.setState({ resourceFiles: [] });\n  };\n\n  private onSelectResourceFile = (file: UploadFile) => {\n    this.setState({\n      resourceFiles: [file]\n    });\n\n    // update resource url\n    const errors = this.props.form.getFieldError(\"resourceURL\");\n    if (errors !== undefined && errors.length > 0) {\n      if (\n        errors[0].toString().indexOf(ERROR_MSG_REQUIRE_EITHER_URL_OR_FILE) !==\n        -1\n      ) {\n        this.props.form.setFields({\n          resourceURL: {\n            errors: undefined\n          }\n        });\n      }\n    }\n\n    return false;\n  };\n\n  private createNewResource = (e: any) => {\n    e.preventDefault();\n    this.props.form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        try {\n          if (values.resourceId in this.props.resources) {\n            // duplicated resource id\n            this.props.form.setFields({\n              resourceId: {\n                value: values.resourceId,\n                errors: [new Error(\"Duplicated resource id\")]\n              }\n            });\n            return;\n          }\n\n          if (\n            this.state.resourceFiles.length === 0 &&\n            (values.resourceURL === undefined ||\n              values.resourceURL.trim() === \"\")\n          ) {\n            this.props.form.setFields({\n              resourceURL: {\n                value: undefined,\n                errors: [new Error(ERROR_MSG_REQUIRE_EITHER_URL_OR_FILE)]\n              }\n            });\n            return;\n          }\n\n          let resourceLoc;\n          let extra;\n          if (values.resourceFile) {\n            resourceLoc = {\n              isFile: true,\n              value: this.state.resourceFiles[0] as any\n            };\n          } else {\n            resourceLoc = { isFile: false, value: values.resourceURL };\n          }\n\n          switch (values.resourceType.label) {\n            case SUPPORT_RESOURCE_TYPES.csv:\n              extra = {\n                delimiter: this.normDelimiterChar(values.delimiter || \",\")\n              };\n              break;\n            case SUPPORT_RESOURCE_TYPES.json:\n            case SUPPORT_RESOURCE_TYPES.netcdf4:\n              extra = {};\n              break;\n            default:\n              throw new Error(\n                `Doesn't handle extra properties of ${\n                  values.resourceType.key\n                } yet`\n              );\n          }\n\n          this.props\n            .dispatch(\n              resourceCreate(\n                values.resourceId,\n                values.resourceType.key,\n                resourceLoc,\n                extra\n              )\n            )\n            .then(() => {\n              return this.props.onClose();\n            })\n            .catch((error: any) => {\n              // TODO: handle this correctly\n              global.console.error(\"[ERROR]\", error);\n            });\n        } catch (error) {\n          global.console.error(\"[BUG]\", error);\n        }\n      }\n    });\n  };\n\n  private normDelimiterChar(delimiter: string) {\n    switch (delimiter) {\n      case \"\\\\t\":\n        return \"\\t\";\n      case \"\\\\n\":\n        return \"\\n\";\n      default:\n        return delimiter;\n    }\n  }\n}\n\nfunction db2props(state: DB) {\n  return {\n    resources: state.resources,\n    app: state.app,\n    datasets: state.datasets\n  };\n}\n\nexport default Form.create<PublicProps>({})(\n  connect(db2props)(injectStyles(styles)(UpsertResourceForm))\n);\n","import * as constants from \"../constants\";\nimport { ResourceRecord, DB } from \"../types\";\nimport {\n  DataSlice,\n  PortionOfData,\n  Dimension,\n  RangeDimension,\n  DiscontinuousArrayPortionOfData,\n  HashMapPortionOfData\n} from \"src/models/data\";\nimport { DReprAction } from \".\";\nimport { Dispatch } from \"redux\";\nimport { Resource, data as DataModel } from \"src/models\";\n\nexport interface ResourceUpsert {\n  type: constants.RESOURCE_UPSERT;\n  resourceID: string;\n  resource: ResourceRecord;\n}\n\nexport interface ResourceUpdateData {\n  type: constants.RESOURCE_UPDATE_DATA;\n  resourceID: string;\n  pod: PortionOfData;\n}\n\nexport interface ResourceDelete {\n  type: constants.RESOURCE_DELETE;\n  resourceId: string;\n}\n\nexport function resourceCreate(\n  resourceId: string,\n  resourceType: string,\n  resourceLoc: { isFile: boolean; value: string },\n  extra: object\n): any {\n  return (dispatch: Dispatch<DReprAction>, getState: () => DB) => {\n    const db = getState();\n    const formData = new FormData();\n\n    formData.set(\"resource_id\", resourceId);\n    formData.set(\"resource_type\", resourceType);\n\n    if (resourceLoc.isFile) {\n      formData.set(\"resource_file\", resourceLoc.value);\n    } else {\n      formData.set(\"resource_url\", resourceLoc.value);\n    }\n    formData.set(\"extra\", JSON.stringify(extra));\n\n    return db.app\n      .post(`/datasets/${db.datasets.activeDataset}/resources`, formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      })\n      .then((resp: any) => {\n        const resource = resp.data.resource;\n        const dimensions = Dimension.deserialize(resource.dimension);\n        const pod =\n          dimensions instanceof RangeDimension\n            ? new DiscontinuousArrayPortionOfData([])\n            : new HashMapPortionOfData();\n\n        const record = new ResourceRecord(\n          new Resource(resource.id, resource.type),\n          new DataModel.NDimData(resource.id, dimensions, pod)\n        );\n\n        return dispatch({\n          type: constants.RESOURCE_UPSERT,\n          resourceID: resourceId,\n          resource: record\n        });\n      });\n  };\n}\n\nexport function resourceDelete(resourceId: string): any {\n  return (dispatch: Dispatch<DReprAction>, getState: () => DB) => {\n    const db = getState();\n    return db.app\n      .delete(`/datasets/${db.datasets.activeDataset}/resources/${resourceId}`)\n      .then((resp: any) => {\n        dispatch({\n          type: constants.RESOURCE_DELETE,\n          resourceId\n        });\n      });\n  };\n}\n\nfunction resourceUpdateData(\n  resourceID: string,\n  pod: PortionOfData\n): ResourceUpdateData {\n  return {\n    type: constants.RESOURCE_UPDATE_DATA,\n    resourceID,\n    pod\n  };\n}\n\nexport function resourceFetchData(resourceID: string, dslice: DataSlice): any {\n  return (dispatch: Dispatch<DReprAction>, getState: () => DB) => {\n    const db = getState();\n    return db.app\n      .get(`/datasets/${db.datasets.activeDataset}/resources/${resourceID}`, {\n        params: { slices: dslice.serialize() }\n      })\n      .then((resp: any) => {\n        const state = getState();\n        const data = state.resources[resourceID].data;\n        const dataSlice = DataSlice.deserialize(resp.data.slice);\n        let action;\n\n        if (data.pod.portionSize() === 0) {\n          action = resourceUpdateData(\n            resourceID,\n            PortionOfData.fromSlices(dslice, data.dimension, resp.data.data)\n          );\n        } else {\n          action = resourceUpdateData(\n            resourceID,\n            data.pod.addData(dslice, data.dimension, resp.data.data)\n          );\n        }\n        dispatch(action);\n\n        return dataSlice;\n      });\n  };\n}\n","import * as constants from \"../constants\";\nimport { Dispatch } from \"redux\";\nimport { DReprAction } from \".\";\nimport { Node } from \"src/models\";\nimport * as _ from \"lodash\";\nimport { DB } from \"../types\";\nimport axios from \"axios\";\nimport { ClassId } from \"src/models\";\n\nexport interface SemanticModelAddDataNode {\n  type: constants.SM_ADD_DATA_NODE;\n  dnode: Node;\n}\n\nexport interface SemanticModelAddEdge {\n  type: constants.SM_ADD_EDGE;\n  sourceId: ClassId;\n  targetId: ClassId | string;\n  predicate: string;\n}\n\nexport interface SemanticModelRemoveNode {\n  type: constants.SM_REMOVE_NODE;\n  nodeId: string;\n}\n\nexport interface SemanticModelRemoveEdge {\n  type: constants.SM_REMOVE_EDGE;\n  edgeId: string;\n}\n\nexport interface SemanticModelUpdateEdge {\n  type: constants.SM_UPDATE_EDGE;\n  edgeId: string;\n  sourceId: ClassId;\n  targetId: ClassId | string;\n  predicate: string;\n}\n\nexport function smAddDataNode(dnode: Node): SemanticModelAddDataNode {\n  if (dnode.isClassNode()) {\n    throw new Error(\"Cannot add ClassNode using AddDataNode function\");\n  }\n\n  return {\n    type: constants.SM_ADD_DATA_NODE,\n    dnode\n  };\n}\n\nexport function smAddEdge(\n  sourceId: ClassId,\n  predicate: string,\n  targetId: ClassId | string\n): SemanticModelAddEdge {\n  return {\n    type: constants.SM_ADD_EDGE,\n    sourceId,\n    targetId,\n    predicate\n  };\n}\n\nexport function smRemoveNode(nodeId: string): SemanticModelRemoveNode {\n  return { type: constants.SM_REMOVE_NODE, nodeId };\n}\n\nexport function smRemoveEdge(edgeId: string): SemanticModelRemoveEdge {\n  return { type: constants.SM_REMOVE_EDGE, edgeId };\n}\n\nexport function smUpdateEdge(\n  edgeId: string,\n  sourceId: ClassId,\n  predicate: string,\n  targetId: ClassId | string\n) {\n  return {\n    type: constants.SM_UPDATE_EDGE,\n    edgeId,\n    sourceId,\n    targetId,\n    predicate\n  };\n}\n","import * as React from \"react\";\nimport { Index, UnitOfData } from \"../../../models/data\";\nimport { WithStyles, injectStyles } from \"src/misc/JssInjection\";\nimport { CellViewPortPosition } from \"./CellViewportPosition\";\nimport { Icon } from \"antd\";\nimport * as _ from \"lodash\";\n\nconst styles = {\n  controlPanel: {\n    float: \"right\" as \"right\"\n  },\n  root: {\n    margin: -16,\n    padding: 16,\n    position: \"relative\" as \"relative\",\n    \"& > div\": {\n      display: \"none\"\n    },\n    \"&:hover\": {\n      \"& > div\": {\n        display: \"inherit\"\n      }\n    }\n  },\n  default: {},\n  disable: {},\n  selected: {\n    backgroundColor: \"#4caf50 !important\",\n    // boxShadow: \"0px 4px 5px -2px rgba(0, 0, 0, 0.2)\",\n    border: \"1px solid #45a248 !important\",\n    borderTop: \"1px solid #45a248 !important\",\n    borderLeft: \"1px solid #45a248 !important\"\n  },\n  rborderBtn: {\n    cursor: \"pointer\",\n    position: \"absolute\" as \"absolute\",\n    top: 0,\n    right: 0,\n    backgroundColor: \"#ebebeb\",\n    height: \"100%\",\n    paddingTop: 16,\n    paddingLeft: 4,\n    paddingRight: 2,\n    boxShadow: \"0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24)\"\n  },\n  lborderBtn: {\n    cursor: \"pointer\",\n    position: \"absolute\" as \"absolute\",\n    top: 0,\n    left: 0,\n    backgroundColor: \"#ebebeb\",\n    height: \"100%\",\n    paddingTop: 16,\n    paddingLeft: 2,\n    paddingRight: 4,\n    boxShadow: \"0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24)\",\n    \"& > i\": {\n      transform: \"rotate(180deg)\"\n    }\n  },\n  tborderBtn: {\n    position: \"absolute\" as \"absolute\",\n    width: \"100%\",\n    top: -25,\n    left: 0,\n    paddingBottom: 10,\n    \"& > div\": {\n      cursor: \"pointer\",\n      textAlign: \"center\" as \"center\",\n      backgroundColor: \"#ebebeb\",\n      boxShadow: \"0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24)\",\n      \"& > i\": {\n        transform: \"rotate(-90deg)\"\n      }\n    }\n  },\n  bborderBtn: {\n    position: \"absolute\" as \"absolute\",\n    width: \"100%\",\n    bottom: -25,\n    left: 0,\n    paddingTop: 10,\n    zIndex: 3,\n    \"& > div\": {\n      cursor: \"pointer\",\n      textAlign: \"center\" as \"center\",\n      backgroundColor: \"#ebebeb\",\n      boxShadow: \"0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24)\",\n      \"& > i\": {\n        transform: \"rotate(90deg)\"\n      }\n    }\n  },\n  cornerBtn: {\n    cursor: \"pointer\",\n    width: 20,\n    backgroundColor: \"#ebebeb\",\n    boxShadow: \"0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24)\",\n    display: \"block\" as \"block\",\n    textAlign: \"center\" as \"center\"\n  },\n  rcornerBtn: {\n    \"& > div\": {\n      marginRight: 23\n    },\n    \"& > b\": {\n      // corner Btn\n      float: \"right\" as \"right\"\n    }\n  },\n  lcornerBtn: {\n    \"& > div\": {\n      marginLeft: 23\n    },\n    \"& > b\": {\n      // corner Btn\n      float: \"left\" as \"left\"\n    }\n  }\n};\n\ntype RBorderType = \"top\" | \"bottom\";\ntype CBorderType = \"right\" | \"left\";\ntype BorderType = RBorderType | CBorderType;\ntype CellStatus = \"defalt\" | \"selected\";\nconst defaultProps = {\n  status: \"default\" as CellStatus\n};\n\ninterface Props\n  extends WithStyles<typeof styles>,\n    Readonly<typeof defaultProps> {\n  status: CellStatus;\n  style?: any;\n  onCellClick: (indice: Index[]) => void;\n  className?: string;\n  enableSelection: boolean;\n  // the position of the two unbounded dimensions in the index of the unit of data\n  // use this so that we can select toward the end, dim0 always row and dim1 always column\n  unboundedDim0SliceIdx: number;\n  unboundedDim1SliceIdx: number;\n  value: UnitOfData;\n  vp: CellViewPortPosition;\n}\n\nconst borderBtnClasses = {\n  top: \"tborderBtn\",\n  right: \"rborderBtn\",\n  bottom: \"bborderBtn\",\n  left: \"lborderBtn\"\n};\nconst cornerBtnClasses = { right: \"rcornerBtn\", left: \"lcornerBtn\" };\n\nclass DataCell extends React.Component<Props, object> {\n  public static defaultProps = defaultProps;\n\n  public render() {\n    const hasHiddenContent =\n      this.props.enableSelection && this.props.vp.isInBorder();\n    const select2all = [];\n    if (hasHiddenContent) {\n      const nBorder =\n        (this.props.vp.isInRightBorder() ? 1 : 0) +\n        (this.props.vp.isInLeftBorder() ? 1 : 0) +\n        (this.props.vp.isInTopBorder() ? 1 : 0) +\n        (this.props.vp.isInBottomBorder() ? 1 : 0);\n\n      if (nBorder > 1) {\n        /* do nothing */\n        const cborder: CBorderType = this.props.vp.isInRightBorder()\n          ? \"right\"\n          : \"left\";\n\n        select2all.push(\n          <div\n            className={this.props.classes[borderBtnClasses[cborder]]}\n            key={cborder}\n            onClick={this.onBorderClick(cborder)}\n          >\n            <Icon type=\"double-right\" />\n          </div>\n        );\n\n        const rborder: RBorderType = this.props.vp.isInBottomBorder()\n          ? \"bottom\"\n          : \"top\";\n        select2all.push(\n          <div\n            key={rborder}\n            className={\n              this.props.classes[cornerBtnClasses[cborder]] +\n              \" \" +\n              this.props.classes[borderBtnClasses[rborder]]\n            }\n          >\n            <b\n              className={this.props.classes.cornerBtn}\n              onClick={this.onCornerClick(rborder, cborder)}\n            >\n              &#x233E;\n            </b>\n            <div onClick={this.onBorderClick(rborder)}>\n              <Icon type=\"double-right\" />\n            </div>\n          </div>\n        );\n      } else {\n        const border: BorderType = this.props.vp.isInRightBorder()\n          ? \"right\"\n          : this.props.vp.isInLeftBorder()\n          ? \"left\"\n          : this.props.vp.isInTopBorder()\n          ? \"top\"\n          : \"bottom\";\n\n        if (border === \"top\" || border === \"bottom\") {\n          select2all.push(\n            <div\n              className={this.props.classes[borderBtnClasses[border]]}\n              key={border}\n            >\n              <div onClick={this.onBorderClick(border)}>\n                <Icon type=\"double-right\" />\n              </div>\n            </div>\n          );\n        } else {\n          select2all.push(\n            <div\n              className={this.props.classes[borderBtnClasses[border]]}\n              key={border}\n              onClick={this.onBorderClick(border)}\n            >\n              <Icon type=\"double-right\" />\n            </div>\n          );\n        }\n      }\n    }\n\n    return (\n      <td\n        onClick={this.onClick}\n        className={\n          this.props.classes.root +\n          \" \" +\n          this.props.classes[this.props.status] +\n          \" \" +\n          this.props.className\n        }\n        style={this.props.style}\n      >\n        {this.props.children}\n        {select2all}\n      </td>\n    );\n  }\n\n  private onBorderClick = (border: BorderType) => {\n    const [dimSliceIdx, index] = this.getDimSliceIdxAndIndex(border);\n\n    return (e: any) => {\n      e.stopPropagation();\n      const indice = this.props.value.indice.slice();\n      indice[dimSliceIdx] = index;\n      this.props.onCellClick(indice);\n    };\n  };\n\n  private onCornerClick = (rborder: RBorderType, cborder: CBorderType) => {\n    const [dimSliceIdx0, index0] = this.getDimSliceIdxAndIndex(rborder);\n    const [dimSliceIdx1, index1] = this.getDimSliceIdxAndIndex(cborder);\n\n    return (e: any) => {\n      e.stopPropagation();\n      const indice = this.props.value.indice.slice();\n      indice[dimSliceIdx0] = index0;\n      indice[dimSliceIdx1] = index1;\n      this.props.onCellClick(indice);\n    };\n  };\n\n  private onClick = () => {\n    this.props.onCellClick(this.props.value.indice);\n  };\n\n  private getDimSliceIdxAndIndex(border: BorderType) {\n    switch (border) {\n      case \"right\": {\n        return [this.props.unboundedDim1SliceIdx, Infinity];\n      }\n      case \"left\": {\n        return [this.props.unboundedDim1SliceIdx, 0];\n      }\n      case \"top\": {\n        return [this.props.unboundedDim0SliceIdx, 0];\n      }\n      case \"bottom\": {\n        return [this.props.unboundedDim0SliceIdx, Infinity];\n      }\n    }\n  }\n}\n\nexport default injectStyles(styles)(DataCell);\n","export class CellViewPortPosition {\n  // (row, col) index in the viewport. E.g: (0, 0): top-left, (0, y > 0) mean top-right\n  public vpIndex: [number, number];\n  // size of the viewport (|rows|, |cols|)\n  public vpSize: [number, number];\n\n  constructor(vpIndex: [number, number], vpSize: [number, number]) {\n    this.vpIndex = vpIndex;\n    this.vpSize = vpSize;\n  }\n\n  // true means a cell is in the border line, otherwise it is inside\n  public isInBorder(): boolean {\n    return (\n      this.vpIndex[0] === 0 ||\n      this.vpIndex[1] === 0 ||\n      this.vpIndex[0] === this.vpSize[0] - 1 ||\n      this.vpIndex[1] === this.vpSize[1] - 1\n    );\n  }\n\n  public isInRightBorder(): boolean {\n    return this.vpIndex[1] === this.vpSize[1] - 1;\n  }\n\n  public isInLeftBorder(): boolean {\n    return this.vpIndex[1] === 0;\n  }\n\n  public isInTopBorder(): boolean {\n    return this.vpIndex[0] === 0;\n  }\n\n  public isInBottomBorder(): boolean {\n    return this.vpIndex[0] === this.vpSize[0] - 1;\n  }\n}\n","import {\n  DataSlice,\n  Index,\n  DataSliceIndex,\n  ContinuousRangeDataSlice,\n  PortionOfData,\n  NDimData,\n  RangeDimension,\n  DimensionIndex\n} from \"src/models/data\";\nimport { Slice, SLICE_UNSET, IndexSlice, RangeSlice } from \"src/models\";\nimport * as _ from \"lodash\";\n\ninterface UnboundDim {\n  dsliceId: string;\n  sliceIdx: number;\n  dimId: string;\n}\n\nexport class DataView2D {\n  public static fromData(resourceId: string, data: NDimData) {\n    const dslice = DataSlice.fromDimension(resourceId, data.dimension);\n\n    const slices = [];\n    const unboundDims: UnboundDim[] = [];\n    // by support only 2 unbound dimensions, we ensure that slices is a sequence\n    for (const [sptr, dptr] of dslice.iterDim(data.dimension)) {\n      if (sptr instanceof ContinuousRangeDataSlice) {\n        unboundDims.push({\n          dsliceId: sptr.id,\n          sliceIdx: slices.length,\n          dimId: dptr.id\n        });\n        slices.push(\n          dptr instanceof RangeDimension\n            ? RangeSlice.default()\n            : IndexSlice.default()\n        );\n      } else {\n        slices.push(new IndexSlice(sptr.toIndex()));\n      }\n    }\n\n    if (unboundDims.length !== 2) {\n      throw Error(\"Can only create slices for 2D unbound dimensions\");\n    }\n\n    return new DataView2D(\n      data,\n      dslice,\n      unboundDims as [UnboundDim, UnboundDim],\n      slices\n    );\n  }\n\n  public readonly data: NDimData;\n  public readonly unboundDims: [UnboundDim, UnboundDim];\n  public readonly selectedSlices: Slice[];\n  public readonly dslice: DataSlice;\n  private dataDimIndex: DimensionIndex;\n\n  constructor(\n    data: NDimData,\n    dslice: DataSlice,\n    unboundDims: [UnboundDim, UnboundDim],\n    selectedSlices: Slice[]\n  ) {\n    this.data = data;\n    this.dslice = dslice;\n    this.unboundDims = unboundDims;\n    this.selectedSlices = selectedSlices;\n    this.dataDimIndex = new DimensionIndex(data.dimension);\n  }\n\n  // number of element in first dimension\n  public getNRows(): number | undefined {\n    const stopDSlice = this.unboundDims[0].dsliceId;\n    let dptr = this.data.pod;\n\n    for (const [sptr, dimptr] of this.dslice.iterDim(this.data.dimension)) {\n      if (sptr.id === stopDSlice) {\n        if (dimptr.size() === undefined) {\n          // we cannot determine the size of the unbound dimension because it depends on previous dimension\n          // we have to rely on the fetched data\n          if (dptr.hasAllUpperIndices) {\n            return dptr.portionSize();\n          }\n\n          // we actually don't know the number of page, but Infinity doesn't work with AntDTable, so we are going\n          // to return undefined\n          return undefined;\n        } else {\n          return dimptr.size() as number;\n        }\n      } else {\n        dptr = dptr.get(sptr.toIndex()) as PortionOfData;\n      }\n    }\n\n    throw new Error(\n      \"Congrat! You found a bug in which we are trying to determine the number of rows. Please report it\"\n    );\n  }\n\n  // change the displaying elements in first dimension\n  public getRowsView(startRowIdx: number, endRowIdx: number): DataSlice {\n    // TODO: fix me! to change a data slice, it actually require knowledge about the data\n    // because every row can have different types\n    const dslice = this.dslice.clone();\n    const s = DataSliceIndex.getWithoutIndex(\n      dslice,\n      this.unboundDims[0].dsliceId\n    );\n\n    if (s instanceof ContinuousRangeDataSlice) {\n      // stupid code\n      if (s.range.length !== 2) {\n        throw new Error(\"NotImplementedYet\");\n      }\n      s.range = [startRowIdx, endRowIdx];\n    } else {\n      throw new Error(\"Doesn't know how to navigate pages in index page yet\");\n    }\n\n    return dslice;\n  }\n\n  // iterate through values in unbound dimension ${idx}\n  public iterUnboundDimensionValues(idx: number) {\n    return DataSliceIndex.getWithoutIndex(\n      this.dslice,\n      this.unboundDims[idx].dsliceId\n    ).iterKeys(this.data.pod);\n  }\n\n  // clear all selection in this data view\n  public removeSelectedSlices(): DataView2D {\n    const selectedSlices = _.map(this.selectedSlices, s => s.clone());\n    clearSelectedSlicesMut(selectedSlices, this.unboundDims);\n    return new DataView2D(\n      this.data,\n      this.dslice,\n      this.unboundDims,\n      selectedSlices\n    );\n  }\n\n  // test if a cell in an unbounded region is selected\n  public isSelected(ridx: Index, cidx: Index): boolean {\n    if (this.isNoSelection()) {\n      return false;\n    }\n\n    const rs = this.selectedSlices[this.unboundDims[0].sliceIdx];\n    if (rs instanceof RangeSlice) {\n      if (!rs.isSelected(ridx as number)) {\n        return false;\n      }\n    } else {\n      if (rs.index !== ridx) {\n        return false;\n      }\n    }\n\n    const cs = this.selectedSlices[this.unboundDims[1].sliceIdx];\n    if (cs instanceof RangeSlice) {\n      if (!cs.isSelected(cidx as number)) {\n        return false;\n      }\n    } else {\n      if (cs.index !== cidx) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  // user click on a cell in an unbound region return a new selected slices\n  public click(indice: Index[]): Slice[] {\n    const selectedSlices = _.map(this.selectedSlices, s => s.clone());\n    const ridx = indice[this.unboundDims[0].sliceIdx];\n    const cidx = indice[this.unboundDims[1].sliceIdx];\n\n    let rs = selectedSlices[this.unboundDims[0].sliceIdx];\n    let cs = selectedSlices[this.unboundDims[1].sliceIdx];\n\n    if (this.isNoSelection()) {\n      // select first cell\n      if (ridx === Infinity || cidx === Infinity) {\n        // cannot select infinity\n        return selectedSlices;\n      }\n\n      if (rs instanceof RangeSlice) {\n        rs.start = ridx as number;\n        rs.end = rs.start + 1;\n      } else {\n        rs.index = ridx;\n      }\n\n      if (cs instanceof RangeSlice) {\n        cs.start = cidx as number;\n        cs.end = cs.start + 1;\n      } else {\n        cs.index = cidx;\n      }\n\n      return selectedSlices;\n    }\n\n    if (this.isOneCellSelected()) {\n      // select a range cell\n      let clickOnSameCell = true;\n\n      if (rs instanceof RangeSlice) {\n        if ((ridx as number) < rs.start) {\n          rs.end = rs.start + 1;\n          rs.start = ridx as number;\n        } else {\n          if (ridx === Infinity) {\n            rs.end = Infinity;\n          } else {\n            rs.end = (ridx as number) + 1;\n          }\n        }\n\n        if (!rs.isSelectOne()) {\n          clickOnSameCell = false;\n        }\n      } else {\n        if (ridx !== rs.index) {\n          clickOnSameCell = false;\n        }\n\n        // convert IndexSlice into RangeSlice. TODO: check if we can actually do that based on the dimension\n        if (\n          this.dataDimIndex.get(this.unboundDims[0].dimId) instanceof\n          RangeDimension\n        ) {\n          rs = new RangeSlice(rs.index as number, (ridx as number) + 1, 1);\n          selectedSlices[this.unboundDims[0].sliceIdx] = rs;\n        } else {\n          rs.index = ridx;\n        }\n      }\n\n      if (cs instanceof RangeSlice) {\n        if ((cidx as number) < cs.start) {\n          cs.end = cs.start + 1;\n          cs.start = cidx as number;\n        } else {\n          if (cidx === Infinity) {\n            cs.end = Infinity;\n          } else {\n            cs.end = (cidx as number) + 1;\n          }\n        }\n\n        if (!cs.isSelectOne()) {\n          clickOnSameCell = false;\n        }\n      } else {\n        if (cidx !== cs.index) {\n          clickOnSameCell = false;\n        }\n\n        if (\n          this.dataDimIndex.get(this.unboundDims[1].dimId) instanceof\n          RangeDimension\n        ) {\n          cs = new RangeSlice(cs.index as number, (cidx as number) + 1, 1);\n          selectedSlices[this.unboundDims[1].sliceIdx] = cs;\n        } else {\n          cs.index = cidx;\n        }\n      }\n\n      if (clickOnSameCell) {\n        clearSelectedSlicesMut(selectedSlices, this.unboundDims);\n      }\n\n      return selectedSlices;\n    }\n\n    clearSelectedSlicesMut(selectedSlices, this.unboundDims);\n    return selectedSlices;\n  }\n\n  // test if a user doesn't select anything in an unbounded region\n  private isNoSelection(): boolean {\n    const slice = this.selectedSlices[this.unboundDims[0].sliceIdx];\n    if (slice instanceof IndexSlice) {\n      return slice.index === SLICE_UNSET;\n    }\n    return slice.start === SLICE_UNSET;\n  }\n\n  // test if a user only click on one isOneCellSelected\n  private isOneCellSelected(): boolean {\n    if (this.isNoSelection()) {\n      return false;\n    }\n\n    return (\n      this.selectedSlices[this.unboundDims[0].sliceIdx].isSelectOne() &&\n      this.selectedSlices[this.unboundDims[1].sliceIdx].isSelectOne()\n    );\n  }\n}\n\nfunction clearSelectedSlicesMut(\n  slices: Slice[],\n  unboundDims: [UnboundDim, UnboundDim]\n): void {\n  for (const unboundDim of unboundDims) {\n    const s = slices[unboundDim.sliceIdx];\n    if (s instanceof RangeSlice) {\n      s.start = SLICE_UNSET;\n      s.end = SLICE_UNSET;\n    } else {\n      s.index = SLICE_UNSET;\n    }\n  }\n}\n","import * as React from \"react\";\n\nimport {\n  Index,\n  NDimData,\n  DataSlice,\n  ContinuousRangeDataSlice,\n  PortionOfData,\n  UnitOfData\n} from \"../../../models/data\";\nimport TblCell from \"./TblCell\";\nimport { Table } from \"antd\";\nimport { WithStyles, injectStyles } from \"src/misc/JssInjection\";\nimport { CellViewPortPosition } from \"./CellViewportPosition\";\nimport { DataView2D } from \"./DataView2D\";\nimport { Slice } from \"src/models\";\nimport * as _ from \"lodash\";\n\nconst styles = {\n  root: {\n    \"& ul.ant-pagination.ant-table-pagination\": {\n      float: \"left\" as \"left\",\n      marginLeft: 8\n    }\n  }\n};\n\nexport const defaultProps = {\n  onUpdateSelectedSlices: (dataview: DataView2D) => {\n    /* void */\n  },\n  enableSelection: false\n};\n\ninterface Props\n  extends WithStyles<typeof styles>,\n    Readonly<typeof defaultProps> {\n  // all data\n  data: NDimData;\n  dataview: DataView2D;\n  onUpdateDataSlices: (\n    dslice: DataSlice,\n    dataview: DataView2D\n  ) => Promise<void>;\n  enableSelection: boolean;\n}\n\ninterface State {\n  rowsPerPage: number;\n  page: number;\n}\n\nclass Matrix extends React.Component<Props, State> {\n  public static defaultProps = defaultProps;\n  public state: State = {\n    rowsPerPage: 10,\n    page: 0\n  };\n\n  public render() {\n    const [dataSource, columns] = this.getAntDTableByDataView(\n      this.props.enableSelection,\n      this.props.dataview\n    );\n    const pagination = this.getAntDPagination(\n      this.state.page,\n      this.state.rowsPerPage\n    );\n\n    return (\n      <div data-testid=\"data-matrix\">\n        <Table\n          className={this.props.classes.root}\n          dataSource={dataSource}\n          columns={columns}\n          showHeader={false}\n          bordered={true}\n          rowKey=\"id\"\n          pagination={pagination}\n          components={{ body: { cell: TblCell } }}\n        />\n      </div>\n    );\n  }\n\n  // compute the sliced data for antd table\n  private getAntDTableByDataView(\n    enableSelection: boolean,\n    dataview: DataView2D\n  ) {\n    const dataSource = [];\n    const columns: any = [];\n    const unboundedDim0SliceIdx = dataview.unboundDims[0].sliceIdx;\n    const unboundedDim1SliceIdx = dataview.unboundDims[1].sliceIdx;\n\n    // TODO: fix me! this is not a general solution, as different part of a data view\n    // may have different structures\n    const cellIndex = [];\n    for (const [sptr, d] of dataview.dslice.iterDFS()) {\n      if (sptr instanceof ContinuousRangeDataSlice) {\n        cellIndex.push(-1);\n      } else {\n        cellIndex.push(sptr.toIndex());\n      }\n    }\n\n    const dim1Values = Array.from(dataview.iterUnboundDimensionValues(1));\n    for (const rowIdx of dataview.iterUnboundDimensionValues(0)) {\n      const row = [];\n      for (const colIdx of dim1Values) {\n        cellIndex[unboundedDim0SliceIdx] = rowIdx;\n        cellIndex[unboundedDim1SliceIdx] = colIdx;\n        const cell = this.props.data.pod.getData(cellIndex);\n\n        let status: \"default\" | \"selected\" = \"default\" as \"default\";\n        if (enableSelection && dataview.isSelected(rowIdx, colIdx)) {\n          status = \"selected\" as \"selected\";\n        }\n\n        row.push({ cell, status });\n      }\n\n      dataSource.push({\n        id: rowIdx,\n        row\n      });\n    }\n\n    let i = 0;\n    const vp: [number, number] = [dataSource.length, dataSource[0].row.length];\n\n    for (const colIdx of dim1Values) {\n      columns.push({\n        dataIndex: `row.${i}.cell.value`,\n        onCell: ((cidx: number) => (row: any, ridx: number) => {\n          return {\n            enableSelection,\n            unboundedDim0SliceIdx,\n            unboundedDim1SliceIdx,\n            value: row.row[cidx].cell,\n            status: row.row[cidx].status,\n            onCellClick: this.onCellClick,\n            vp: new CellViewPortPosition([ridx, cidx], vp)\n          };\n        })(i)\n      });\n\n      i++;\n    }\n\n    return [dataSource, columns];\n  }\n\n  // compute the pagination for antd table\n  private getAntDPagination(page: number, rowsPerPage: number): object {\n    const nPage = this.props.dataview.getNRows();\n\n    return {\n      onChange: this.handleChangePage,\n      onShowSizeChange: this.handleChangeRowsPerPage,\n      total: nPage || 1e6, // using a big number for unknown total items\n      showQuickJumper: true,\n      showSizeChanger: true,\n      current: page + 1,\n      pageSize: rowsPerPage,\n      showTotal: this.getNPageString\n    };\n  }\n\n  // handle when a user click on a cell\n  private onCellClick = (indice: Index[]) => {\n    const slices = this.props.dataview.click(indice);\n    this.props.onUpdateSelectedSlices(\n      new DataView2D(\n        this.props.dataview.data,\n        this.props.dataview.dslice,\n        this.props.dataview.unboundDims,\n        slices\n      )\n    );\n  };\n\n  // handle when a user change to a page\n  private handleChangePage = (page: number, pageSize: number) => {\n    // from antd so the index start from 1, so we have to deduct it to convert back to our page index\n    page -= 1;\n    const dslice = this.props.dataview.getRowsView(\n      page * pageSize,\n      (page + 1) * pageSize\n    );\n\n    this.props\n      .onUpdateDataSlices(\n        dslice,\n        new DataView2D(\n          this.props.dataview.data,\n          dslice,\n          this.props.dataview.unboundDims,\n          this.props.dataview.selectedSlices\n        )\n      )\n      .then(() => {\n        this.setState({ page, rowsPerPage: pageSize });\n      });\n  };\n\n  // handle when a user change number of rows per page\n  private handleChangeRowsPerPage = (\n    currentPageSize: number,\n    newPageSize: number\n  ) => {\n    const dslice = this.props.dataview.getRowsView(\n      this.state.page * newPageSize,\n      (this.state.page + 1) * newPageSize\n    );\n    this.props\n      .onUpdateDataSlices(\n        dslice,\n        new DataView2D(\n          this.props.dataview.data,\n          dslice,\n          this.props.dataview.unboundDims,\n          this.props.dataview.selectedSlices\n        )\n      )\n      .then(() => {\n        this.setState({ rowsPerPage: newPageSize });\n      });\n  };\n\n  // show a readable string of number of items in the matrix\n  private getNPageString(nPage: number | undefined) {\n    return nPage === undefined\n      ? \"Unknown number of items\"\n      : `Total ${nPage} items`;\n  }\n}\n\nexport default injectStyles(styles)(Matrix);\n","import * as React from \"react\";\nimport { Resource } from \"src/models\";\nimport { WithStyles, injectStyles } from \"src/misc/JssInjection\";\nimport { Row, Col, Icon, Modal } from \"antd\";\n\nconst styles = {\n  root: {\n    marginTop: -20,\n    marginBottom: 20,\n    padding: \"0 8px\",\n    \"& > .ant-col-20\": {\n      fontWeight: 500\n    },\n    \"& > div:last-child\": {\n      textAlign: \"right\" as \"right\"\n    }\n  }\n};\n\ninterface Props extends WithStyles<typeof styles> {\n  resource: Resource;\n  onDeleteResource: (resourceId: string) => void;\n}\n\nclass ResourcePanelHeader extends React.Component<Props, object> {\n  public render() {\n    return (\n      <Row\n        className={this.props.classes.root}\n        data-testid=\"resource-panel-header\"\n        data-testvalue={this.props.resource.resourceId}\n      >\n        <Col span={20}>\n          {this.props.resource.resourceId.toUpperCase()} (\n          {this.props.resource.resourceType.toUpperCase()})\n        </Col>\n        <Col span={4}>\n          {/* <Icon\n            type=\"close-circle\"\n            theme=\"filled\"\n            onClick={this.onDeleteResource}\n            data-testid=\"resource-panel-header-close-button\"\n          /> */}\n        </Col>\n      </Row>\n    );\n  }\n\n  private onDeleteResource = () => {\n    Modal.confirm({\n      title: \"Are you sure you want to delete this resource?\",\n      okText: \"Yes\",\n      okType: \"danger\",\n      cancelText: \"No\",\n      onOk: () => {\n        this.props.onDeleteResource(this.props.resource.resourceId);\n      }\n    });\n  };\n}\n\nexport default injectStyles(styles)(ResourcePanelHeader);\n","import { Slice } from \"src/models\";\n\nexport interface ResourceComponentProps {\n  // fire when selected slices was modified inside the resource component\n  onUpdateSelectedSlices: (resourceId: string, newRegion: Slice[]) => void;\n  onHideResourcePanel: (resourceId: string) => void;\n  onDeleteResource: (resourceId: string) => void;\n}\n\nexport interface ResourceComponent {\n  // wait until the resource has finish its initialization\n  waitForInit: () => Promise<void>;\n  // enable user to select a region in a resource\n  enableSelection: () => Promise<void>;\n  // not allow user to select a region in a resource\n  disableSelection: () => Promise<void>;\n  // set selected region in a resource, note that onUpdateSelectedSlices won't be fired\n  // when this method is invoked\n  setSelectedSlices: (region: Slice[]) => Promise<void>;\n}\n\nexport const defaultResourceComponentProps = {\n  onUpdateSelectedSlices: (resourceId: string, newRegion: Slice[]) => {\n    /* do nothing */\n  },\n  onHideResourcePanel: (resourceId: string) => {\n    /* do nothing */\n  },\n  onDeleteResource: (resourceId: string) => {\n    /* do nothing */\n  }\n};\n","import * as React from \"react\";\nimport { data as mdata, Slice } from \"../../../models\";\nimport Matrix, { defaultProps as MatrixDefaultProps } from \"../../misc/matrix\";\nimport { DataSlice, ContinuousRangeDataSlice } from \"../../../models/data\";\nimport { PortionOfData } from \"../../../models/data/PortionOfData\";\nimport { ResourceRecord } from \"src/store/types\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { resourceFetchData } from \"src/store/actions/resource\";\nimport { Card, Icon, Row } from \"antd\";\nimport { WithStyles, injectStyles } from \"src/misc/JssInjection\";\nimport ResourcePanelHeader from \"../ResourcePanelHeader\";\nimport {\n  ResourceComponentProps,\n  defaultResourceComponentProps,\n  ResourceComponent\n} from \"./interface\";\nimport { DataView2D } from \"src/components/misc/matrix/DataView2D\";\nimport { rejects } from \"assert\";\nimport { poll } from \"src/misc/Polling\";\n\nconst styles = {\n  root: {\n    \"& > div.ant-card-body\": {\n      paddingLeft: 0,\n      paddingRight: 0\n    }\n  },\n  panelContent: {\n    // padding: \"0px !important\",\n    margin: \"-1px\"\n  }\n};\n\ninterface Props extends WithStyles<typeof styles>, ResourceComponentProps {\n  dispatch: Dispatch;\n  resource: ResourceRecord;\n}\n\ninterface State {\n  dataview: DataView2D | null;\n  enableSelection: boolean;\n}\n\nfunction getDefaultDataView(resourceId: string, d: mdata.NDimData) {\n  if (d.pod.portionSize() === 0) {\n    return null;\n  }\n  return DataView2D.fromData(resourceId, d);\n}\n\n/* Lifecycle:\n *   1. Initialize with a resource\n *   2. The resource doesn't have any data, then we go and fetch data from server\n *   3. The resource change its data, so that property change, and state needs to\n *      react with the change only if its dataview = null (getDerivedStateFromProps)\n */\nexport class CSVResourcePanel extends React.Component<Props, State>\n  implements ResourceComponent {\n  // this component assume that an object data and resource, once created will never change\n  // it shape or type, therefore, we don't need to re-compute the shape\n  public static defaultProps = defaultResourceComponentProps;\n  public static getDerivedStateFromProps(props: Props, state: State) {\n    if (state.dataview === null) {\n      return {\n        dataview: getDefaultDataView(\n          props.resource.resource.resourceId,\n          props.resource.data\n        )\n      };\n    }\n    return null;\n  }\n\n  public constructor(props: Props) {\n    super(props);\n    this.state = {\n      dataview: getDefaultDataView(\n        props.resource.resource.resourceId,\n        props.resource.data\n      ),\n      enableSelection: false\n    };\n\n    if (this.state.dataview === null) {\n      // fetch initial data\n      this.props.dispatch(\n        resourceFetchData(\n          props.resource.resource.resourceId,\n          DataSlice.fromDimension(\n            props.resource.resource.resourceId,\n            props.resource.data.dimension\n          )\n        )\n      );\n    }\n  }\n\n  public waitForInit = async () => {\n    await poll(() => this.state.dataview !== null, 10000, 50);\n  };\n\n  public enableSelection = () => {\n    if (this.state.enableSelection) {\n      return Promise.resolve();\n    }\n\n    return new Promise<void>(resolve => {\n      this.setState({ enableSelection: true }, resolve);\n    });\n  };\n\n  public disableSelection = () => {\n    const dataview = this.state.dataview;\n    if (dataview !== null) {\n      return new Promise<void>((resolve, reject) => {\n        try {\n          this.setState(\n            {\n              enableSelection: false,\n              dataview: dataview.removeSelectedSlices()\n            },\n            resolve\n          );\n        } catch (error) {\n          reject(error);\n        }\n      });\n    } else {\n      return Promise.resolve();\n    }\n  };\n\n  public setSelectedSlices = (slices: Slice[]) => {\n    if (this.state.dataview === null || !this.state.enableSelection) {\n      return Promise.resolve();\n    }\n\n    const dataview = this.state.dataview;\n    return new Promise<void>((resolve, reject) => {\n      try {\n        if (dataview.dslice.isOverlappedWithSlices(slices)) {\n          // it is compatible, just need to update our selected slices\n          this.setState(\n            {\n              dataview: new DataView2D(\n                dataview.data,\n                dataview.dslice,\n                dataview.unboundDims,\n                slices\n              )\n            },\n            resolve\n          );\n        } else {\n          // it is not compatible, we need to generate different data slices and fetch new data to display it\n          // TODO: fix me! even though we have new data slice, it's not guarantee that this data slice and the previous unbounded dimension is compatible\n          const dslice = DataSlice.fromSlices(\n            this.props.resource.resource.resourceId,\n            this.props.resource.data.dimension,\n            slices\n          );\n          const unboundDims = dataview.unboundDims;\n\n          this.props\n            .dispatch(\n              resourceFetchData(this.props.resource.resource.resourceId, dslice)\n            )\n            .then(() => {\n              this.setState(\n                {\n                  dataview: new DataView2D(\n                    this.props.resource.data,\n                    dslice,\n                    unboundDims,\n                    slices\n                  )\n                },\n                resolve\n              );\n            })\n            .catch(() => {\n              reject();\n            });\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n  };\n\n  public render() {\n    if (this.state.dataview === null) {\n      // the data is not fetched\n      return (\n        <Card style={{ textAlign: \"center\" }}>\n          <Icon type=\"loading\" style={{ fontSize: 32 }} />\n        </Card>\n      );\n    }\n\n    return (\n      <Card\n        className={this.props.classes.root}\n        data-testid=\"resource-component\"\n        data-testvalue={this.props.resource.resource.resourceId}\n        style={{ overflowX: \"scroll\" }}\n      >\n        <ResourcePanelHeader\n          resource={this.props.resource.resource}\n          onDeleteResource={this.props.onDeleteResource}\n        />\n        <Row className={this.props.classes.panelContent}>\n          <Matrix\n            data={this.props.resource.data}\n            dataview={this.state.dataview}\n            enableSelection={this.state.enableSelection}\n            onUpdateSelectedSlices={this.onUpdateSelectedSlices}\n            onUpdateDataSlices={this.onUpdateDataSlices}\n          />\n        </Row>\n      </Card>\n    );\n  }\n\n  private onUpdateDataSlices = (dslice: DataSlice, dataview: DataView2D) => {\n    return this.props\n      .dispatch(\n        resourceFetchData(this.props.resource.resource.resourceId, dslice)\n      )\n      .then((ndslice: DataSlice) => {\n        this.setState({\n          dataview: new DataView2D(\n            dataview.data,\n            ndslice,\n            dataview.unboundDims,\n            dataview.selectedSlices\n          )\n        });\n      });\n  };\n\n  private onUpdateSelectedSlices = (dataview: DataView2D) => {\n    if (this.state.enableSelection && this.state.dataview) {\n      this.setState({ dataview });\n      this.props.onUpdateSelectedSlices(\n        this.props.resource.resource.resourceId,\n        dataview.selectedSlices\n      );\n    }\n  };\n}\n\nexport default connect()(injectStyles(styles)(CSVResourcePanel));\n","// wait until the fn return true, timeout and interval are in milliseconds\nexport function poll(\n  fn: () => boolean,\n  timeout: number,\n  interval: number\n): Promise<void> {\n  const endTime = Number(new Date()) + timeout;\n  const checkCondition = (resolve: any, reject: any) => {\n    if (fn()) {\n      // If the condition is met, we're done!\n      resolve(true);\n    } else if (Number(new Date()) < endTime) {\n      // If the condition isn't met but the timeout hasn't elapsed, go again\n      setTimeout(checkCondition, interval, resolve, reject);\n    } else {\n      // Didn't match and too much time, reject!\n      reject(new Error(\"timed out for \" + fn));\n    }\n  };\n\n  return new Promise(checkCondition);\n}\n","import * as React from \"react\";\nimport { WithStyles, injectStyles } from \"src/misc/JssInjection\";\nimport { ResourcesTbl, DB, UIConfiguration } from \"src/store/types\";\nimport { Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { Button, Card, Divider } from \"antd\";\nimport CSVResourcePanel from \"./components/CSVResource\";\nimport {\n  ResourceComponentProps,\n  defaultResourceComponentProps,\n  ResourceComponent\n} from \"./components/interface\";\nimport memoizeOne from \"memoize-one\";\nimport * as _ from \"lodash\";\nimport { resourceDelete } from \"src/store/actions/resource\";\nimport { Slice } from \"src/models\";\n\nconst styles = {\n  hideResourcePanels: {\n    \"& > div\": {\n      padding: \"8px !important\"\n    },\n    \"& button\": {\n      marginRight: 8\n    },\n    \"& .resource-list-header\": {\n      display: \"inline-block\",\n      minWidth: 80,\n      fontWeight: 600\n    },\n    \"& .ant-divider\": {\n      height: \"1.5em\"\n    },\n    marginBottom: 8\n  }\n};\n\ninterface Props extends WithStyles<typeof styles>, ResourceComponentProps {\n  resources: ResourcesTbl;\n  displayMax1Resource?: boolean;\n  uiConf: UIConfiguration;\n  dispatch: Dispatch;\n  displayingResources?: string[];\n  onDisplayingResourcesChange: (displayingResources: string[]) => void;\n}\n\ninterface State {\n  displayingResources: string[];\n}\n\nexport class ResourcePanels extends React.Component<Props, State> {\n  public static defaultProps = {\n    ...defaultResourceComponentProps,\n    displayMax1Resource: undefined,\n    onDisplayingResourcesChange: (displayingResources: string[]) => {\n      /* do nothing */\n    }\n  };\n\n  public state: State = {\n    displayingResources: this.props.displayingResources || []\n  };\n\n  private resourceComponents: {\n    [rid: string]: React.RefObject<ResourceComponent>;\n  } = {};\n  private postInit = memoizeOne((rs: ResourcesTbl) => this.postInit_(rs));\n\n  public waitForInit = async (resourceId: string) => {\n    if (this.resourceComponents[resourceId].current) {\n      await this.resourceComponents[resourceId].current!.waitForInit();\n    }\n  };\n\n  // enable selection on a specific resource\n  // the reason we are using this API is because if enableSection is a property of a component\n  // when the property change (enable => disable) we need to be able to detect the change\n  // so that we can clear information such as selected location (which is also another information\n  // that outside component can control), and it makes the logic is even more complicated\n  public enableSelection = async (resourceId: string) => {\n    if (this.resourceComponents[resourceId].current) {\n      return await this.resourceComponents[\n        resourceId\n      ].current!.enableSelection();\n    } else {\n      throw new Error(\n        \"Cannot enable selection on a unmounted resource. This could happened when the displaying resources are controlled outside, and this function is called immediately after updating state\"\n      );\n    }\n  };\n\n  // disable selection on a specific resource\n  public disableSelection = async (resourceId: string) => {\n    if (this.resourceComponents[resourceId].current) {\n      return await this.resourceComponents[\n        resourceId\n      ].current!.disableSelection();\n    }\n    // unmounted is fine, so we don't need to disable\n    return;\n  };\n\n  public setSelectedSlices = async (resourceId: string, slices: Slice[]) => {\n    if (this.resourceComponents[resourceId].current) {\n      return await this.resourceComponents[\n        resourceId\n      ].current!.setSelectedSlices(slices);\n    }\n    return;\n  };\n\n  // get currently open resource\n  public getOpenedResources = (): string[] => {\n    if (this.props.displayingResources) {\n      return this.props.displayingResources;\n    }\n    return this.state.displayingResources;\n  };\n\n  public render() {\n    this.postInit(this.props.resources);\n\n    const openResourcePanels = [];\n    const minimizedResourcePanels = [];\n    const displayingResources = new Set(\n      this.props.displayingResources || this.state.displayingResources\n    );\n\n    for (const resourceId in this.props.resources) {\n      const resource = this.props.resources[resourceId];\n      let btnType: \"primary\" | \"default\";\n      if (displayingResources.has(resourceId)) {\n        openResourcePanels.push(\n          <CSVResourcePanel\n            innerRef={this.resourceComponents[resourceId]}\n            key={resourceId}\n            resource={resource}\n            onHideResourcePanel={this.onHideResourcePanel(resourceId)}\n            onUpdateSelectedSlices={this.props.onUpdateSelectedSlices}\n            onDeleteResource={this.onDeleteResource}\n          />\n        );\n        btnType = \"primary\";\n      } else {\n        btnType = \"default\";\n      }\n\n      const btn = (\n        <Button\n          key={resourceId}\n          onClick={this.onHideResourcePanel(resourceId)}\n          type={btnType}\n          data-testid=\"resource-panels-minimized-resources\"\n          data-testvalue={resourceId}\n        >\n          {resourceId}\n        </Button>\n      );\n      minimizedResourcePanels.push(btn);\n    }\n\n    return (\n      <React.Fragment>\n        <Card className={this.props.classes.hideResourcePanels}>\n          <div className=\"resource-list-header\">Resources</div>\n          <Divider type=\"vertical\" />\n          {minimizedResourcePanels}\n        </Card>\n        {openResourcePanels}\n      </React.Fragment>\n    );\n  }\n\n  private postInit_ = (rs: ResourcesTbl) => {\n    const delIds = [];\n    for (const rid in this.resourceComponents) {\n      if (!(rid in rs)) {\n        delIds.push(rid);\n      }\n    }\n\n    for (const rid of delIds) {\n      delete this.resourceComponents[rid];\n    }\n\n    for (const rid in rs) {\n      if (!(rid in this.resourceComponents)) {\n        this.resourceComponents[rid] = React.createRef();\n      }\n    }\n  };\n\n  private onDeleteResource = (resourceId: string) => {\n    this.props.dispatch(resourceDelete(resourceId));\n  };\n\n  private onHideResourcePanel = (resourceID: string) => {\n    return () => {\n      let displayingResources: string[];\n      const displayMax1Resource =\n        this.props.displayMax1Resource === undefined\n          ? this.props.uiConf.displayMax1Resource\n          : this.props.displayMax1Resource;\n\n      if (displayMax1Resource) {\n        // hide all opened resources\n        displayingResources = [resourceID];\n      } else {\n        displayingResources = [\n          ...(this.props.displayingResources || this.state.displayingResources),\n          resourceID\n        ];\n      }\n\n      if (this.props.displayingResources) {\n        this.props.onDisplayingResourcesChange(displayingResources);\n      } else {\n        this.setState({ displayingResources });\n      }\n    };\n  };\n}\n\nfunction mapStateToProps(store: DB) {\n  return {\n    resources: store.resources,\n    uiConf: store.uiConf\n  };\n}\n\nexport default connect(mapStateToProps)(injectStyles(styles)(ResourcePanels));\n","import * as React from \"react\";\nimport { injectStyles, WithStyles } from \"../../misc/JssInjection\";\nimport UpsertResourceForm from \"./UpsertResourceForm\";\nimport { connect } from \"react-redux\";\nimport { ResourcesTbl, DB } from \"../../store/types\";\nimport { Dispatch } from \"redux\";\nimport { Row, Col, Button } from \"antd\";\nimport ResourcePanels from \"./ResourcePanels\";\n\nconst styles = {\n  createResourceForm: {\n    marginBottom: 10\n  }\n};\n\nconst defaultProps = {};\n\ninterface Props {\n  resources: ResourcesTbl;\n}\n\ninterface AProps\n  extends Props,\n    WithStyles<typeof styles>,\n    Readonly<typeof defaultProps> {\n  dispatch: Dispatch;\n}\n\ninterface State {\n  displayingCreateResourceForm: boolean;\n}\n\nexport class ResourceUI extends React.Component<AProps, State> {\n  public static defaultProps = defaultProps;\n  public state = {\n    displayingCreateResourceForm: false\n  };\n\n  public displayCreateResourceForm = (event: object) => {\n    this.setState({ displayingCreateResourceForm: true });\n  };\n\n  public hideCreateResourceForm = () => {\n    this.setState({ displayingCreateResourceForm: false });\n  };\n\n  public render() {\n    let createResourceComponent;\n    if (this.state.displayingCreateResourceForm) {\n      createResourceComponent = (\n        <UpsertResourceForm onClose={this.hideCreateResourceForm} />\n      );\n    } else {\n      createResourceComponent = (\n        <Button\n          type=\"primary\"\n          onClick={this.displayCreateResourceForm}\n          data-testid=\"create-resource-button\"\n        >\n          Create resource\n        </Button>\n      );\n    }\n\n    return (\n      <div data-testid=\"resource-page\">\n        <Row className={this.props.classes.createResourceForm}>\n          <Col span={24}>{createResourceComponent}</Col>\n        </Row>\n        <ResourcePanels />\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(store: DB) {\n  return {\n    resources: store.resources\n  };\n}\n\nexport default connect(mapStateToProps)(injectStyles(styles)(ResourceUI));\n","export type AntDFormValidationStatus =\n  | \"error\"\n  | \"success\"\n  | \"warning\"\n  | \"validating\";\n\nexport class AntDFormField<T> {\n  public readonly validationStatus: AntDFormValidationStatus;\n  public readonly validationMessage: string;\n  public readonly value: T;\n\n  constructor(\n    value: T,\n    validationStatus: AntDFormValidationStatus = \"success\",\n    validationMessage: string = \"\"\n  ) {\n    this.value = value;\n    this.validationStatus = validationStatus;\n    this.validationMessage = validationMessage;\n  }\n\n  public isValid() {\n    return this.validationStatus === \"success\";\n  }\n}\n","import * as React from \"react\";\nimport {\n  Variable,\n  Location,\n  TypeVariableSorted,\n  TypeVariableType\n} from \"src/models\";\nimport { ResourcesTbl, VariableTbl } from \"src/store/types\";\nimport {\n  Select,\n  Form,\n  Input,\n  Button,\n  Card,\n  Col,\n  Row,\n  Icon,\n  Switch\n} from \"antd\";\nimport { WithStyles, injectStyles } from \"src/misc/JssInjection\";\nimport * as _ from \"lodash\";\nimport { AntDFormField } from \"src/misc/AntDForm\";\n\nconst styles = {\n  root: {\n    \"& > div\": {\n      padding: \"8px !important\"\n    }\n  }\n};\n\ninterface Props extends WithStyles<typeof styles> {\n  onCancel: () => void;\n  onDelete: (prevID: string) => void;\n  onSave: (prevID: string, v: Variable) => void;\n  isInsert: boolean;\n  variables: VariableTbl;\n  resources: ResourcesTbl;\n  variable: Variable;\n  resourceId: string;\n  onChangeResourceId: (resourceId: string) => void;\n  layout: AntDFormField<string>;\n  onChangeLayout: (layout: string) => void;\n}\n\ninterface State {\n  varId: AntDFormField<string>;\n  type: TypeVariableType;\n  unique: boolean;\n  sorted: TypeVariableSorted;\n  missingValues: string[];\n  isCollapsed: boolean;\n}\n\nexport class UpsertVariableForm extends React.Component<Props, State> {\n  public state: State = {\n    varId: new AntDFormField(this.props.variable.id),\n    type: this.props.variable.type,\n    unique: this.props.variable.unique,\n    sorted: this.props.variable.sorted,\n    missingValues: this.props.variable.missingValues,\n    isCollapsed: true\n  };\n\n  public render() {\n    const delBtn = this.props.isInsert ? null : (\n      <Button\n        type=\"danger\"\n        className=\"margin-left-8\"\n        onClick={this.delete}\n        data-testid=\"upsert-variable-form-delete-btn\"\n      >\n        Delete\n      </Button>\n    );\n    let expandedSection = null;\n\n    if (!this.state.isCollapsed) {\n      expandedSection = (\n        <Row gutter={8}>\n          <Col span={2} offset={1}>\n            <Form.Item\n              label=\"Unique\"\n              data-testid=\"upsert-variable-form-variable-unique\"\n            >\n              <Switch\n                checked={this.state.unique}\n                onChange={this.onUniqueChange}\n              />\n            </Form.Item>\n          </Col>\n          <Col span={3}>\n            <Form.Item label=\"Sorted\">\n              <Select\n                value={this.state.sorted}\n                onChange={this.onSortedChange}\n                data-testid=\"upsert-variable-form-variable-sorted\"\n              >\n                <Select.Option\n                  data-testid=\"antd-select-options\"\n                  data-testvalue=\"null\"\n                  value=\"null\"\n                >\n                  No Order\n                </Select.Option>\n                <Select.Option\n                  data-testid=\"antd-select-options\"\n                  data-testvalue=\"ascending\"\n                  value={\"ascending\"}\n                >\n                  Ascending\n                </Select.Option>\n                <Select.Option\n                  data-testid=\"antd-select-options\"\n                  data-testvalue=\"descending\"\n                  value={\"descending\"}\n                >\n                  Descending\n                </Select.Option>\n              </Select>\n            </Form.Item>\n          </Col>\n          <Col span={2}>\n            <Form.Item label=\"Value Type\">\n              <Select\n                value={this.state.type}\n                onChange={this.onVariableTypeChange}\n                data-testid=\"upsert-variable-form-variable-type\"\n              >\n                {[\"unspecified\", \"int\", \"float\", \"string\"].map(s => (\n                  <Select.Option\n                    data-testid=\"ant-select-options\"\n                    data-testvalue={s}\n                    value={s}\n                  >\n                    {_.capitalize(s)}\n                  </Select.Option>\n                ))}\n              </Select>\n            </Form.Item>\n          </Col>\n          <Col span={14}>\n            <Form.Item label=\"Missing Values\">\n              <Select\n                mode=\"tags\"\n                data-testid=\"upsert-variable-form-variable-missing-values\"\n              >\n                {_.map(this.state.missingValues, (v: string) => (\n                  <Select.Option\n                    key={v}\n                    value={v}\n                    data-testid=\"antd-select-options\"\n                    data-testvalue={v}\n                  >\n                    {v}\n                  </Select.Option>\n                ))}\n              </Select>\n            </Form.Item>\n          </Col>\n        </Row>\n      );\n    }\n\n    return (\n      <Card className={this.props.classes.root}>\n        <Form>\n          <Row gutter={8}>\n            <Col span={5}>\n              <Form.Item label=\"Resource Id\">\n                <Select\n                  value={this.props.resourceId}\n                  onChange={this.onChangeResourceId}\n                  data-testid=\"upsert-variable-form-resource-id\"\n                >\n                  {Object.keys(this.props.resources).map(rid => (\n                    <Select.Option\n                      key={rid}\n                      value={rid}\n                      data-testid=\"antd-select-options\"\n                      data-testvalue={rid}\n                    >\n                      {rid}\n                    </Select.Option>\n                  ))}\n                </Select>\n              </Form.Item>\n            </Col>\n            <Col span={5}>\n              <Form.Item\n                label=\"Attribute Id\"\n                validateStatus={this.state.varId.validationStatus}\n                help={this.state.varId.validationMessage}\n              >\n                <Input\n                  value={this.state.varId.value}\n                  onChange={this.onVariableIdChange}\n                  data-testid=\"upsert-variable-form-variable-id\"\n                />\n              </Form.Item>\n            </Col>\n            <Col span={8}>\n              <Form.Item\n                label=\"Attribute Layout\"\n                validateStatus={this.props.layout.validationStatus}\n                help={this.props.layout.validationMessage}\n              >\n                <Input\n                  value={this.props.layout.value}\n                  onChange={this.onLayoutInputChange}\n                  data-testid=\"upsert-variable-form-variable-layout\"\n                />\n              </Form.Item>\n            </Col>\n            <Col span={6} style={{ textAlign: \"right\" }}>\n              <Form.Item label=\"&nbsp;\" colon={false}>\n                <Button\n                  onClick={this.props.onCancel}\n                  data-testid=\"upsert-variable-form-cancel-btn\"\n                >\n                  Cancel\n                </Button>\n                {delBtn}\n                <Button\n                  className=\"margin-left-8\"\n                  onClick={this.save}\n                  type=\"primary\"\n                  data-testid=\"upsert-variable-form-submit-btn\"\n                >\n                  Save\n                </Button>\n                <a\n                  style={{ marginLeft: 8, fontSize: 12 }}\n                  onClick={this.toggleExpand}\n                  data-testid=\"upsert-variable-form-collapse\"\n                >\n                  Collapse{\" \"}\n                  <Icon type={this.state.isCollapsed ? \"up\" : \"down\"} />\n                </a>\n              </Form.Item>\n            </Col>\n          </Row>\n          {expandedSection}\n        </Form>\n      </Card>\n    );\n  }\n\n  private delete = () => {\n    this.props.onDelete(this.props.variable.id);\n  };\n\n  private save = () => {\n    if (!this.props.layout.isValid() || !this.state.varId.isValid()) {\n      return;\n    }\n\n    const resource = this.props.resources[this.props.resourceId];\n    const layout = Location.fromString(\n      resource.resource.resourceId,\n      this.props.layout.value\n    );\n\n    const nv = new Variable(\n      this.state.varId.value,\n      this.state.sorted,\n      this.state.type,\n      this.state.unique,\n      this.state.missingValues,\n      layout\n    );\n    this.props.onSave(this.props.variable.id, nv);\n  };\n\n  private toggleExpand = () => {\n    this.setState({ isCollapsed: !this.state.isCollapsed });\n  };\n\n  private onSortedChange = (sorted: TypeVariableSorted) => {\n    this.setState({\n      sorted\n    });\n  };\n\n  private onChangeResourceId = (resourceId: string) => {\n    this.props.onChangeResourceId(resourceId);\n  };\n\n  private onVariableTypeChange = (type: TypeVariableType) => {\n    this.setState({\n      type\n    });\n  };\n\n  private onUniqueChange = (unique: boolean) => {\n    this.setState({ unique });\n  };\n\n  private onVariableIdChange = (event: { target: HTMLInputElement }) => {\n    let varId;\n    const value = event.target.value;\n    if (value.trim() === \"\") {\n      varId = new AntDFormField(\n        value,\n        \"error\",\n        \"Attribute id cannot be left blank\"\n      );\n    } else if (value.trim() in this.props.variables) {\n      varId = new AntDFormField(value, \"error\", \"Duplicated attribute id\");\n    } else {\n      varId = new AntDFormField(value);\n    }\n\n    this.setState({ varId });\n  };\n\n  private onLayoutInputChange = (event: any) => {\n    this.props.onChangeLayout(event.target.value);\n  };\n}\n\nexport default injectStyles(styles)(UpsertVariableForm);\n","import * as React from \"react\";\nimport { injectStyles, WithStyles } from \"src/misc/JssInjection\";\nimport { Card, Divider, Button } from \"antd\";\nimport { Variable } from \"src/models\";\n\nconst styles = {\n  root: {\n    \"&>div\": {\n      padding: \"8px !important\"\n    },\n    \"& > div > .variable-list-header\": {\n      minWidth: 80,\n      display: \"inline-block\",\n      fontWeight: 600\n    },\n    \"& .ant-divider\": {\n      height: \"1.5em\"\n    },\n    \"& button\": {\n      marginRight: 8\n    }\n  }\n};\n\nconst defaultProps = {\n  onVariableClick: (variableId: string) => {\n    /* do nothing */\n  },\n  highlightVariableIds: new Set()\n};\n\ninterface Props\n  extends WithStyles<typeof styles>,\n    Readonly<typeof defaultProps> {\n  variables: Variable[];\n  selectedVariableId?: string;\n  highlightVariableIds: Set<string>;\n  onVariableClick: (variableId: string) => void;\n}\n\nclass VariableList extends React.Component<Props, object> {\n  public static defaultProps = defaultProps;\n\n  public render() {\n    const variables = [];\n\n    for (const v of this.props.variables) {\n      const btnType =\n        v.id === this.props.selectedVariableId\n          ? \"primary\"\n          : this.props.highlightVariableIds.has(v.id)\n          ? \"dashed\"\n          : \"default\";\n      variables.push(\n        <Button key={v.id} onClick={this.onVariableClick(v.id)} type={btnType}>\n          {v.id}\n        </Button>\n      );\n    }\n\n    return (\n      <Card className={this.props.classes.root}>\n        <div className=\"variable-list-header\">Attributes</div>\n        <Divider type=\"vertical\" />\n        {variables}\n      </Card>\n    );\n  }\n\n  private onVariableClick = (variableId: string) => {\n    return () => {\n      this.props.onVariableClick(variableId);\n    };\n  };\n}\n\nexport default injectStyles(styles)(VariableList);\n","import * as React from \"react\";\nimport { ResourcesTbl, DB, VariableTbl } from \"../../store/types\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport WUpsertVariableForm, { UpsertVariableForm } from \"./UpsertVariableForm\";\nimport { Variable, Location, Slice } from \"src/models\";\nimport * as _ from \"lodash\";\nimport { variableUpsert, variableDelete } from \"src/store/actions\";\nimport { Button, Layout } from \"antd\";\nimport WResourcePanels, { ResourcePanels } from \"../resources/ResourcePanels\";\nimport { WithStyles, injectStyles } from \"src/misc/JssInjection\";\nimport VariableList from \"./VariableList\";\nimport { AntDFormField } from \"src/misc/AntDForm\";\n\nconst styles = {\n  root: {\n    \"&>*\": { marginBottom: 10 }\n  },\n  innerSpace7: {\n    \"&>*\": {\n      marginLeft: 7\n    },\n    \"&>*:first-child\": { marginLeft: 0 }\n  },\n  controlUnit: {\n    \"&>*\": {\n      marginLeft: 7\n    },\n    \"&>*:first-child\": { marginLeft: 0 }\n  }\n};\n\ninterface Props extends WithStyles<typeof styles> {\n  resources: ResourcesTbl;\n  dispatch: Dispatch;\n  variables: VariableTbl;\n}\n\ninterface State {\n  upsertVariable: Variable | null;\n  upsertVariableResourceId?: [string]; // array but must only contain 1 variable, just to make it work easy with resource panel\n  upsertVariableLayout?: AntDFormField<string>;\n}\n\nexport class LayoutUI extends React.Component<Props, State> {\n  public state: State = {\n    upsertVariable: null,\n    upsertVariableResourceId: undefined,\n    upsertVariableLayout: undefined\n  };\n  private createVariableForm: React.RefObject<UpsertVariableForm>;\n  private resourcePanels: React.RefObject<ResourcePanels>;\n\n  constructor(props: Props) {\n    super(props);\n    this.createVariableForm = React.createRef();\n    this.resourcePanels = React.createRef();\n    this.syncLayout = _.debounce(this.syncLayout, 150);\n  }\n\n  public render() {\n    const createVarForm = this.state.upsertVariable ? (\n      <WUpsertVariableForm\n        key={this.state.upsertVariable.id}\n        isInsert={!(this.state.upsertVariable.id in this.props.variables)}\n        onCancel={this.cancelUpsertVariableForm}\n        onDelete={this.onDeleteVariable}\n        onSave={this.onSaveVariable}\n        innerRef={this.createVariableForm}\n        variable={this.state.upsertVariable}\n        variables={this.props.variables}\n        resources={this.props.resources}\n        resourceId={this.state.upsertVariableResourceId![0]}\n        layout={this.state.upsertVariableLayout!}\n        onChangeResourceId={this.onUpsertVariableChangeResourceId}\n        onChangeLayout={this.onUpsertVariableChangeLayout}\n      />\n    ) : null;\n\n    return (\n      <div className={this.props.classes.root} data-testid=\"layout-page\">\n        <div className={this.props.classes.controlUnit}>\n          <Button>Add preprocessing</Button>\n          <Button\n            onClick={this.onCreateVariable}\n            type=\"primary\"\n            data-testid=\"create-variable-button\"\n          >\n            Add attribute\n          </Button>\n        </div>\n        <VariableList\n          variables={_.values(this.props.variables)}\n          selectedVariableId={\n            this.state.upsertVariable ? this.state.upsertVariable.id : undefined\n          }\n          onVariableClick={this.onUpdateVariable}\n        />\n        {createVarForm}\n        <WResourcePanels\n          innerRef={this.resourcePanels}\n          displayMax1Resource={true}\n          // don't control displaying resources when there is no selected variable\n          displayingResources={this.state.upsertVariableResourceId}\n          onDisplayingResourcesChange={this.onDisplayingResourcesChange}\n          onUpdateSelectedSlices={this.onUpdateSelectedSlices}\n        />\n      </div>\n    );\n  }\n\n  private onCreateVariable = () => {\n    let newVariable = null;\n    if (!this.resourcePanels.current) {\n      // doesn't have any effect when there is no resource panels\n      return;\n    }\n\n    // set the resource id to the currently open resource panel or the first resources\n    const resourceIds = this.resourcePanels.current.getOpenedResources();\n    const resourceId =\n      resourceIds.length > 0\n        ? resourceIds[0]\n        : Object.keys(this.props.resources)[0];\n\n    const location = new Location(resourceId, []);\n    newVariable = Variable.default(\n      `var_${_.size(this.props.variables)}`,\n      location\n    );\n    this.setState(\n      {\n        upsertVariable: newVariable,\n        upsertVariableLayout: this.validateUpsertVariableLayoutField(\"\"),\n        upsertVariableResourceId: [resourceId]\n      },\n      () => {\n        this.resourcePanels.current!.enableSelection(resourceId);\n      }\n    );\n  };\n\n  private onUpdateVariable = (vid: string) => {\n    if (vid in this.props.variables) {\n      const v = this.props.variables[vid];\n      this.setState(\n        {\n          upsertVariable: v,\n          upsertVariableLayout: new AntDFormField(v.location.toString(true)),\n          upsertVariableResourceId: [v.location.resourceId]\n        },\n        () => {\n          this.resourcePanels\n            .current!.enableSelection(v.location.resourceId)\n            .then(() => {\n              return this.resourcePanels.current!.waitForInit(\n                v.location.resourceId\n              );\n            })\n            .then(() => {\n              this.resourcePanels.current!.setSelectedSlices(\n                v.location.resourceId,\n                v.location.slices\n              );\n            });\n        }\n      );\n    }\n  };\n\n  private onDeleteVariable = (prevID: string) => {\n    const resourceId = (this.state.upsertVariable as Variable).location\n      .resourceId;\n    if (this.resourcePanels.current) {\n      this.resourcePanels.current.disableSelection(resourceId);\n    }\n    this.props.dispatch(variableDelete(prevID));\n    this.setState({ upsertVariable: null });\n  };\n\n  private cancelUpsertVariableForm = () => {\n    // set the new variable to null and disable selection\n    const resourceId = (this.state.upsertVariable as Variable).location\n      .resourceId;\n    if (this.resourcePanels.current) {\n      this.resourcePanels.current.disableSelection(resourceId);\n    }\n    this.setState({\n      upsertVariable: null,\n      upsertVariableLayout: undefined,\n      upsertVariableResourceId: undefined\n    });\n  };\n\n  private onSaveVariable = (prevID: string, nv: Variable) => {\n    if (prevID in this.props.variables) {\n      // update variable\n      this.props.dispatch(variableUpsert(nv, prevID));\n    } else {\n      this.props.dispatch(variableUpsert(nv));\n    }\n\n    if (this.resourcePanels.current) {\n      this.resourcePanels.current.disableSelection(nv.location.resourceId);\n    }\n    this.setState({ upsertVariable: null });\n  };\n\n  private onDisplayingResourcesChange = (displayingResources: string[]) => {\n    if (this.state.upsertVariable !== null && this.createVariableForm.current) {\n      if (displayingResources.length > 0) {\n        // reset the layout because resource change\n        const resourceId = displayingResources[0];\n        const upsertVariableLayout = this.validateUpsertVariableLayoutField(\"\");\n        this.setState(\n          {\n            upsertVariable: this.state.upsertVariable.clone(),\n            upsertVariableLayout,\n            upsertVariableResourceId: [resourceId]\n          },\n          () => {\n            this.resourcePanels.current!.enableSelection(resourceId);\n          }\n        );\n      }\n    }\n  };\n\n  private onUpdateSelectedSlices = (resourceId: string, slices: Slice[]) => {\n    if (\n      this.state.upsertVariable &&\n      this.createVariableForm.current &&\n      resourceId === this.state.upsertVariableResourceId![0]\n    ) {\n      const layout = new AntDFormField(\n        new Location(resourceId, slices).toString(true)\n      );\n      this.setState({ upsertVariableLayout: layout });\n    }\n  };\n\n  private onUpsertVariableChangeResourceId = (\n    upsertVariableResourceId: string\n  ) => {\n    this.setState(\n      { upsertVariableResourceId: [upsertVariableResourceId] },\n      () => {\n        this.resourcePanels.current!.enableSelection(upsertVariableResourceId);\n      }\n    );\n  };\n\n  private onUpsertVariableChangeLayout = (layout: string) => {\n    const upsertVariableLayout = this.validateUpsertVariableLayoutField(layout);\n\n    if (upsertVariableLayout.isValid()) {\n      this.setState(\n        {\n          upsertVariableLayout\n        },\n        () => {\n          this.syncLayout(\n            this.state.upsertVariableResourceId![0],\n            upsertVariableLayout.value\n          );\n        }\n      );\n    } else {\n      this.setState({\n        upsertVariableLayout\n      });\n    }\n  };\n\n  private syncLayout = (resourceId: string, layout: string) => {\n    this.resourcePanels.current!.enableSelection(resourceId).then(() => {\n      this.resourcePanels.current!.setSelectedSlices(\n        resourceId,\n        Location.fromString(resourceId, layout).slices\n      );\n    });\n  };\n\n  private validateUpsertVariableLayoutField = (\n    upsertVariableLayout: string\n  ): AntDFormField<string> => {\n    if (upsertVariableLayout.trim() === \"\") {\n      return new AntDFormField(\n        upsertVariableLayout,\n        \"error\",\n        \"Layout cannot be left blank\"\n      );\n    }\n\n    const resource = this.props.resources[\n      this.state.upsertVariableResourceId![0]\n    ];\n    try {\n      const loc = Location.fromString(\n        resource.resource.resourceId,\n        upsertVariableLayout\n      );\n\n      if (!loc.validate(resource.data.dimension)) {\n        return new AntDFormField(\n          upsertVariableLayout,\n          \"error\",\n          \"Invalid layout\"\n        );\n      }\n    } catch (e) {\n      return new AntDFormField(upsertVariableLayout, \"error\", \"Invalid format\");\n    }\n\n    return new AntDFormField(upsertVariableLayout);\n  };\n}\n\nfunction mapStateToProps(store: DB) {\n  return {\n    resources: store.resources,\n    variables: store.variables\n  };\n}\nexport default connect(mapStateToProps)(injectStyles(styles)(LayoutUI));\n","import * as React from \"react\";\nimport { ClassId, SemanticModel, Variable } from \"src/models\";\nimport { injectStyles, WithStyles } from \"src/misc/JssInjection\";\nimport { Select, Spin, Form } from \"antd\";\nimport axios from \"axios\";\nimport * as _ from \"lodash\";\nimport { VariableTbl } from \"src/store/types\";\n\nconst defaultProps = {\n  style: {},\n  formItemProps: {},\n  forbiddenNodes: new Set(),\n  onChangeVariable: (v: Variable) => {\n    /* do nothing */\n  }\n};\n\ninterface Field {\n  value?: string;\n  validateStatus?: \"error\" | \"success\";\n  errorMsg?: string;\n}\n\ninterface Props {\n  variables: VariableTbl;\n  style: any;\n  formItemProps: any;\n  fieldName: string;\n  value?: string;\n  forbiddenNodes: Set<string>;\n  onChangeVariable: (v: Variable) => void;\n}\n\ninterface State {\n  field: Field;\n}\n\nexport class VariableSelector extends React.Component<Props, State> {\n  public static defaultProps = defaultProps;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      field: { value: props.value }\n    };\n  }\n\n  public validate = (): boolean => {\n    if (this.state.field.validateStatus === undefined) {\n      const nodeId = {\n        value: this.state.field.value,\n        ...this.validateNotInForbiddenList(this.state.field.value)\n      };\n\n      this.setState({ field: nodeId });\n      return nodeId.validateStatus === \"success\";\n    }\n    return this.state.field.validateStatus === \"success\";\n  };\n\n  public getValue = () => {\n    return this.state.field;\n  };\n\n  public render() {\n    const options = [];\n\n    for (const vid in this.props.variables) {\n      options.push(<Select.Option key={vid}>{vid}</Select.Option>);\n    }\n\n    return (\n      <Form.Item label={this.props.fieldName} {...this.props.formItemProps}>\n        <Select\n          value={this.state.field.value}\n          showSearch={true}\n          style={this.props.style}\n          onChange={this.onChangeValue}\n        >\n          {options}\n        </Select>\n      </Form.Item>\n    );\n  }\n\n  private onChangeValue = (value: string) => {\n    this.setState({\n      field: { value, ...this.validateNotInForbiddenList(value) }\n    });\n    this.props.onChangeVariable(this.props.variables[value]);\n  };\n\n  private validateNotInForbiddenList = (val?: string) => {\n    if (val !== undefined && !this.props.forbiddenNodes.has(val)) {\n      return {\n        validateStatus: \"success\" as \"success\",\n        errorMsg: undefined\n      };\n    }\n\n    return {\n      validateStatus: \"error\" as \"error\",\n      errorMsg: \"Cannot select nodes in forbidden list\"\n    };\n  };\n}\n","import * as React from \"react\";\nimport { VariableTbl } from \"src/store/types\";\nimport { Variable } from \"src/models\";\nimport { Row, Col, Card, Select, Button, Icon } from \"antd\";\nimport { VariableSelector } from \"../VariableSelector\";\n\nexport type MappingType = \"index\" | \"value\";\n\ninterface Props {\n  variables: VariableTbl;\n  mappingType: MappingType;\n  var1id?: string;\n  var2id?: string;\n  onMappingTypeChange: (mappingType: MappingType) => void;\n  onSelectVar1: (var1: Variable) => void;\n  onSelectVar2: (var2: Variable) => void;\n}\n\nexport default class MappingFormHeader extends React.Component<Props, object> {\n  public render() {\n    return (\n      <Row gutter={8}>\n        <Col span={9}>\n          <VariableSelector\n            key={this.props.var1id}\n            variables={this.props.variables}\n            fieldName=\"\"\n            value={this.props.var1id}\n            style={{ width: \"100%\" }}\n            onChangeVariable={this.props.onSelectVar1}\n          />\n        </Col>\n        <Col span={6} style={{ textAlign: \"center\", paddingTop: 3 }}>\n          <Select\n            value={this.props.mappingType}\n            onChange={this.props.onMappingTypeChange}\n          >\n            <Select.Option value=\"index\">Dimension</Select.Option>\n            <Select.Option value=\"value\">Value</Select.Option>\n          </Select>\n        </Col>\n        <Col span={9}>\n          <VariableSelector\n            key={this.props.var2id}\n            variables={this.props.variables}\n            fieldName=\"\"\n            value={this.props.var2id}\n            style={{ width: \"100%\" }}\n            onChangeVariable={this.props.onSelectVar2}\n          />\n        </Col>\n      </Row>\n    );\n  }\n}\n","import * as React from \"react\";\nimport { injectStyles, WithStyles } from \"src/misc/JssInjection\";\nimport { Row, Col, Button, Divider, Icon } from \"antd\";\nimport {\n  Variable,\n  RangeSlice,\n  IndexSlice,\n  DimensionAlignment,\n  Alignment\n} from \"src/models\";\nimport { Index } from \"src/models/data\";\nimport * as _ from \"lodash\";\nimport { ResourcesTbl, DB } from \"src/store/types\";\nimport { connect } from \"react-redux\";\n\nconst styles = {\n  controller: {\n    marginTop: -20,\n    textAlign: \"center\" as \"center\",\n    \"& button\": {\n      paddingTop: 2,\n      marginRight: 8\n    },\n    \"& button:last-child\": {\n      marginRight: 0\n    }\n  },\n  dimensionElement: {\n    display: \"block\",\n    marginBottom: 8,\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    zIndex: 2\n  },\n  root: {\n    zIndex: 0\n  },\n  drawlingLine: {\n    width: \"100%\",\n    position: \"absolute\" as \"absolute\",\n    left: 0,\n    top: 0,\n    zIndex: 1\n  },\n  variableLocation: {\n    margin: 8,\n    \"& span\": {\n      padding: \"5px 10px\",\n      fontSize: 15\n    }\n  }\n};\n\nconst dimensionColors = [\"#F08080\", \"#AF7AC5\", \"#FFC300\", \"#DAF7A6\"];\n\ninterface Props extends WithStyles<typeof styles> {\n  mapping?: DimensionAlignment;\n  var1?: Variable;\n  var2?: Variable;\n  resources: ResourcesTbl;\n  onSave: (indexMapping: DimensionAlignment) => Promise<void>;\n  onDiscard: () => void;\n  onClear: () => void;\n}\n\ninterface AlignedDim {\n  source: number;\n  target: number;\n}\n\ninterface State {\n  alignedDims: AlignedDim[];\n  // keep track of what user is selecting to map between dimensions\n  selectedDimensions: [Index | undefined, Index | undefined];\n  dimensionElementCentroids: [\n    { [elementIndex: number]: { top: number; left: number } },\n    { [elementIndex: number]: { top: number; left: number } }\n  ];\n}\n\nclass IndexMappingForm extends React.Component<Props, State> {\n  public state: State = {\n    alignedDims: this.props.mapping ? this.props.mapping.alignedDimensions : [],\n    selectedDimensions: [undefined, undefined],\n    dimensionElementCentroids: [[], []]\n  };\n\n  public componentDidMount = () => {\n    this.setState({\n      dimensionElementCentroids: [\n        this.getDimensionElementCentroids(this.props.var1),\n        this.getDimensionElementCentroids(this.props.var2)\n      ]\n    });\n  };\n\n  public componentDidUpdate = (prevProps: Props, prevState: State) => {\n    if (\n      prevProps.var1 !== this.props.var1 ||\n      prevProps.var2 !== this.props.var2\n    ) {\n      // the properties were changed, and we need to re-compute the btn position and reset the state correctly\n      // this way it may trigger render function twice and create phantom view in a blink, however, we cannot fix\n      // this using getDeriveState because the centroids of elements cannot be computed unless they are rendered\n      this.setState({\n        dimensionElementCentroids: [\n          this.getDimensionElementCentroids(this.props.var1),\n          this.getDimensionElementCentroids(this.props.var2)\n        ],\n        selectedDimensions: [undefined, undefined],\n        alignedDims: this.props.mapping\n          ? this.props.mapping.alignedDimensions\n          : []\n      });\n    }\n  };\n\n  public render() {\n    const lines = [];\n    if (\n      this.state.alignedDims.length > 0 &&\n      _.size(this.state.dimensionElementCentroids[0]) > 0 &&\n      _.size(this.state.dimensionElementCentroids[1]) > 0\n    ) {\n      for (const mappedDim of this.state.alignedDims) {\n        lines.push(\n          <line\n            key={`${mappedDim.source}--${mappedDim.target}`}\n            x1={this.state.dimensionElementCentroids[0][mappedDim.source].left}\n            y1={this.state.dimensionElementCentroids[0][mappedDim.source].top}\n            x2={this.state.dimensionElementCentroids[1][mappedDim.target].left}\n            y2={this.state.dimensionElementCentroids[1][mappedDim.target].top}\n            stroke=\"black\"\n          />\n        );\n      }\n    }\n\n    return (\n      <React.Fragment>\n        <Row gutter={8}>\n          <Col span={8} offset={8} className={this.props.classes.controller}>\n            <Button\n              shape=\"circle\"\n              disabled={!this.props.var1 || !this.props.var2}\n              onClick={this.props.onClear}\n            >\n              <Icon type=\"close-circle\" theme=\"filled\" />\n            </Button>\n            <Button\n              shape=\"circle\"\n              type=\"danger\"\n              disabled={!this.props.var1 || !this.props.var2}\n              onClick={this.props.onDiscard}\n            >\n              <Icon type=\"delete\" theme=\"filled\" />\n            </Button>\n            <Button\n              shape=\"circle\"\n              disabled={this.state.alignedDims.length > 0 ? false : true}\n              onClick={this.undoLatestMappingAction}\n            >\n              <Icon type=\"undo\" />\n            </Button>\n            <Button\n              shape=\"circle\"\n              type=\"primary\"\n              disabled={!this.props.var1 || !this.props.var2}\n              onClick={this.saveMapping}\n            >\n              <Icon type=\"save\" theme=\"filled\" />\n            </Button>\n          </Col>\n        </Row>\n        <Row gutter={8} className={this.props.classes.root} id=\"drepr-map-form\">\n          <Col span={9} className=\"text-align-center\">\n            {this.getVariableLocationElement(this.props.var1)}\n            {this.getDimensionElements(\n              0,\n              this.props.var1,\n              this.state.selectedDimensions[0]\n            )}\n          </Col>\n          <Col span={9} offset={6} className=\"text-align-center\">\n            {this.getVariableLocationElement(this.props.var2)}\n            {this.getDimensionElements(\n              1,\n              this.props.var2,\n              this.state.selectedDimensions[1]\n            )}\n          </Col>\n          <svg className={this.props.classes.drawlingLine}>{lines}</svg>\n        </Row>\n      </React.Fragment>\n    );\n  }\n\n  private saveMapping = () => {\n    // TODO: need to check if the mapping is correct\n    const im = new DimensionAlignment(\n      this.props.var1!.id,\n      this.props.var2!.id,\n      []\n    );\n    for (const mp of this.state.alignedDims) {\n      im.addAlignedDimension(mp.source, mp.target);\n    }\n    this.props.onSave(im);\n  };\n\n  private undoLatestMappingAction = () => {\n    this.setState({\n      alignedDims: this.state.alignedDims.slice(\n        0,\n        this.state.alignedDims.length - 2\n      )\n    });\n  };\n\n  // get centroids of the dimension elements so that we can draw the line between them\n  private getDimensionElementCentroids = (variable?: Variable) => {\n    const centroids = {};\n\n    if (variable !== undefined) {\n      const crect = (document.getElementById(\n        \"drepr-map-form\"\n      ) as any).getBoundingClientRect();\n\n      for (const el of document.getElementsByClassName(\n        `drepr-idx-map-${variable.id}`\n      ) as any) {\n        const elr = el.getBoundingClientRect();\n        centroids[el.dataset.dimensionelementindex] = {\n          top: (elr.bottom - elr.top) / 2 + elr.top - crect.top,\n          left: (elr.right - elr.left) / 2 + elr.left - crect.left\n        };\n      }\n    }\n\n    return centroids;\n  };\n\n  private getVariableLocationElement = (variable?: Variable) => {\n    if (variable === undefined) {\n      return null;\n    }\n\n    return (\n      <div className={this.props.classes.variableLocation}>\n        {variable.location.slices.map((s, i) => {\n          return (\n            <span\n              key={i}\n              style={{\n                backgroundColor: dimensionColors[i % dimensionColors.length]\n              }}\n            >\n              {s.toString()}\n            </span>\n          );\n        })}\n      </div>\n    );\n  };\n\n  // get the HTML elements that represent the dimension\n  private getDimensionElements = (\n    variableIndex: number,\n    variable?: Variable,\n    selectedDimension?: Index\n  ) => {\n    const elements = [];\n    if (variable !== undefined) {\n      const resourceType = this.props.resources[variable.location.resourceId]\n        .resource.resourceType;\n\n      elements.push(\n        variable.location.slices\n          .map((s, idx) => {\n            if (s instanceof IndexSlice) {\n              return null;\n            }\n\n            let dimName;\n            if (resourceType === \"csv\") {\n              if (idx === 1) {\n                dimName = \"Column\";\n              } else {\n                dimName = \"Row\";\n              }\n            } else {\n              dimName = `Dimension ${idx}`;\n            }\n\n            return (\n              <Button\n                key={idx}\n                type={idx === selectedDimension ? \"primary\" : \"default\"}\n                className={\n                  this.props.classes.dimensionElement +\n                  \" \" +\n                  `drepr-idx-map-${variable.id}`\n                }\n                data-dimensionelementindex={idx}\n                style={{\n                  backgroundColor: dimensionColors[idx % dimensionColors.length]\n                }}\n                onClick={this.selectVariableDimension(variableIndex, idx)}\n              >\n                {dimName}\n              </Button>\n            );\n          })\n          .filter(r => r !== null)\n      );\n    }\n\n    return elements;\n  };\n\n  private selectVariableDimension = (\n    variableIndex: number,\n    dimensionIndex: number\n  ) => {\n    // handle when user select a dimension of a variable\n    return () => {\n      const otherVariableIndex = variableIndex === 1 ? 0 : 1;\n      if (this.state.selectedDimensions[otherVariableIndex] !== undefined) {\n        this.state.selectedDimensions[variableIndex] = dimensionIndex;\n        this.state.alignedDims.push({\n          source: this.state.selectedDimensions[0] as number,\n          target: this.state.selectedDimensions[1] as number\n        });\n        this.setState({\n          alignedDims: this.state.alignedDims,\n          selectedDimensions: [undefined, undefined]\n        });\n      } else {\n        this.state.selectedDimensions[variableIndex] = dimensionIndex;\n        this.setState({\n          selectedDimensions: this.state.selectedDimensions.slice() as [\n            Index | undefined,\n            Index | undefined\n          ]\n        });\n      }\n    };\n  };\n}\n\nfunction db2Props(store: DB) {\n  return {\n    resources: store.resources\n  };\n}\n\nexport default connect(db2Props)(injectStyles(styles)(IndexMappingForm));\n","import * as React from \"react\";\nimport { Alignment, Variable, ValueAlignment } from \"src/models\";\nimport { render } from \"react-dom\";\nimport { Row, Button, Col, Icon } from \"antd\";\nimport { WithStyles, injectStyles } from \"src/misc/JssInjection\";\n\nconst styles = {\n  controller: {\n    marginTop: -20,\n    textAlign: \"center\" as \"center\",\n    \"& button\": {\n      marginRight: 8,\n      paddingTop: 2\n    },\n    \"& button:last-child\": {\n      marginRight: 0\n    }\n  }\n};\n\ninterface Props extends WithStyles<typeof styles> {\n  mapping?: Alignment;\n  var1?: Variable;\n  var2?: Variable;\n  onDiscard: () => void;\n  onClear: () => void;\n  onSave: (vm: Alignment) => Promise<void>;\n}\n\nexport class ValueMappingForm extends React.Component<Props, object> {\n  public render() {\n    return (\n      <Row gutter={8}>\n        <Col span={6} offset={9} className={this.props.classes.controller}>\n          <Button\n            shape=\"circle\"\n            disabled={!this.props.var1 || !this.props.var2}\n            onClick={this.props.onClear}\n          >\n            <Icon type=\"close-circle\" theme=\"filled\" />\n          </Button>\n          <Button\n            shape=\"circle\"\n            type=\"danger\"\n            disabled={!this.props.var1 || !this.props.var2}\n            onClick={this.props.onDiscard}\n          >\n            <Icon type=\"delete\" theme=\"filled\" />\n          </Button>\n          <Button\n            shape=\"circle\"\n            type=\"primary\"\n            disabled={!this.props.var1 || !this.props.var2}\n            onClick={this.saveMapping}\n          >\n            <Icon type=\"save\" theme=\"filled\" />\n          </Button>\n        </Col>\n      </Row>\n    );\n  }\n\n  private saveMapping = () => {\n    const vm = new ValueAlignment(this.props.var1!.id, this.props.var2!.id);\n    this.props.onSave(vm);\n  };\n}\n\nexport default injectStyles(styles)(ValueMappingForm);\n","import * as React from \"react\";\nimport { VariableTbl } from \"src/store/types\";\nimport {\n  Variable,\n  Alignment,\n  ValueAlignment,\n  DimensionAlignment,\n  AlignmentImpl\n} from \"src/models\";\nimport MappingFormHeader, { MappingType } from \"./MappingFormHeader\";\nimport IndexMappingForm from \"./IndexMappingForm\";\nimport { Card } from \"antd\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { alignmentUpsert, alignmentRemove } from \"src/store/actions\";\nimport ValueMappingForm from \"./ValueMappingForm\";\n\ninterface Props {\n  dispatch: Dispatch;\n  variables: VariableTbl;\n}\n\ninterface State {\n  mapping?: Alignment;\n  var1id?: string;\n  var2id?: string;\n  mappingType: MappingType;\n}\n\nfunction getDefaultState(): State {\n  return {\n    mapping: undefined,\n    var1id: undefined,\n    var2id: undefined,\n    mappingType: \"index\"\n  };\n}\n\nexport class MappingForm extends React.Component<Props, State> {\n  public state = getDefaultState();\n\n  public hasVariable1 = () => {\n    return this.state.var1id !== undefined;\n  };\n\n  public hasVariable2 = () => {\n    return this.state.var2id !== undefined;\n  };\n\n  public setMapping = (m: Alignment) => {\n    window.console.log(\"set mapping\", m);\n    this.setState({\n      mapping: m,\n      var1id: m.source,\n      var2id: m.target,\n      mappingType: m instanceof DimensionAlignment ? \"index\" : \"value\"\n    });\n  };\n\n  public setVariable1 = (var1: Variable) => {\n    if (var1.id !== this.state.var2id) {\n      this.setState({ var1id: var1.id });\n    }\n  };\n\n  public setVariable2 = (var2: Variable) => {\n    if (var2.id !== this.state.var1id) {\n      this.setState({ var2id: var2.id });\n    }\n  };\n\n  public clearMapping = () => {\n    this.setState(getDefaultState());\n  };\n\n  public render() {\n    let comp = null;\n\n    if (this.state.mappingType === \"index\") {\n      comp = (\n        <IndexMappingForm\n          key={this.state.mapping ? this.state.mapping.id : undefined}\n          mapping={this.state.mapping as DimensionAlignment}\n          var1={\n            this.state.var1id\n              ? this.props.variables[this.state.var1id]\n              : undefined\n          }\n          var2={\n            this.state.var2id\n              ? this.props.variables[this.state.var2id]\n              : undefined\n          }\n          onSave={this.onSaveMappingForm}\n          onDiscard={this.onDiscardMappingForm}\n          onClear={this.onClearMappingForm}\n        />\n      );\n    } else {\n      comp = (\n        <ValueMappingForm\n          key={this.state.mapping ? this.state.mapping.id : undefined}\n          mapping={this.state.mapping as ValueAlignment}\n          var1={\n            this.state.var1id\n              ? this.props.variables[this.state.var1id]\n              : undefined\n          }\n          var2={\n            this.state.var2id\n              ? this.props.variables[this.state.var2id]\n              : undefined\n          }\n          onSave={this.onSaveMappingForm}\n          onDiscard={this.onDiscardMappingForm}\n          onClear={this.onClearMappingForm}\n        />\n      );\n    }\n\n    return (\n      <Card size=\"small\">\n        <MappingFormHeader\n          variables={this.props.variables}\n          var1id={this.state.var1id}\n          var2id={this.state.var2id}\n          mappingType={this.state.mappingType}\n          onMappingTypeChange={this.changeMappingType}\n          onSelectVar1={this.setVariable1}\n          onSelectVar2={this.setVariable2}\n        />\n        {comp}\n      </Card>\n    );\n  }\n\n  private onClearMappingForm = () => {\n    this.setState({\n      ...getDefaultState(),\n      mappingType: this.state.mappingType\n    });\n  };\n\n  private onDiscardMappingForm = () => {\n    if (this.state.mapping) {\n      // issue a delete request\n      this.props.dispatch(alignmentRemove(this.state.mapping));\n    }\n    // reset the data\n    this.setState(getDefaultState());\n  };\n\n  private onSaveMappingForm = (mapping: Alignment): Promise<void> => {\n    this.props.dispatch(alignmentUpsert(mapping));\n    this.setState(getDefaultState());\n    return new Promise(() => {\n      return;\n    });\n  };\n\n  private changeMappingType = (mappingType: MappingType) => {\n    this.setState({ mappingType });\n  };\n}\n\nexport default connect(\n  null,\n  null,\n  null,\n  { forwardRef: true } as any\n)(MappingForm);\n","import * as React from \"react\";\nimport { WithStyles } from \"@material-ui/core\";\nimport { injectStyles } from \"src/misc/JssInjection\";\nimport * as cytoscape from \"cytoscape\";\nimport * as _ from \"lodash\";\nimport { Divider, Icon, Button } from \"antd\";\nimport memoizeOne from \"memoize-one\";\nimport edgehandles from \"cytoscape-edgehandles\";\nimport spread from \"cytoscape-spread\";\n\ncytoscape.use(edgehandles);\ncytoscape.use(spread);\n\nconst styles = {\n  root: {\n    width: \"100%\",\n    minHeight: \"500px\",\n    border: \"1px solid #e8e8e8\",\n    marginTop: 8,\n    \"&>div:last-child\": {\n      width: \"100%\",\n      minHeight: \"500px\"\n    },\n    position: \"relative\" as \"relative\"\n  },\n  rootHasTitle: {\n    borderTop: \"none\",\n    marginTop: \"-28px !important\",\n    paddingTop: 16\n  },\n  title: {\n    marginTop: \"8px !important\"\n  },\n  floatedControlBtn: {\n    position: \"absolute\" as \"absolute\",\n    top: 5,\n    right: 0,\n    zIndex: 990,\n    \"& button\": {\n      marginRight: 4,\n      fontSize: \"1.2em\",\n      lineHeight: \"1.2em\",\n      padding: \"0 10px 2px\",\n      fontWeight: 500\n    }\n  }\n};\n\nconst defaultEdgeDrawingStyles = [\n  {\n    selector: \".eh-handle\",\n    style: {\n      \"background-color\": \"#db0d11\",\n      width: 12,\n      height: 12,\n      shape: \"ellipse\",\n      \"overlay-opacity\": 0,\n      \"border-width\": 12, // makes the handle easier to hit\n      \"border-opacity\": 0\n    }\n  },\n  {\n    selector: \".eh-source\",\n    style: {\n      \"border-width\": 2,\n      \"border-color\": \"#db0d11\"\n    }\n  },\n  {\n    selector: \".eh-target\",\n    style: {\n      \"border-width\": 2,\n      \"border-color\": \"#db0d11\"\n    }\n  },\n  {\n    selector: \".eh-preview, .eh-ghost-edge\",\n    style: {\n      width: 2,\n      \"background-color\": \"#db0d11\",\n      \"line-color\": \"#db0d11\",\n      \"curve-style\": \"bezier\",\n      \"control-point-step-size\": 75,\n      \"target-arrow-color\": \"#db0d11\",\n      \"target-arrow-shape\": \"triangle\"\n    }\n  }\n];\n\nconst defaultProps = {\n  onNodeClick: (nid: string) => {\n    /* do nothing */\n  },\n  onNodeRightClick: (nid: string) => {\n    /* do nothing */\n  },\n  onEdgeClick: (eid: string) => {\n    /* do nothing */\n  },\n  enableEdgeDrawingCreation: false,\n  canDrawEdgeBetweenNodes: (sourceId: string, targetId: string) => {\n    return true;\n  },\n  onDrawNewEdgeComplete: (sourceId: string, targetId: string) => {\n    /* do nothing */\n  }\n};\n\ninterface Props\n  extends WithStyles<typeof styles>,\n    Readonly<typeof defaultProps> {\n  title?: string;\n  nodes: Node[];\n  edges: Edge[];\n  styles: any;\n  layout: any;\n}\n\nexport interface Node {\n  id: string;\n  label: string;\n  type: string;\n}\n\nexport interface Edge {\n  id?: string;\n  label: string;\n  source: string;\n  target: string;\n}\n\nclass CytoscapeGraph extends React.Component<Props, object> {\n  public static defaultProps = defaultProps;\n  private container: React.RefObject<HTMLDivElement>;\n  private cy?: cytoscape.Core = undefined;\n  private cyEdgeDrawing: {\n    eh?: any;\n    isHoveringEh: boolean;\n    isHoveringNode: boolean;\n  } = {\n    isHoveringEh: false,\n    isHoveringNode: false\n  };\n  private syncWithCytoscape = memoizeOne(\n    (nodes: Node[], edges: Edge[], cy?: cytoscape.Core) =>\n      this.syncWithCytoscape_(nodes, edges, cy)\n  );\n\n  constructor(props: Props) {\n    super(props);\n    this.container = React.createRef();\n  }\n\n  public componentDidMount() {\n    if (this.cy === undefined) {\n      this.cy = cytoscape({\n        container: this.container.current!,\n        layout: {\n          name: \"breadthfirst\",\n          fit: true,\n          spacingFactor: 1,\n          directed: true\n        },\n        style: this.props.styles.concat(defaultEdgeDrawingStyles)\n      });\n\n      // checkout the configuration at: https://github.com/cytoscape/cytoscape.js-edgehandles\n      this.cyEdgeDrawing.eh = (this.cy as any).edgehandles({\n        preview: false,\n        hoverDelay: 150,\n        handleNodes: \"node\",\n        snap: false,\n        snapThreshold: 50,\n        snapFrequency: 15,\n        noEdgeEventsInDraw: true,\n        disableBrowserGestures: true,\n        handleInDrawMode: false,\n        nodeLoopOffset: -50,\n        edgeType: (sourceNode: any, targetNode: any) => {\n          return this.props.canDrawEdgeBetweenNodes(\n            sourceNode.id(),\n            targetNode.id()\n          )\n            ? \"flat\"\n            : null;\n        },\n        edgeParams: (sourceNode: any, targetNode: any, i: any) => {\n          return { data: { label: \"\" } };\n        },\n        ghostEdgeParams: () => {\n          // return element object to be passed to cy.add() for the ghost edge\n          // (default classes are always added for you)\n          return { data: { label: \"\" } };\n        },\n        complete: (sourceNode: any, targetNode: any, addedEles: any) => {\n          // fired when edgehandles is done and elements are added\n          this.props.onDrawNewEdgeComplete(sourceNode.id(), targetNode.id());\n          // remove temporary edges\n          addedEles.remove();\n        }\n      });\n      (window as any).eh = this.cyEdgeDrawing.eh;\n      // as the cytoscape doesn't hide eh-handle correctly, we have to handle it ourself.\n      // when mouse moves out a node, we only hide eh-handle if it's not hovering\n      // and when mouse moves out eh-handle, we ohly hide if it's not hovering any node\n      // as the order of firing events is not guarantee, we give them some event a bit of delay\n      // to make sure they're fired in this order:\n      // entering eh-handle -> leaving node -> entering node -> leaving eh-handle\n      const minDelay = 50;\n      this.cy.on(\"mouseover\", \".eh-handle\", () => {\n        this.cyEdgeDrawing.isHoveringEh = true;\n        // global.console.log(\"[EH-handle] Entering\");\n      });\n      this.cy.on(\n        \"mouseover\",\n        \"node\",\n        _.debounce(() => {\n          // global.console.log(\"[Node] Entering\");\n          this.cyEdgeDrawing.isHoveringNode = true;\n        }, minDelay * 2)\n      );\n      this.cy.on(\n        \"mouseout\",\n        \"node\",\n        _.debounce(() => {\n          this.cyEdgeDrawing.isHoveringNode = false;\n          if (!this.cyEdgeDrawing.isHoveringEh) {\n            this.cyEdgeDrawing.eh.hide();\n            //   global.console.log(\"[Node] Leaving to space => hide Eh-handle\");\n            // } else {\n            //   global.console.log(\"[Node] Leaving to Eh-Handle\");\n          }\n        }, minDelay)\n      );\n      this.cy.on(\n        \"mouseout\",\n        \".eh-handle\",\n        _.debounce(() => {\n          this.cyEdgeDrawing.isHoveringEh = false;\n          if (!this.cyEdgeDrawing.isHoveringNode) {\n            this.cyEdgeDrawing.eh.hide();\n            //   global.console.log(\"[EH-Handle] Leaving to space => Hide Eh-handle\");\n            // } else {\n            //   global.console.log(\"[EH-Handle] Leaving to node\");\n          }\n        }, minDelay * 3)\n      );\n\n      if (this.props.enableEdgeDrawingCreation) {\n        this.cyEdgeDrawing.eh.enable();\n      } else {\n        this.cyEdgeDrawing.eh.disable();\n      }\n\n      this.syncWithCytoscape(this.props.nodes, this.props.edges, this.cy);\n      this.cy.userZoomingEnabled(false);\n      this.cy.on(\"click\", \"node\", this.onNodeClick);\n      this.cy.on(\"click\", \"edge\", this.onEdgeClick);\n      this.cy.on(\"cxttap\", \"node\", this.onNodeRightClick);\n    }\n  }\n\n  public render() {\n    this.syncWithCytoscape(this.props.nodes, this.props.edges, this.cy);\n\n    let titleComp = null;\n    let extraClassName = \"\";\n\n    if (this.props.title !== undefined) {\n      titleComp = (\n        <Divider orientation=\"left\" className={this.props.classes.title}>\n          {this.props.title}\n        </Divider>\n      );\n      extraClassName = \" \" + this.props.classes.rootHasTitle;\n    }\n\n    return (\n      <React.Fragment>\n        {titleComp}\n        <div className={this.props.classes.root + extraClassName}>\n          <div className={this.props.classes.floatedControlBtn}>\n            <Button onClick={this.zoomIn}>+</Button>\n            <Button onClick={this.zoomOut}>-</Button>\n            <Button onClick={this.centerViewPort}>&#x233E;</Button>\n          </div>\n          <div ref={this.container} />\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  private onNodeClick = (e: cytoscape.EventObject) => {\n    this.props.onNodeClick(e.target.id());\n  };\n\n  private onNodeRightClick = (e: cytoscape.EventObject) => {\n    this.props.onNodeRightClick(e.target.id());\n  };\n\n  private onEdgeClick = (e: cytoscape.EventObject) => {\n    this.props.onEdgeClick(e.target.id());\n  };\n\n  private zoomIn = () => {\n    if (this.cy !== undefined) {\n      this.cy.zoom(this.cy.zoom() + 0.5);\n      this.cy.center();\n    }\n  };\n\n  private zoomOut = () => {\n    if (this.cy !== undefined) {\n      this.cy.zoom(this.cy.zoom() - 0.5);\n      this.cy.center();\n    }\n  };\n\n  private centerViewPort = () => {\n    if (this.cy !== undefined) {\n      this.cy.center();\n    }\n  };\n\n  private syncWithCytoscape_(\n    nodes: Node[],\n    edges: Edge[],\n    cy?: cytoscape.Core\n  ) {\n    if (cy === undefined) {\n      return;\n    }\n\n    cy.remove(cy.nodes());\n    cy.remove(cy.edges());\n    cy.add(\n      _.map(nodes, (n: Node) => {\n        return { group: \"nodes\", data: n } as any;\n      })\n    );\n    cy.add(\n      _.map(edges, (e: Edge) => {\n        return { group: \"edges\", data: e } as any;\n      })\n    );\n\n    const layout = cy.layout(this.props.layout);\n    layout.run();\n    cy.reset();\n    cy.center();\n  }\n}\n\nexport default injectStyles(styles)(CytoscapeGraph);\n","import * as React from \"react\";\nimport { injectStyles, WithStyles } from \"src/misc/JssInjection\";\nimport VariableList from \"../layout/VariableList\";\nimport { VariableTbl, DB, AlignmentTbl } from \"src/store/types\";\nimport { connect } from \"react-redux\";\nimport * as _ from \"lodash\";\nimport WMappingForm, { MappingForm } from \"./forms/MappingForm\";\nimport CytoscapeGraph from \"../misc/graph/CytoscapeGraph\";\nimport { DimensionAlignment, Alignment } from \"src/models\";\nimport { BugError } from \"src/misc/Exception\";\nimport { Row, Col } from \"antd\";\n\nconst styles = {};\n\ninterface Props extends WithStyles<typeof styles> {\n  variables: VariableTbl;\n  mappings: AlignmentTbl;\n}\n\nconst cytoscapeSMGraphStyles = [\n  {\n    selector: \"node\",\n    style: {\n      label: \"data(label)\",\n      \"text-halign\": \"center\",\n      \"text-valign\": \"center\",\n      width: \"label\",\n      height: \"label\"\n    }\n  },\n  {\n    selector: 'node[type=\"variable\"]',\n    style: {\n      backgroundColor: \"#FED530\",\n      shape: \"rectangle\",\n      padding: \"10px\"\n    } as any\n  },\n  {\n    selector: \"edge\",\n    style: {\n      width: 2,\n      label: \"data(label)\",\n      \"text-background-color\": \"#FFFFFF\",\n      \"text-background-opacity\": 1,\n      \"curve-style\": \"unbundled-bezier\",\n      \"line-color\": \"#A32B2E\",\n      \"target-arrow-color\": \"#A32B2E\",\n      \"target-arrow-shape\": \"none\"\n    }\n  }\n];\n\nconst cytoscapeSMGraphLayout = {\n  name: \"spread\",\n  animate: true, // Whether to show the layout as it's running\n  ready: undefined, // Callback on layoutready\n  stop: undefined, // Callback on layoutstop\n  fit: true, // Reset viewport to fit default simulationBounds\n  minDist: 10, // Minimum distance between nodes\n  padding: 10, // Padding\n  expandingFactor: -1.0, // If the network does not satisfy the minDist\n  // criterium then it expands the network of this amount\n  // If it is set to -1.0 the amount of expansion is automatically\n  // calculated based on the minDist, the aspect ratio and the\n  // number of nodes\n  prelayout: { name: \"cose\" }, // Layout options for the first phase\n  maxExpandIterations: 4, // Maximum number of expanding iterations\n  boundingBox: undefined, // Constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\n  randomize: false // Uses random initial node positions on true\n};\n\nfunction getEdgeId(m: Alignment): string {\n  if (m.source.indexOf(\":::\") !== -1) {\n    throw new BugError(\"We assume that variable id doesn't have `:::` in it\");\n  }\n  return `${m.source}:::${m.target}`;\n}\n\nfunction parseEdgeId(mappings: AlignmentTbl, edgeId: string): Alignment {\n  const [var1id, var2id] = edgeId.split(\":::\", 2);\n  let mapping = null;\n\n  for (const m of mappings) {\n    if (m.source === var1id && m.target === var2id) {\n      if (mapping !== null) {\n        throw new BugError(\"More than one mapping between two variables\");\n      }\n\n      mapping = m;\n    }\n  }\n\n  if (mapping === null) {\n    throw new BugError(\"There is no mapping associated with an edge\");\n  }\n\n  return mapping;\n}\n\nclass MappingsUI extends React.Component<Props, object> {\n  private mappingForm: React.RefObject<MappingForm>;\n\n  constructor(props: Props) {\n    super(props);\n    this.mappingForm = React.createRef();\n  }\n\n  public render() {\n    const nodes = _.map(this.props.variables, v => ({\n      id: v.id,\n      label: v.id,\n      type: \"variable\"\n    }));\n\n    const edges = [];\n    for (const m of this.props.mappings) {\n      edges.push({\n        id: getEdgeId(m),\n        source: m.source,\n        target: m.target,\n        label: m instanceof DimensionAlignment ? \"dimension\" : \"value\"\n      });\n    }\n\n    return (\n      <React.Fragment>\n        <VariableList\n          variables={_.values(this.props.variables)}\n          onVariableClick={this.onVariableListClick}\n        />\n        <br />\n        <Row gutter={8}>\n          <Col span={12}>\n            <WMappingForm\n              ref={this.mappingForm}\n              variables={this.props.variables}\n            />\n          </Col>\n          <Col span={12} style={{ marginTop: -19 }}>\n            <CytoscapeGraph\n              nodes={nodes}\n              edges={edges}\n              title=\"Mapping\"\n              styles={cytoscapeSMGraphStyles}\n              layout={cytoscapeSMGraphLayout}\n              onNodeClick={this.onGraphNodeClick}\n              onEdgeClick={this.onGraphEdgeClick}\n            />\n          </Col>\n        </Row>\n      </React.Fragment>\n    );\n  }\n\n  private onGraphNodeClick = (nodeId: string) => {\n    this.onVariableListClick(nodeId);\n  };\n\n  private onGraphEdgeClick = (edgeId: string) => {\n    if (this.mappingForm.current) {\n      const m = parseEdgeId(this.props.mappings, edgeId);\n      this.mappingForm.current.setMapping(m);\n    }\n  };\n\n  // click on variable in variable list will add it to the current form\n  // it will clear the form if it has been filled with two variables\n  private onVariableListClick = (variableId: string) => {\n    if (this.mappingForm.current) {\n      if (\n        this.mappingForm.current.hasVariable1() &&\n        this.mappingForm.current.hasVariable2()\n      ) {\n        // clean the list\n        this.mappingForm.current.clearMapping();\n        return;\n      }\n\n      if (!this.mappingForm.current.hasVariable1()) {\n        this.mappingForm.current.setVariable1(this.props.variables[variableId]);\n      } else {\n        this.mappingForm.current.setVariable2(this.props.variables[variableId]);\n      }\n    }\n  };\n}\n\nfunction db2Props(store: DB) {\n  return {\n    variables: store.variables,\n    mappings: store.alignments\n  };\n}\n\nexport default connect(db2Props)(injectStyles(styles)(MappingsUI));\n","import * as React from \"react\";\nimport { WithStyles, injectStyles } from \"src/misc/JssInjection\";\nimport { connect } from \"react-redux\";\nimport {\n  Row,\n  Radio,\n  Col,\n  Card,\n  Button,\n  Menu,\n  Icon,\n  Dropdown,\n  Alert,\n  Table,\n  Input,\n  Upload,\n  notification\n} from \"antd\";\nimport { DB, AppTbl, DatasetTbl } from \"src/store/types\";\nimport Form, { FormComponentProps } from \"antd/lib/form\";\nimport { Dispatch } from \"redux\";\nimport {\n  datasetList,\n  datasetCreate,\n  datasetSelect,\n  datasetRemove,\n  datasetDeSelect\n} from \"src/store/actions\";\nimport * as _ from \"lodash\";\nimport { timingSafeEqual } from \"crypto\";\nimport { UploadFile } from \"antd/lib/upload/interface\";\nimport { ClickParam } from \"antd/lib/menu\";\n\nconst styles = {};\n\ninterface Props extends WithStyles<typeof styles>, FormComponentProps {\n  dispatch: Dispatch;\n  app: AppTbl;\n  datasetTbl: DatasetTbl;\n}\n\n// tslint:disable-next-line:no-empty-interface\ninterface State {}\n\ninterface Record {\n  name: string;\n  description: string;\n  isActive: boolean;\n}\n\nclass DatasetManager extends React.Component<Props, State> {\n  public state: State = {};\n  private isSelectingDataset: boolean = false;\n  private datasetColumns = [\n    {\n      title: \"Name\",\n      dataIndex: \"name\"\n    },\n    {\n      title: \"Description\",\n      dataIndex: \"description\",\n      // TODO: fix me! temporary fix for long description\n      width: 500\n    },\n    {\n      title: \"Action\",\n      key: \"action\",\n      render: (record: Record) => {\n        return (\n          <React.Fragment>\n            <Button\n              type=\"primary\"\n              ghost={true}\n              onClick={this.toggleDatasetActivation(record.name)}\n            >\n              {record.isActive ? \"deactivate\" : \"activate\"}\n            </Button>\n            <Button\n              type=\"danger\"\n              ghost={true}\n              className=\"margin-left-8\"\n              onClick={this.removeDataset(record.name)}\n            >\n              Delete\n            </Button>\n          </React.Fragment>\n        );\n      }\n    }\n  ];\n\n  public componentDidMount = () => {\n    // send request to server to reload the data\n    this.props.dispatch(datasetList());\n  };\n\n  public render() {\n    const { getFieldDecorator } = this.props.form;\n    return (\n      <React.Fragment>\n        <Row gutter={8}>\n          <Col span={24}>\n            {this.props.datasetTbl.activeDataset !== null && (\n              <Alert\n                type=\"success\"\n                message={\n                  <div style={{ minHeight: 35 }}>\n                    <div style={{ float: \"right\" }}>\n                      <div style={{ display: \"inline-block\" }}>\n                        <Upload\n                          beforeUpload={this.uploadRepr}\n                          showUploadList={false}\n                        >\n                          <Button>\n                            <Icon type=\"upload\" /> Upload D-Repr\n                          </Button>\n                        </Upload>\n                      </div>\n                      <Button\n                        onClick={this.downloadRepr}\n                        className=\"margin-left-8\"\n                      >\n                        Download D-Repr\n                      </Button>\n                      <Dropdown\n                        overlay={\n                          <Menu onClick={this.downloadData}>\n                            <Menu.Item key=\"ttl\">Turtle</Menu.Item>\n                          </Menu>\n                        }\n                        className=\"margin-left-8\"\n                      >\n                        <Button>\n                          Download data as <Icon type=\"down\" />\n                        </Button>\n                      </Dropdown>\n                      <Button className=\"margin-left-8\" type=\"primary\" onClick={this.finishModeling}>\n                        Finish\n                      </Button>\n                      <Button className=\"margin-left-8\" type=\"danger\">\n                        Remove\n                      </Button>\n                    </div>\n                    <label style={{ fontSize: 16, fontWeight: 600 }}>\n                      Active dataset: {this.props.datasetTbl.activeDataset}\n                    </label>\n                  </div>\n                }\n              />\n            )}\n          </Col>\n        </Row>\n        <Row gutter={8} className=\"margin-top-8\">\n          <Col span={24}>\n            <Table\n              columns={this.datasetColumns}\n              dataSource={_.map(this.props.datasetTbl.datasets, d => {\n                return {\n                  ...d,\n                  key: d.name,\n                  isActive: d.name === this.props.datasetTbl.activeDataset\n                };\n              })}\n              bordered={true}\n            />\n          </Col>\n        </Row>\n        <Row gutter={8}>\n          <Col span={24}>\n            <Form layout=\"inline\" onSubmit={this.createDataset}>\n              <Form.Item label=\"Name\">\n                {getFieldDecorator(\"name\", {\n                  rules: [\n                    { required: true, message: \"Please provide a dataset name\" }\n                  ]\n                })(<Input placeholder=\"name\" />)}\n              </Form.Item>\n              <Form.Item label=\"Description\">\n                {getFieldDecorator(\"description\")(\n                  <Input placeholder=\"description\" />\n                )}\n              </Form.Item>\n              <Form.Item>\n                <Button type=\"primary\" htmlType=\"submit\">\n                  Create Dataset\n                </Button>\n              </Form.Item>\n            </Form>\n          </Col>\n        </Row>\n      </React.Fragment>\n    );\n  }\n\n  private uploadRepr = (file: UploadFile) => {\n    const formData = new FormData();\n    formData.set(\"repr_file\", file as any);\n\n    this.props.app\n      .post(`/datasets/${this.props.datasetTbl.activeDataset}/repr`, formData)\n      .then(() => {\n        notification.success({\n          message: \"upload success\"\n        });\n\n        // TODO: fix me! fetch new dataset\n        return this.props.dispatch(\n          datasetSelect(this.props.datasetTbl.activeDataset as string)\n        );\n      })\n      .catch(() => {\n        notification.error({\n          message: \"upload failed\"\n        });\n      });\n\n    return false;\n  };\n\n  private downloadRepr = () => {\n    this.props.app\n      .get(`/datasets/${this.props.datasetTbl.activeDataset}/repr`)\n      .then(resp => {\n        return new Blob([resp.data]);\n      })\n      .then(blob => {\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement(\"a\");\n        a.style.display = \"none\";\n        a.href = url;\n        // the filename you want\n        a.download = `${this.props.datasetTbl.activeDataset}.model.yml`;\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n      })\n      .catch(() => {\n        notification.error({\n          message: \"Error while downloading a file\"\n        });\n      });\n  };\n\n  private downloadData = (params: ClickParam) => {\n    if (params.key === \"ttl\") {\n      this.props.app\n        .get(`/datasets/${this.props.datasetTbl.activeDataset}/data`)\n        .then(resp => {\n          return new Blob([resp.data]);\n        })\n        .then(blob => {\n          const url = window.URL.createObjectURL(blob);\n          const a = document.createElement(\"a\");\n          a.style.display = \"none\";\n          a.href = url;\n          // the filename you want\n          a.download = `${this.props.datasetTbl.activeDataset}.ttl`;\n          document.body.appendChild(a);\n          a.click();\n          window.URL.revokeObjectURL(url);\n        })\n        .catch(() => {\n          notification.error({\n            message: \"Error while downloading a file\"\n          });\n        });\n    } else {\n      notification.error({\n        message: \"Not Implemented Yet\"\n      });\n    }\n  };\n\n  private finishModeling = () => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const notifyUri = urlParams.get(\"on_finish\");\n    if (notifyUri !== null) {\n      window.open(notifyUri, \"_self\");\n    }\n  };\n\n  private createDataset = (e: any) => {\n    e.preventDefault();\n    this.props.form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        return this.props\n          .dispatch(datasetCreate(values.name, values.description))\n          .then(() => {\n            this.props.form.resetFields();\n          });\n      }\n    });\n  };\n\n  private removeDataset = (datasetName: string) => {\n    return () => {\n      this.props.dispatch(datasetRemove(datasetName));\n    };\n  };\n\n  private toggleDatasetActivation = (datasetName: string) => {\n    return () => {\n      if (this.isSelectingDataset) {\n        return;\n      }\n\n      this.isSelectingDataset = true;\n      if (this.props.datasetTbl.activeDataset === datasetName) {\n        this.props.dispatch(datasetDeSelect());\n        this.isSelectingDataset = false;\n      } else {\n        return this.props.dispatch(datasetSelect(datasetName)).then(() => {\n          this.isSelectingDataset = false;\n        });\n      }\n    };\n  };\n}\n\nfunction db2Props(store: DB) {\n  return {\n    datasetTbl: store.datasets,\n    app: store.app\n  };\n}\n\nexport default Form.create({})(\n  connect(db2Props)(injectStyles(styles)(DatasetManager))\n);\n","import * as React from \"react\";\nimport { injectStyles, WithStyles } from \"src/misc/JssInjection\";\nimport { Form, Input, Button, Icon, Upload, Tag, Row, Col, Table } from \"antd\";\nimport { OntologyTbl, DB, AppTbl } from \"src/store/types\";\nimport { connect } from \"react-redux\";\nimport * as _ from \"lodash\";\nimport { Dispatch } from \"redux\";\nimport { FormComponentProps } from \"antd/lib/form\";\nimport { notification } from \"antd\";\nimport { ontologyRemove, ontologyCreate } from \"src/store/actions/ontology\";\n\nconst styles = {\n  uploadBtnContainer: {\n    // float: \"right\" as \"right\"\n  },\n  inputOntologyURIContainer: {\n    overflow: \"hidden\",\n    paddingRight: 8\n  }\n};\n\nconst colors = [\n  \"magenta\",\n  \"red\",\n  \"volcano\",\n  \"orange\",\n  \"gold\",\n  \"green\",\n  \"cyan\",\n  \"blue\",\n  \"geekblue\",\n  \"purple\"\n];\n\ninterface Props extends WithStyles<typeof styles>, FormComponentProps {\n  ontologies: OntologyTbl;\n  dispatch: Dispatch;\n  app: AppTbl;\n}\n\ninterface Record {\n  key: string;\n  color: string;\n  prefix: string;\n  uri: string;\n}\n\nclass SimpleOntologyManager extends React.Component<Props, object> {\n  private ontTableColumns = [\n    {\n      title: \"Prefix\",\n      dataIndex: \"prefix\",\n      render: (prefix: string, record: Record) => {\n        return <Tag color={record.color}>{prefix}</Tag>;\n      }\n    },\n    {\n      title: \"URI\",\n      dataIndex: \"uri\"\n    },\n    {\n      title: \"Action\",\n      key: \"action\",\n      render: (record: { prefix: string; uri: string }) => (\n        <span>\n          <a\n            href=\"javascript:;\"\n            onClick={this.deleteOntology(record.prefix, record.uri)}\n          >\n            Delete\n          </a>\n        </span>\n      )\n    }\n  ];\n\n  public render() {\n    const onts: Record[] = [];\n    const { getFieldDecorator } = this.props.form;\n    for (const prefix in this.props.ontologies) {\n      onts.push({\n        key: prefix,\n        color: colors[onts.length % colors.length],\n        prefix: this.props.ontologies[prefix].prefix,\n        uri: this.props.ontologies[prefix].namespace\n      });\n    }\n\n    return (\n      <React.Fragment>\n        <Row gutter={8}>\n          <Col span={24}>\n            <Table\n              columns={this.ontTableColumns}\n              dataSource={onts}\n              bordered={true}\n            />\n          </Col>\n        </Row>\n        <Row gutter={8}>\n          <Col span={24}>\n            <Form layout=\"inline\" onSubmit={this.createOntology}>\n              <Form.Item label=\"Prefix\">\n                {getFieldDecorator(\"prefix\", {\n                  rules: [\n                    { required: true, message: \"Please provide a prefix\" }\n                  ]\n                })(<Input placeholder=\"prefix\" />)}\n              </Form.Item>\n              <Form.Item label=\"Namespace\">\n                {getFieldDecorator(\"namespace\")(\n                  <Input placeholder=\"namespace\" />\n                )}\n              </Form.Item>\n              <Form.Item label=\"Upload File\">\n                {getFieldDecorator(\"file\")(\n                  <Upload beforeUpload={this.stopUpload}>\n                    <Button>\n                      <Icon type=\"upload\" /> Upload file\n                    </Button>\n                  </Upload>\n                )}\n              </Form.Item>\n              <Form.Item>\n                <Button type=\"primary\" htmlType=\"submit\">\n                  Import Ontology\n                </Button>\n              </Form.Item>\n            </Form>\n          </Col>\n        </Row>\n      </React.Fragment>\n    );\n  }\n\n  private deleteOntology = (prefix: string, uri: string) => {\n    return () => {\n      this.props.dispatch(ontologyRemove(prefix, uri));\n    };\n  };\n\n  private createOntology = (e: any) => {\n    e.preventDefault();\n    this.props.form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        return this.props\n          .dispatch(\n            ontologyCreate(values.file.file, values.prefix, values.namespace)\n          )\n          .then(() => {\n            this.props.form.resetFields();\n          });\n      }\n    });\n  };\n\n  private stopUpload = () => {\n    return false;\n  };\n}\n\nfunction db2Props(store: DB) {\n  return {\n    ontologies: store.ontologies,\n    app: store.app\n  };\n}\n\nexport default Form.create({})(\n  connect(db2Props)(injectStyles(styles)(SimpleOntologyManager))\n);\n","import * as React from \"react\";\nimport { WithStyles, injectStyles } from \"src/misc/JssInjection\";\nimport { UIConfiguration, DB } from \"src/store/types\";\nimport { connect } from \"react-redux\";\nimport { Form, Switch } from \"antd\";\n\nconst styles = {};\n\nconst defaultProps = {};\n\ninterface Props\n  extends WithStyles<typeof styles>,\n    Readonly<typeof defaultProps> {\n  uiConf: UIConfiguration;\n}\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 6 }\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 18 }\n  }\n};\n\nclass Setting extends React.Component<Props, object> {\n  public static defaultProps = defaultProps;\n\n  public render() {\n    return (\n      <Form>\n        <Form.Item label=\"Display maximum one resource\" {...formItemLayout}>\n          <Switch checked={this.props.uiConf.displayMax1Resource} />\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n\nfunction mapDBToProps(store: DB) {\n  return {\n    uiConf: store.uiConf\n  };\n}\n\nexport default connect(mapDBToProps)(injectStyles(styles)(Setting));\n","import { Icon, Layout, Menu } from \"antd\";\nimport { SelectParam } from \"antd/lib/menu\";\nimport * as React from \"react\";\nimport { injectStyles, WithStyles } from \"src/misc/JssInjection\";\nimport { AppTbl } from \"src/store/types\";\nimport DatasetManager from \"./datasets/DatasetManager\";\nimport SimpleOntologyManager from \"./ontology/SimpleOntologyManager\";\nimport Settings from \"./settings/Settings\";\n\nconst styles = {\n  full: {}\n};\n\nconst defaultProps = {\n  clazz: \"full\" as string\n};\n\ninterface Props\n  extends WithStyles<typeof styles>,\n    Readonly<typeof defaultProps> {\n  app: AppTbl;\n}\n\ntype MenuItem = \"settings\" | \"datasets\" | \"ontology\";\n\ninterface State {\n  activeMenu: MenuItem;\n}\n\nclass ControlPanel extends React.Component<Props, State> {\n  public static defaultProps = defaultProps;\n  public state: State = {\n    activeMenu: \"datasets\"\n  };\n\n  public render() {\n    let component;\n    // only show user menu when user hasn't logged in\n    switch (this.state.activeMenu) {\n      case \"settings\":\n        component = <Settings />;\n        break;\n      case \"datasets\":\n        component = <DatasetManager />;\n        break;\n      case \"ontology\":\n        component = <SimpleOntologyManager />;\n        break;\n    }\n\n    return (\n      <Layout style={{ padding: \"10px 0\", background: \"#fff\", height: \"100%\" }}>\n        <Layout.Sider width={200} style={{ background: \"#fff\" }}>\n          <Menu\n            mode=\"inline\"\n            onSelect={this.onChangeMenu}\n            selectedKeys={[this.state.activeMenu]}\n            style={{ height: \"100%\" }}\n          >\n            <Menu.Item key=\"datasets\">\n              <Icon type=\"database\" />\n              Datasets\n            </Menu.Item>\n            <Menu.Item key=\"ontology\">\n              <Icon type=\"cluster\" />\n              Ontology\n            </Menu.Item>\n            <Menu.Item key=\"settings\">\n              <Icon type=\"setting\" />\n              Settings\n            </Menu.Item>\n          </Menu>\n        </Layout.Sider>\n        <Layout.Content style={{ padding: \"0 10px\" }}>\n          {component}\n        </Layout.Content>\n      </Layout>\n    );\n  }\n\n  private onChangeMenu = (selection: SelectParam) => {\n    this.setState({ activeMenu: selection.key as MenuItem });\n  };\n}\n\nexport default injectStyles(styles)(ControlPanel);\n","import * as React from \"react\";\nimport { ClassId, SemanticModel } from \"src/models\";\nimport { injectStyles, WithStyles } from \"src/misc/JssInjection\";\nimport { Select, Spin, Form } from \"antd\";\nimport axios from \"axios\";\nimport * as _ from \"lodash\";\n\nexport interface StringField {\n  value?: string;\n  validateStatus?: \"error\" | \"success\";\n  errorMsg?: string;\n}\n\nconst defaultProps = {\n  style: {},\n  formItemProps: {}\n};\n\ninterface Props {\n  style: any;\n  formItemProps: any;\n  fieldName: string;\n  value?: string;\n  search: (value: string) => Promise<string[]>;\n}\n\ninterface State {\n  searchResults: string[];\n  isSearching: boolean;\n  field: StringField;\n}\n\nexport class RStringSelector extends React.Component<Props, State> {\n  public static defaultProps = defaultProps;\n\n  constructor(props: Props) {\n    super(props);\n    this.onSearch = _.debounce(this.onSearch, 200);\n\n    this.state = {\n      searchResults: [],\n      isSearching: false,\n      field: { value: props.value }\n    };\n  }\n\n  public validate = (): boolean => {\n    if (this.state.field.validateStatus === undefined) {\n      const field = {\n        value: this.state.field.value,\n        ...this.validateNotEmptyField(this.state.field.value)\n      };\n\n      this.setState({ field });\n      return field.validateStatus === \"success\";\n    }\n    return this.state.field.validateStatus === \"success\";\n  };\n\n  public getValue = () => {\n    return this.state.field.value;\n  };\n\n  public render() {\n    const searchResults = this.state.searchResults.map(o => (\n      <Select.Option key={o}>{o}</Select.Option>\n    ));\n\n    return (\n      <Form.Item\n        label={this.props.fieldName}\n        validateStatus={this.state.field.validateStatus}\n        help={this.state.field.errorMsg}\n        {...this.props.formItemProps}\n      >\n        <Select\n          showSearch={true}\n          value={this.state.field.value}\n          defaultActiveFirstOption={false}\n          notFoundContent={\n            this.state.isSearching ? (\n              <span style={{ marginLeft: 10, marginRight: 10 }}>\n                <Spin size=\"small\" />\n              </span>\n            ) : (\n              <span style={{ marginLeft: 10, marginRight: 10 }}>\n                Not Found..\n              </span>\n            )\n          }\n          showArrow={false}\n          style={this.props.style}\n          onSearch={this.onSearch}\n          onChange={this.onChangeValue}\n        >\n          {searchResults}\n        </Select>\n      </Form.Item>\n    );\n  }\n\n  private onSearch = (value: string) => {\n    this.setState({ isSearching: true });\n    this.props.search(value).then((searchResults: string[]) => {\n      this.setState({\n        searchResults,\n        isSearching: false\n      });\n    });\n  };\n\n  private onChangeValue = (value: string) => {\n    this.setState({\n      field: { value, ...this.validateNotEmptyField(value) }\n    });\n  };\n\n  private validateNotEmptyField = (val?: string) => {\n    if (val !== undefined && val.length > 0) {\n      return {\n        validateStatus: \"success\" as \"success\",\n        errorMsg: undefined\n      };\n    }\n\n    return {\n      validateStatus: \"error\" as \"error\",\n      errorMsg: \"Cannot be empty\"\n    };\n  };\n}\n\nexport class OntClassSelector extends RStringSelector {\n  public static defaultProps = {\n    search: (query: string) => {\n      return axios\n        .get(\"/ontologies/search\", {\n          params: { a: \"class\", q: query }\n        })\n        .then((resp: any) => resp.data.results);\n    },\n    ...defaultProps\n  };\n}\n\nexport class OntPredicateSelector extends RStringSelector {\n  public static defaultProps = {\n    search: (query: string) => {\n      return axios\n        .get(\"/ontologies/search\", {\n          params: { a: \"property\", q: query }\n        })\n        .then((resp: any) => resp.data.results);\n    },\n    ...defaultProps\n  };\n}\n","import * as React from \"react\";\nimport { ClassId, SemanticModel } from \"src/models\";\nimport { injectStyles, WithStyles } from \"src/misc/JssInjection\";\nimport { Select, Spin, Form } from \"antd\";\nimport axios from \"axios\";\nimport * as _ from \"lodash\";\n\nconst styles = {};\n\nexport interface ClassIdField {\n  value?: ClassId;\n  validateStatus?: \"error\" | \"success\";\n  errorMsg?: string;\n}\n\ninterface Props extends WithStyles<typeof styles> {\n  sm: SemanticModel;\n  style?: any;\n  classId?: ClassId;\n}\ninterface State {\n  searchOntClassResults: ClassId[];\n  searchingOntClasses: boolean;\n  classId: ClassIdField;\n}\n\nexport class ClassIdSelector extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.onSearchOntClass = _.debounce(this.onSearchOntClass, 200);\n\n    this.state = {\n      searchOntClassResults: [],\n      searchingOntClasses: false,\n      classId: { value: props.classId }\n    };\n  }\n\n  public validate = (): boolean => {\n    if (this.state.classId.validateStatus === undefined) {\n      const classId = {\n        value: this.state.classId.value,\n        ...this.validateClassIdField(this.state.classId.value)\n      };\n      this.setState({ classId });\n\n      return classId.validateStatus === \"success\";\n    }\n\n    return this.state.classId.validateStatus === \"success\";\n  };\n\n  public getValue = (): ClassId | undefined => {\n    return this.state.classId.value;\n  };\n\n  public render() {\n    const searchOntClassResults = this.state.searchOntClassResults.map(\n      (o, i) => {\n        let isNew = i === this.state.searchOntClassResults.length - 1;\n        if (\n          i < this.state.searchOntClassResults.length - 1 &&\n          this.state.searchOntClassResults[i + 1].shortURI !== o.shortURI\n        ) {\n          isNew = true;\n        }\n\n        if (isNew) {\n          return (\n            <Select.Option key={o.serialize2str()}>\n              <i>{o.label}</i>\n            </Select.Option>\n          );\n        }\n\n        return <Select.Option key={o.serialize2str()}>{o.label}</Select.Option>;\n      }\n    );\n\n    return (\n      <Form.Item\n        label=\"ClassId\"\n        validateStatus={this.state.classId.validateStatus}\n        help={this.state.classId.errorMsg}\n      >\n        <Select\n          labelInValue={true}\n          showSearch={true}\n          value={\n            this.state.classId.value\n              ? { key: this.state.classId.value.serialize2str() }\n              : undefined\n          }\n          defaultActiveFirstOption={false}\n          notFoundContent={\n            this.state.searchingOntClasses ? (\n              <span style={{ marginLeft: 10, marginRight: 10 }}>\n                <Spin size=\"small\" />\n              </span>\n            ) : (\n              <span style={{ marginLeft: 10, marginRight: 10 }}>\n                Not Found..\n              </span>\n            )\n          }\n          showArrow={false}\n          style={this.props.style}\n          onSearch={this.onSearchOntClass}\n          onChange={this.onChangeOntClassValue}\n        >\n          {searchOntClassResults}\n        </Select>\n      </Form.Item>\n    );\n  }\n\n  private onSearchOntClass = (value: string) => {\n    this.setState({ searchingOntClasses: true });\n    axios\n      .get(\"/ontologies/search\", { params: { a: \"class\", q: value } })\n      .then((resp: any) => {\n        const searchOntClassResults = [];\n        for (const shortURI of resp.data.results) {\n          const existingNodes = this.props.sm.getClassNodesByShortURI(shortURI);\n\n          if (existingNodes.length > 0) {\n            for (const n of existingNodes) {\n              searchOntClassResults.push(n.classId!);\n            }\n\n            searchOntClassResults.push(\n              existingNodes[existingNodes.length - 1].classId!.next()\n            );\n          } else {\n            searchOntClassResults.push(new ClassId(shortURI, 1));\n          }\n        }\n\n        this.setState({\n          searchOntClassResults,\n          searchingOntClasses: false\n        });\n      });\n  };\n\n  private onChangeOntClassValue = (rval: any) => {\n    const value = ClassId.deserialize4str(rval.key);\n    this.setState({\n      classId: { value, ...this.validateClassIdField(value) }\n    });\n  };\n\n  private validateClassIdField = (val?: ClassId) => {\n    if (val !== undefined && val instanceof ClassId) {\n      return {\n        validateStatus: \"success\" as \"success\",\n        errorMsg: undefined\n      };\n    }\n\n    return {\n      validateStatus: \"error\" as \"error\",\n      errorMsg: \"Cannot be empty\"\n    };\n  };\n}\n\nexport default injectStyles(styles)(ClassIdSelector);\n","import * as React from \"react\";\nimport { injectStyles, WithStyles } from \"src/misc/JssInjection\";\nimport { Variable, SemanticModel, DATA_TYPES, DataType } from \"src/models\";\nimport { Card, Select, Input, Button, Form, Spin, Tooltip } from \"antd\";\nimport * as _ from \"lodash\";\nimport axios from \"axios\";\nimport { ClassId } from \"src/models/ClassId\";\nimport { OntPredicateSelector } from \"./RStringSelector\";\nimport WClassIdSelector, { ClassIdSelector } from \"./ClassIdSelector\";\nimport memoizeOne from \"memoize-one\";\n\nconst styles = {};\n\nconst defaultProps = {\n  onCancel: () => {\n    /* do nothing */\n  },\n  onDiscard: (variableId: string) => {\n    /* do nothing */\n  },\n  onSave: (formResult: SemanticTypeForm) => {\n    /* do nothing */\n  }\n};\n\ninterface Props extends WithStyles<typeof styles> {\n  variable: Variable;\n  semanticModel: SemanticModel;\n  onDiscard: (variableId: string) => void;\n  onCancel: () => void;\n  onSave: (formResult: SemanticTypeForm) => void;\n}\n\ninterface State {\n  dataType: DataType;\n}\n\nexport interface SemanticTypeForm {\n  ontClass: ClassId;\n  ontPredicate: string;\n  dataType: DataType;\n  variableId: string;\n}\n\nclass SetSemanticTypeForm extends React.Component<Props, State> {\n  public static defaultProps = defaultProps;\n  public state: State = {\n    dataType: \"xsd:string\"\n  };\n  private classIdSelector: React.RefObject<ClassIdSelector>;\n  private ontPredicateSelector: React.RefObject<OntPredicateSelector>;\n\n  private getSType = memoizeOne((sm: SemanticModel, varId: string) =>\n    this.getSType_(sm, varId)\n  );\n\n  constructor(props: Props) {\n    super(props);\n    this.classIdSelector = React.createRef();\n    this.ontPredicateSelector = React.createRef();\n  }\n\n  public render() {\n    const stype = this.getSType(\n      this.props.semanticModel,\n      this.props.variable.id\n    );\n    const dataTypes = DATA_TYPES.map(o => (\n      <Select.Option key={o}>{o}</Select.Option>\n    ));\n\n    return (\n      <Card className=\"margin-top-8\">\n        <Form layout=\"inline\">\n          <WClassIdSelector\n            innerRef={this.classIdSelector}\n            key={stype.ontClass ? stype.ontClass.id : undefined}\n            sm={this.props.semanticModel}\n            classId={stype.ontClass}\n            style={{ minWidth: 200 }}\n          />\n          <OntPredicateSelector\n            ref={this.ontPredicateSelector}\n            style={{ minWidth: 200 }}\n            value={stype.ontPredicate}\n            fieldName=\"Predicate\"\n          />\n          <Form.Item label=\"Type\">\n            <Select\n              value={this.state.dataType}\n              showSearch={true}\n              style={{ minWidth: 120 }}\n              onChange={this.onDataTypeChange}\n            >\n              {dataTypes}\n            </Select>\n          </Form.Item>\n          <Form.Item>\n            {this.props.semanticModel.hasNode(this.props.variable.id) ? (\n              <Button\n                className=\"margin-right-8\"\n                type=\"danger\"\n                onClick={this.onDiscard}\n              >\n                Dismiss\n              </Button>\n            ) : null}\n            <Button className=\"margin-right-8\" onClick={this.props.onCancel}>\n              Cancel\n            </Button>\n            <Button type=\"primary\" onClick={this.onSave}>\n              Save\n            </Button>\n          </Form.Item>\n        </Form>\n      </Card>\n    );\n  }\n\n  private getSType_ = (sm: SemanticModel, varId: string) => {\n    const stype = sm.getDataNodeSemanticType(varId);\n    if (stype === undefined) {\n      return { ontClass: undefined, ontPredicate: undefined };\n    }\n\n    return stype;\n  };\n\n  private onDiscard = () => {\n    this.props.onDiscard(this.props.variable.id);\n  };\n\n  private onSave = () => {\n    if (\n      !this.classIdSelector.current!.validate() ||\n      !this.ontPredicateSelector.current!.validate()\n    ) {\n      return;\n    }\n\n    this.props.onSave({\n      ontClass: this.classIdSelector.current!.getValue()!,\n      ontPredicate: this.ontPredicateSelector.current!.getValue()!,\n      dataType: this.state.dataType,\n      variableId: this.props.variable.id\n    });\n  };\n\n  private onDataTypeChange = (value: DataType) => {\n    this.setState({\n      dataType: value\n    });\n  };\n}\n\nexport default injectStyles(styles)(SetSemanticTypeForm);\n","import * as React from \"react\";\nimport { ClassId, SemanticModel } from \"src/models\";\nimport { injectStyles, WithStyles } from \"src/misc/JssInjection\";\nimport { Select, Spin, Form } from \"antd\";\nimport axios from \"axios\";\nimport * as _ from \"lodash\";\n\nconst defaultProps = {\n  style: {},\n  formItemProps: {},\n  forbiddenNodes: new Set(),\n  filterDataNode: false\n};\n\ninterface Field {\n  value?: string;\n  validateStatus?: \"error\" | \"success\";\n  errorMsg?: string;\n}\n\ninterface Props {\n  sm: SemanticModel;\n  style: any;\n  formItemProps: any;\n  fieldName: string;\n  value?: string;\n  forbiddenNodes: Set<string>;\n  filterDataNode?: boolean;\n}\n\ninterface State {\n  nodeId: Field;\n}\n\nexport class NodeSelector extends React.Component<Props, State> {\n  public static defaultProps = defaultProps;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      nodeId: { value: props.value }\n    };\n  }\n\n  public validate = (): boolean => {\n    if (this.state.nodeId.validateStatus === undefined) {\n      const nodeId = {\n        value: this.state.nodeId.value,\n        ...this.validateNotInForbiddenList(this.state.nodeId.value)\n      };\n\n      this.setState({ nodeId });\n      return nodeId.validateStatus === \"success\";\n    }\n    return this.state.nodeId.validateStatus === \"success\";\n  };\n\n  public getValue = (): string | undefined => {\n    return this.state.nodeId.value;\n  };\n\n  public render() {\n    const nodes = [];\n\n    if (this.props.filterDataNode) {\n      for (const n of this.props.sm.iterClassNodes()) {\n        nodes.push(<Select.Option key={n.id}>{n.id}</Select.Option>);\n      }\n    } else {\n      for (const n of this.props.sm.iterNodes()) {\n        nodes.push(<Select.Option key={n.id}>{n.id}</Select.Option>);\n      }\n    }\n\n    return (\n      <Form.Item label={this.props.fieldName} {...this.props.formItemProps}>\n        <Select\n          value={this.state.nodeId.value}\n          showSearch={true}\n          style={this.props.style}\n          onChange={this.onChangeValue}\n        >\n          {nodes}\n        </Select>\n      </Form.Item>\n    );\n  }\n\n  private onChangeValue = (value: string) => {\n    this.setState({\n      nodeId: { value, ...this.validateNotInForbiddenList(value) }\n    });\n  };\n\n  private validateNotInForbiddenList = (val?: string) => {\n    if (val !== undefined && !this.props.forbiddenNodes.has(val)) {\n      return {\n        validateStatus: \"success\" as \"success\",\n        errorMsg: undefined\n      };\n    }\n\n    return {\n      validateStatus: \"error\" as \"error\",\n      errorMsg: \"Cannot select nodes in forbidden list\"\n    };\n  };\n}\n","import * as React from \"react\";\nimport { Row, Col, Button } from \"antd\";\nimport { SemanticModel, ClassId } from \"src/models\";\nimport { OntPredicateSelector } from \"../RStringSelector\";\nimport { NodeSelector } from \"../NodeSelector\";\nimport { Dispatch } from \"redux\";\nimport { smAddEdge, smUpdateEdge, smRemoveEdge } from \"src/store/actions\";\n\ninterface Props {\n  sm: SemanticModel;\n  currentNodeId: string;\n  isIncomingEdge: boolean;\n  otherNodeId?: string;\n  predicate?: string;\n\n  edgeId?: string;\n  dispatch: Dispatch;\n}\n\nexport class InlineEdgeForm extends React.Component<Props, object> {\n  private nodeSelector: React.RefObject<NodeSelector>;\n  private predicateSelector: React.RefObject<OntPredicateSelector>;\n\n  constructor(props: Props) {\n    super(props);\n    this.nodeSelector = React.createRef();\n    this.predicateSelector = React.createRef();\n  }\n\n  public render() {\n    const node = this.props.sm.getNodeById(this.props.currentNodeId);\n    let controller;\n    if (this.props.otherNodeId === undefined) {\n      controller = (\n        <Button className=\"margin-top-4\" onClick={this.onCreateEdge}>\n          Add\n        </Button>\n      );\n    } else {\n      controller = (\n        <React.Fragment>\n          <Button\n            className=\"margin-top-4 margin-right-8\"\n            type=\"danger\"\n            onClick={this.onRemoveEdge}\n          >\n            Remove\n          </Button>\n          <Button className=\"margin-top-4\" onClick={this.onUpdateEdge}>\n            Update\n          </Button>\n        </React.Fragment>\n      );\n    }\n\n    return (\n      <Row gutter={8}>\n        <Col span={9}>\n          <NodeSelector\n            ref={this.nodeSelector}\n            sm={this.props.sm}\n            fieldName=\"\"\n            style={{ width: \"100%\" }}\n            forbiddenNodes={new Set([node.id])}\n            filterDataNode={true}\n            value={this.props.otherNodeId}\n          />\n        </Col>\n        <Col span={9}>\n          <OntPredicateSelector\n            key=\"new\"\n            fieldName=\"\"\n            ref={this.predicateSelector}\n            style={{ width: \"100%\" }}\n            value={this.props.predicate}\n          />\n        </Col>\n        <Col span={6}>{controller}</Col>\n      </Row>\n    );\n  }\n\n  private onCreateEdge = () => {\n    if (!this.hasData()) {\n      return;\n    }\n\n    const [sourceId, targetId] = this.getSourceAndTarget();\n    this.props.dispatch(smAddEdge(sourceId, this.getPredicate()!, targetId));\n  };\n\n  private onUpdateEdge = () => {\n    if (!this.hasData()) {\n      return;\n    }\n\n    const [sourceId, targetId] = this.getSourceAndTarget();\n    this.props.dispatch(\n      smUpdateEdge(this.props.edgeId!, sourceId, this.getPredicate()!, targetId)\n    );\n  };\n\n  private onRemoveEdge = () => {\n    this.props.dispatch(smRemoveEdge(this.props.edgeId!));\n  };\n\n  private hasData = (): boolean => {\n    return (\n      this.getPredicate() !== undefined && this.getOtherNodeId() !== undefined\n    );\n  };\n\n  private getPredicate(): string | undefined {\n    if (this.predicateSelector.current) {\n      return this.predicateSelector.current.getValue();\n    }\n    return undefined;\n  }\n\n  private getOtherNodeId(): string | undefined {\n    if (this.nodeSelector.current) {\n      return this.nodeSelector.current.getValue();\n    }\n    return undefined;\n  }\n\n  private getSourceAndTarget(): [ClassId, ClassId | string] {\n    const otherNode = this.props.sm.getNodeById(this.getOtherNodeId()!);\n    const currentNode = this.props.sm.getNodeById(this.props.currentNodeId);\n\n    let sourceId;\n    let targetId;\n    if (this.props.isIncomingEdge) {\n      sourceId = otherNode.classId!;\n      targetId = currentNode.classId!;\n    } else {\n      sourceId = currentNode.classId!;\n      // otherNode is always class node because of the logic, but still do unnecessary checking\n      targetId = otherNode.isClassNode() ? otherNode.classId! : otherNode.id;\n    }\n    return [sourceId, targetId];\n  }\n}\n","import * as React from \"react\";\nimport { injectStyles, WithStyles } from \"src/misc/JssInjection\";\nimport { Variable, SemanticModel, ClassId } from \"src/models\";\nimport {\n  Modal,\n  Button,\n  Form,\n  Select,\n  Spin,\n  Row,\n  Col,\n  Menu,\n  Divider\n} from \"antd\";\nimport { OntClassSelector, OntPredicateSelector } from \"../RStringSelector\";\nimport { SelectParam } from \"antd/lib/menu\";\n\nimport { Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { NodeSelector } from \"../NodeSelector\";\nimport { BugError } from \"src/misc/Exception\";\nimport { InlineEdgeForm } from \"./InlineEdgeForm\";\nimport { smRemoveNode } from \"src/store/actions\";\n\nconst styles = {};\nconst formItemProps = {\n  labelCol: { span: 6 },\n  wrapperCol: { span: 18 }\n};\n\ninterface Props extends WithStyles<typeof styles> {\n  sm: SemanticModel;\n  nodeId?: string;\n  visible: boolean;\n  onHide: () => void;\n  dispatch: Dispatch;\n}\n\ninterface State {\n  activeMenu: MenuItem;\n}\n\ntype MenuItem = \"OntClass\" | \"OutgoingEdge\" | \"IncomingEdge\";\n\nclass EditNodeModal extends React.Component<Props, State> {\n  private ontClassSelector: React.RefObject<OntClassSelector>;\n\n  constructor(props: Props) {\n    super(props);\n    this.ontClassSelector = React.createRef();\n    this.state = {\n      activeMenu: \"OntClass\"\n    };\n  }\n\n  public render() {\n    if (this.props.nodeId === undefined) {\n      return null;\n    }\n\n    const node = this.props.sm.getNodeById(this.props.nodeId);\n    if (!node.isClassNode()) {\n      throw new BugError(\n        \"EditNodeModal component can only use to edit class node\"\n      );\n    }\n\n    let component = null;\n\n    if (this.state.activeMenu === \"OntClass\") {\n      component = (\n        <OntClassSelector\n          ref={this.ontClassSelector}\n          key={this.props.nodeId}\n          style={{ width: \"100%\" }}\n          fieldName=\"\"\n          value={this.props.sm.getNodeById(this.props.nodeId).classId!.shortURI}\n          formItemProps={formItemProps}\n        />\n      );\n    } else {\n      const isIncomingMenu = this.state.activeMenu === \"IncomingEdge\";\n      const edges = isIncomingMenu\n        ? this.props.sm.iterIncomingEdges(node.id)\n        : this.props.sm.iterOutgoingEdges(node.id);\n      component = [];\n      component.push(\n        <InlineEdgeForm\n          key=\"new\"\n          dispatch={this.props.dispatch}\n          isIncomingEdge={isIncomingMenu}\n          sm={this.props.sm}\n          currentNodeId={node.id}\n        />\n      );\n      for (const e of edges) {\n        component.push(\n          <InlineEdgeForm\n            key={e.id}\n            edgeId={e.id}\n            dispatch={this.props.dispatch}\n            isIncomingEdge={isIncomingMenu}\n            sm={this.props.sm}\n            currentNodeId={node.id}\n            otherNodeId={isIncomingMenu ? e.sourceId : e.targetId}\n            predicate={e.predicate}\n          />\n        );\n      }\n    }\n\n    return (\n      <Modal\n        title=\"Edit Node\"\n        visible={this.props.visible}\n        onCancel={this.onCancel}\n        width=\"80%\"\n        footer={[\n          <Button type=\"danger\" key=\"discard\" onClick={this.onDiscard}>\n            Remove\n          </Button>,\n          <Button key=\"back\" onClick={this.onCancel}>\n            Close\n          </Button>\n        ]}\n      >\n        <Row gutter={8}>\n          <Col span={6}>\n            <Menu\n              mode=\"inline\"\n              onSelect={this.onChangeMenu}\n              defaultSelectedKeys={[\"OntClass\"]}\n            >\n              <Menu.Item key=\"OntClass\">Ontology Class</Menu.Item>\n              <Menu.Item key=\"IncomingEdge\">Incoming Edges</Menu.Item>\n              <Menu.Item key=\"OutgoingEdge\">Outgoing Edges</Menu.Item>\n            </Menu>\n          </Col>\n          <Col span={18}>{component}</Col>\n        </Row>\n      </Modal>\n    );\n  }\n\n  private onChangeMenu = (selection: SelectParam) => {\n    this.setState({ activeMenu: selection.key as MenuItem });\n  };\n\n  private onCancel = (e: any) => {\n    this.props.onHide();\n  };\n\n  private onDiscard = (e: any) => {\n    this.props.onHide();\n    this.props.dispatch(smRemoveNode(this.props.nodeId!));\n  };\n}\n\nexport default connect()(injectStyles(styles)(EditNodeModal));\n","import * as React from \"react\";\nimport { injectStyles, WithStyles } from \"src/misc/JssInjection\";\nimport { Variable, SemanticModel, ClassId } from \"src/models\";\nimport { Modal, Button, Form, Select, Spin, Row, Col, Mention } from \"antd\";\nimport WClassIdSelector, { ClassIdSelector } from \"./ClassIdSelector\";\nimport { OntClassSelector, OntPredicateSelector } from \"./RStringSelector\";\n\nimport { Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { NodeSelector } from \"./NodeSelector\";\nimport { smUpdateEdge, smAddEdge, smRemoveEdge } from \"src/store/actions\";\n\nconst styles = {};\nconst formItemProps = {\n  labelCol: { span: 6 },\n  wrapperCol: { span: 18 }\n};\n\ninterface Props extends WithStyles<typeof styles> {\n  sm: SemanticModel;\n  edgeId?: string;\n  sourceId?: string;\n  targetId?: string;\n  visible: boolean;\n  onHide: () => void;\n  dispatch: Dispatch;\n}\n\nclass EditEdgeModal extends React.Component<Props, object> {\n  private ontPredicateSelector: React.RefObject<OntPredicateSelector>;\n\n  constructor(props: Props) {\n    super(props);\n    this.ontPredicateSelector = React.createRef();\n    this.state = {};\n  }\n\n  get source() {\n    return this.props.sm.getNodeById(\n      this.props.edgeId !== undefined\n        ? this.props.sm.getEdgeById(this.props.edgeId!).sourceId\n        : this.props.sourceId!\n    ).classId!;\n  }\n\n  get target() {\n    return this.props.sm.getNodeById(\n      this.props.edgeId !== undefined\n        ? this.props.sm.getEdgeById(this.props.edgeId!).targetId\n        : this.props.targetId!\n    ).classId!;\n  }\n\n  public render() {\n    // tslint:disable-next-line:one-variable-per-declaration\n    let sourceId, predicate, targetId;\n    if (this.props.edgeId === undefined) {\n      if (this.props.sourceId === undefined) {\n        return null;\n      }\n\n      predicate = undefined;\n      sourceId = this.props.sourceId;\n      targetId = this.props.targetId;\n    } else {\n      const edge = this.props.sm.getEdgeById(this.props.edgeId);\n      predicate = edge.predicate;\n      sourceId = edge.sourceId;\n      targetId = edge.targetId;\n    }\n\n    const footer = [];\n    if (this.props.edgeId !== undefined) {\n      footer.push(\n        <Button type=\"danger\" key=\"discard\" onClick={this.onDiscard}>\n          Remove\n        </Button>\n      );\n    }\n    footer.push(\n      ...[\n        <Button key=\"back\" onClick={this.onCancel}>\n          Cancel\n        </Button>,\n        <Button type=\"primary\" key=\"save\" onClick={this.onSave}>\n          Save\n        </Button>\n      ]\n    );\n\n    return (\n      <Modal\n        title=\"Edit Edge\"\n        visible={this.props.visible}\n        onOk={this.onSave}\n        onCancel={this.onCancel}\n        width=\"60%\"\n        footer={footer}\n      >\n        <Form>\n          <Form.Item label=\"Source\" {...formItemProps}>\n            {sourceId}\n          </Form.Item>\n          <Form.Item label=\"Target\" {...formItemProps}>\n            {targetId}\n          </Form.Item>\n          <OntPredicateSelector\n            ref={this.ontPredicateSelector}\n            style={{ width: \"100%\" }}\n            value={predicate}\n            fieldName=\"Predicate\"\n            formItemProps={formItemProps}\n          />\n        </Form>\n      </Modal>\n    );\n  }\n\n  private onSave = (e: any) => {\n    if (\n      !this.ontPredicateSelector.current ||\n      !this.ontPredicateSelector.current.validate()\n    ) {\n      return;\n    }\n\n    this.props.onHide();\n    if (this.props.edgeId !== undefined) {\n      this.props.dispatch(\n        smUpdateEdge(\n          this.props.edgeId,\n          this.source,\n          this.getEditingPredicate()!,\n          this.target\n        )\n      );\n    } else {\n      this.props.dispatch(\n        smAddEdge(this.source, this.getEditingPredicate()!, this.target)\n      );\n    }\n  };\n\n  private onCancel = (e: any) => {\n    this.props.onHide();\n  };\n\n  private onDiscard = (e: any) => {\n    this.props.onHide();\n    this.props.dispatch(smRemoveEdge(this.props.edgeId!));\n  };\n\n  private getEditingPredicate = () => {\n    if (this.ontPredicateSelector.current) {\n      return this.ontPredicateSelector.current.getValue();\n    }\n    return undefined;\n  };\n}\n\nexport default connect()(injectStyles(styles)(EditEdgeModal));\n","import * as React from \"react\";\nimport { injectStyles, WithStyles } from \"src/misc/JssInjection\";\nimport { connect } from \"react-redux\";\nimport { DB, VariableTbl } from \"src/store/types\";\nimport VariableList from \"../layout/VariableList\";\nimport * as _ from \"lodash\";\nimport { Card, Row, Divider, Form, Input, Button, Select } from \"antd\";\nimport memoizeOne from \"memoize-one\";\nimport * as cytoscape from \"cytoscape\";\nimport CytoscapeGraph from \"../misc/graph/CytoscapeGraph\";\nimport SetSemanticTypeForm, { SemanticTypeForm } from \"./SetSemanticTypeForm\";\nimport { SemanticModel, Node } from \"src/models\";\nimport { Dispatch } from \"redux\";\nimport { smAddDataNode, smAddEdge } from \"src/store/actions\";\nimport { smRemoveNode } from \"src/store/actions/semanticModel\";\nimport EditNodeModal from \"./EditNodeModal\";\nimport UpsertEdgeModal from \"./UpsertEdgeModal\";\nimport { string } from \"prop-types\";\n\nconst styles = {};\n\ninterface Props extends WithStyles<typeof styles> {\n  variables: VariableTbl;\n  semanticModel: SemanticModel;\n  dispatch: Dispatch;\n}\n\ninterface State {\n  editingVariableId: string | undefined;\n  showEditNodeForm: undefined | { nodeId: string };\n  upsertEdgeForm: {\n    isVisible: boolean;\n    edgeId?: string;\n    sourceId?: string;\n    targetId?: string;\n  };\n}\n\nconst cytoscapeSMGraphStyles = [\n  {\n    selector: \"node[label]\",\n    style: {\n      label: \"data(label)\",\n      \"text-halign\": \"center\",\n      \"text-valign\": \"center\",\n      width: \"label\",\n      height: \"label\"\n    }\n  },\n  {\n    selector: 'node[type=\"datanode\"]',\n    style: {\n      backgroundColor: \"#FED530\",\n      shape: \"rectangle\",\n      padding: \"10px\"\n    } as any\n  },\n  {\n    selector: 'node[type=\"classnode\"]',\n    style: {\n      backgroundColor: \"#D3D3D3\",\n      padding: \"10px\"\n    } as any\n  },\n  {\n    selector: \"edge[label]\",\n    style: {\n      width: 2,\n      label: \"data(label)\",\n      \"text-background-color\": \"#FFFFFF\",\n      \"text-background-opacity\": 1,\n      \"curve-style\": \"bezier\",\n      \"control-point-step-size\": 75,\n      \"line-color\": \"#A32B2E\",\n      \"target-arrow-color\": \"#A32B2E\",\n      \"target-arrow-shape\": \"triangle\"\n    }\n  }\n];\n\nconst cytoscapeSMGraphLayout = {\n  name: \"breadthfirst\",\n  fit: true,\n  spacingFactor: 0.7,\n  directed: true\n};\n\nclass SemanticModelUI extends React.Component<Props, State> {\n  public state: State = {\n    editingVariableId: undefined,\n    upsertEdgeForm: { isVisible: false },\n    showEditNodeForm: undefined\n  };\n\n  private getHasSTypesVariableIds = memoizeOne((sm: SemanticModel) =>\n    this.getHasSTypesVariableIds_(sm)\n  );\n\n  constructor(props: Props) {\n    super(props);\n  }\n\n  public render() {\n    const nodes = [];\n    const edges = [];\n\n    for (const n of this.props.semanticModel.iterNodes()) {\n      nodes.push({\n        id: n.id,\n        label: n.id,\n        type: n.type\n      });\n    }\n\n    for (const e of this.props.semanticModel.iterEdges()) {\n      edges.push({\n        id: e.id,\n        source: e.sourceId,\n        label: e.predicate,\n        target: e.targetId\n      });\n    }\n\n    let editingVarForm = null;\n    if (this.state.editingVariableId !== undefined) {\n      const v = this.props.variables[this.state.editingVariableId!];\n      editingVarForm = (\n        <SetSemanticTypeForm\n          key={v.id}\n          variable={v}\n          semanticModel={this.props.semanticModel}\n          onSave={this.onSaveSTypeForm}\n          onCancel={this.onCancelSTypeForm}\n          onDiscard={this.onDiscardSTypeForm}\n        />\n      );\n    }\n\n    return (\n      <React.Fragment>\n        <VariableList\n          variables={_.values(this.props.variables)}\n          onVariableClick={this.onVariableClick}\n          selectedVariableId={this.state.editingVariableId}\n          highlightVariableIds={this.getHasSTypesVariableIds(\n            this.props.semanticModel\n          )}\n        />\n        {editingVarForm}\n        <CytoscapeGraph\n          nodes={nodes}\n          edges={edges}\n          title=\"Semantic Model\"\n          styles={cytoscapeSMGraphStyles}\n          layout={cytoscapeSMGraphLayout}\n          enableEdgeDrawingCreation={true}\n          onNodeRightClick={this.onGraphNodeRightClick}\n          onEdgeClick={this.onGraphEdgeClick}\n          canDrawEdgeBetweenNodes={this.canDrawEdgeBetweenNodes}\n          onDrawNewEdgeComplete={this.onDrawNewEdgeComplete}\n        />\n        <EditNodeModal\n          sm={this.props.semanticModel}\n          nodeId={\n            this.state.showEditNodeForm === undefined\n              ? undefined\n              : this.state.showEditNodeForm!.nodeId\n          }\n          visible={this.state.showEditNodeForm !== undefined}\n          onHide={this.hideEditNodeForm}\n        />\n        <UpsertEdgeModal\n          sm={this.props.semanticModel}\n          edgeId={this.state.upsertEdgeForm.edgeId}\n          sourceId={this.state.upsertEdgeForm.sourceId}\n          targetId={this.state.upsertEdgeForm.targetId}\n          visible={this.state.upsertEdgeForm.isVisible}\n          onHide={this.hideEditEdgeForm}\n        />\n      </React.Fragment>\n    );\n  }\n\n  private canDrawEdgeBetweenNodes = (sourceId: string, targetId: string) => {\n    return (\n      sourceId !== targetId &&\n      this.props.semanticModel.hasNode(sourceId) &&\n      this.props.semanticModel.hasNode(targetId) &&\n      this.props.semanticModel.getNodeById(sourceId).isClassNode() &&\n      this.props.semanticModel.getNodeById(targetId).isClassNode()\n    );\n  };\n\n  private onDrawNewEdgeComplete = (sourceId: string, targetId: string) => {\n    this.setState({\n      upsertEdgeForm: {\n        edgeId: undefined,\n        sourceId,\n        targetId,\n        isVisible: true\n      }\n    });\n    return;\n  };\n\n  private onGraphNodeRightClick = (nid: string) => {\n    if (this.props.semanticModel.getNodeById(nid).isClassNode()) {\n      this.setState({ showEditNodeForm: { nodeId: nid } });\n    } else {\n      this.setState({ editingVariableId: nid });\n    }\n  };\n\n  private onGraphEdgeClick = (eid: string) => {\n    this.setState({\n      upsertEdgeForm: {\n        ...this.state.upsertEdgeForm,\n        edgeId: eid,\n        isVisible: true\n      }\n    });\n  };\n\n  private hideEditNodeForm = () => {\n    this.setState({ showEditNodeForm: undefined });\n  };\n\n  private hideEditEdgeForm = () => {\n    this.setState({\n      upsertEdgeForm: {\n        edgeId: undefined,\n        sourceId: undefined,\n        targetId: undefined,\n        isVisible: false\n      }\n    });\n  };\n\n  private onVariableClick = (variableId: string) => {\n    this.setState({ editingVariableId: variableId });\n  };\n\n  private onSaveSTypeForm = (formResult: SemanticTypeForm) => {\n    this.props.dispatch(\n      smAddDataNode(Node.datanode(formResult.variableId, formResult.dataType))\n    );\n    this.props.dispatch(\n      smAddEdge(\n        formResult.ontClass,\n        formResult.ontPredicate,\n        formResult.variableId\n      )\n    );\n    this.setState({ editingVariableId: undefined });\n  };\n\n  private onCancelSTypeForm = () => {\n    this.setState({ editingVariableId: undefined });\n  };\n\n  private onDiscardSTypeForm = (varId: string) => {\n    this.setState({ editingVariableId: undefined });\n    this.props.dispatch(smRemoveNode(varId));\n  };\n\n  private getHasSTypesVariableIds_ = (sm: SemanticModel) => {\n    const dnodeIds = new Set();\n    for (const n of sm.iterDataNodes()) {\n      dnodeIds.add(n.id);\n    }\n    return dnodeIds;\n  };\n}\n\nfunction mapDBToProps(store: DB) {\n  return {\n    variables: store.variables,\n    semanticModel: store.semanticModel\n  };\n}\n\nexport default connect(mapDBToProps)(injectStyles(styles)(SemanticModelUI));\n","import * as React from \"react\";\n\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { DB, AppTbl, SyncStatus } from \"./store/types\";\nimport { WithStyles, injectStyles } from \"src/misc/JssInjection\";\n\nimport { Row, Col, Icon, Form, Button, Checkbox, Input, Alert } from \"antd\";\nimport * as _ from \"lodash\";\nimport { FormComponentProps } from \"antd/lib/form\";\nimport { appLogin } from \"./store/actions\";\n\nconst styles = {\n  loginForm: {\n    marginTop: 50,\n    \"& .login-form\": {\n      marginTop: 10\n    }\n  },\n  loginFormBtn: {\n    width: \"100%\"\n  }\n};\n\ninterface Props extends WithStyles<typeof styles>, FormComponentProps {\n  app: AppTbl;\n  dispatch: Dispatch;\n}\n\ninterface State {\n  errorMessage: string;\n}\n\nclass Login extends React.Component<Props, State> {\n  public state: State = {\n    errorMessage: \"\"\n  };\n\n  public render() {\n    const { getFieldDecorator } = this.props.form;\n\n    return (\n      <Row gutter={8} className={this.props.classes.loginForm}>\n        <Col span={8} offset={8}>\n          {this.state.errorMessage.length > 0 && (\n            <Alert\n              message={this.state.errorMessage}\n              type=\"error\"\n              banner={true}\n              closable={true}\n            />\n          )}\n          <Form\n            onSubmit={this.onLogin}\n            className=\"login-form\"\n            data-testid=\"user-login-form\"\n          >\n            <Form.Item>\n              {getFieldDecorator(\"email\", {\n                rules: [{ required: true, message: \"Please input your Email!\" }]\n              })(\n                <Input\n                  prefix={\n                    <Icon type=\"user\" style={{ color: \"rgba(0,0,0,.25)\" }} />\n                  }\n                  placeholder=\"Email\"\n                  data-testid=\"user-login-form-email\"\n                />\n              )}\n            </Form.Item>\n            <Form.Item>\n              {getFieldDecorator(\"password\", {\n                rules: [\n                  { required: true, message: \"Please input your Password!\" }\n                ]\n              })(\n                <Input\n                  prefix={\n                    <Icon type=\"lock\" style={{ color: \"rgba(0,0,0,.25)\" }} />\n                  }\n                  type=\"password\"\n                  placeholder=\"Password\"\n                  data-testid=\"user-login-form-password\"\n                />\n              )}\n            </Form.Item>\n            <Form.Item>\n              {getFieldDecorator(\"remember\", {\n                valuePropName: \"checked\",\n                initialValue: true\n              })(<Checkbox>Remember me</Checkbox>)}\n              {/* <a className=\"login-form-forgot\" href=\"\">\n                Forgot password\n              </a> */}\n              <Button\n                type=\"primary\"\n                htmlType=\"submit\"\n                className={this.props.classes.loginFormBtn}\n                // className=\"login-form-button margin-left-8\"\n                data-testid=\"user-login-form-login-button\"\n              >\n                Log in\n              </Button>\n            </Form.Item>\n          </Form>\n        </Col>\n      </Row>\n    );\n  }\n\n  private onLogin = (e: { preventDefault: () => void }) => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        this.props\n          .dispatch(appLogin(values.email, values.password))\n          .then(() => {\n            this.setState({ errorMessage: \"\" });\n          })\n          .catch(() => {\n            this.setState({ errorMessage: \"Invalid email or password\" });\n          });\n      }\n    });\n  };\n}\n\nfunction db2props(state: DB) {\n  return {\n    app: state.app\n  };\n}\n\nexport default Form.create({})(connect(db2props)(injectStyles(styles)(Login)));\n","import * as React from \"react\";\nimport \"./App.css\";\nimport \"antd/dist/antd.css\";\n\nimport ResourceUI from \"./components/resources\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"./store/actions\";\nimport { Dispatch } from \"redux\";\nimport { ResourcesTbl, DB, AppTbl, SyncStatus } from \"./store/types\";\nimport LayoutUI from \"./components/layout\";\nimport { MappingUI } from \"./components/mappings\";\n\nimport {\n  Tabs,\n  Row,\n  Col,\n  Icon,\n  Layout,\n  Menu,\n  Breadcrumb,\n  Avatar,\n  Dropdown,\n  notification\n} from \"antd\";\nimport * as _ from \"lodash\";\nimport Dashboard from \"./components/dashboard/Dashboard\";\nimport { SemanticModelUI } from \"./components/semanticModel\";\nimport Login from \"./Login\";\nimport { SelectParam } from \"antd/lib/menu\";\n\ninterface Props {\n  dispatch: Dispatch;\n  app: AppTbl;\n  hasActiveDataset: boolean;\n  hasResources: boolean;\n}\n\ntype MenuItem =\n  | \"resource\"\n  | \"layout\"\n  | \"mapping\"\n  | \"semantic_model\"\n  | \"dashboard\";\n\ninterface State {\n  activeMenu: MenuItem;\n  loaded: boolean;\n}\n\nclass App extends React.Component<Props, State> {\n  public state: State = { activeMenu: \"dashboard\", loaded: false };\n\n  public componentDidMount() {\n    this.props.app.attempt2ReLoggedIn().then((app: AppTbl) => {\n      if (app.isLoggedIn()) {\n        // reload the content\n        this.props\n          .dispatch(actions.appReload(app))\n          .then(() => {\n            this.setState({ loaded: true });\n          })\n          .catch((error: any) => {\n            window.console.error(error);\n            notification.error({\n              message: \"Error while loading application\",\n              description: \"Please try again later\"\n            });\n          });\n      } else {\n        this.setState({ loaded: true });\n      }\n    });\n  }\n\n  public render() {\n    if (!this.state.loaded) {\n      return (\n        <div style={{ textAlign: \"center\", marginTop: 30 }}>\n          <p>Loading</p>\n          <Icon type=\"loading\" style={{ fontSize: \"3em\" }} />\n        </div>\n      );\n    }\n\n    if (!this.props.app.isLoggedIn()) {\n      return <Login />;\n    }\n\n    let sttTab;\n    switch (this.props.app.synchStatus) {\n      case SyncStatus.synched: {\n        sttTab = (\n          <Icon type=\"check-circle\" theme=\"twoTone\" twoToneColor=\"#52c41a\" />\n        );\n        break;\n      }\n      case SyncStatus.synching: {\n        sttTab = <Icon type=\"sync\" spin={true} />;\n        break;\n      }\n      case SyncStatus.error: {\n        sttTab = <Icon type=\"warning\" theme=\"twoTone\" twoToneColor=\"#f5222d\" />;\n        break;\n      }\n      default: {\n        throw new Error(`Invalid sync status ${this.props.app.synchStatus}`);\n      }\n    }\n    sttTab = <span>{sttTab}Dashboard</span>;\n\n    let component = null;\n    switch (this.state.activeMenu) {\n      case \"dashboard\": {\n        component = <Dashboard app={this.props.app} />;\n        break;\n      }\n      case \"resource\": {\n        component = <ResourceUI />;\n        break;\n      }\n      case \"layout\": {\n        component = <LayoutUI />;\n        break;\n      }\n      case \"layout\": {\n        component = <LayoutUI />;\n        break;\n      }\n      case \"mapping\": {\n        component = <MappingUI />;\n        break;\n      }\n      case \"semantic_model\": {\n        component = <SemanticModelUI />;\n        break;\n      }\n    }\n\n    return (\n      <Layout className=\"App\">\n        <Layout.Header\n          style={{ position: \"fixed\", zIndex: 1, width: \"100%\", height: 55 }}\n        >\n          <h1 className=\"logo\">D-Repr</h1>\n          <Menu\n            theme=\"dark\"\n            mode=\"horizontal\"\n            onSelect={this.onChangeMenu}\n            selectedKeys={[this.state.activeMenu]}\n            style={{ lineHeight: \"55px\" }}\n          >\n            <Menu.Item key=\"dashboard\">{sttTab}</Menu.Item>\n            <Menu.Item key=\"resource\" disabled={!this.props.hasActiveDataset}>\n              <Icon type=\"database\" theme=\"filled\" />\n              Resources\n            </Menu.Item>\n            <Menu.Item key=\"layout\" disabled={!this.props.hasResources}>\n              <span>\n                <Icon type=\"layout\" theme=\"filled\" />\n                Attributes\n              </span>\n            </Menu.Item>\n            <Menu.Item key=\"mapping\" disabled={!this.props.hasResources}>\n              <span>\n                <Icon type=\"api\" theme=\"filled\" />\n                Alignments\n              </span>\n            </Menu.Item>\n            <Menu.Item key=\"semantic_model\" disabled={!this.props.hasResources}>\n              <span>\n                <Icon type=\"deployment-unit\" />\n                Semantic Model\n              </span>\n            </Menu.Item>\n            <Menu.SubMenu\n              title={\n                <Avatar\n                  style={{\n                    backgroundColor: \"#f56a00\",\n                    verticalAlign: \"middle\",\n                    marginTop: -3\n                  }}\n                  size=\"default\"\n                >\n                  T\n                </Avatar>\n              }\n              key=\"user\"\n              style={{\n                float: \"right\"\n              }}\n            >\n              <Menu.Item>\n                <span>\n                  <Icon type=\"setting\" />\n                  Settings\n                </span>\n              </Menu.Item>\n              <Menu.Item>\n                <span>\n                  <Icon type=\"logout\" />\n                  Logout\n                </span>\n              </Menu.Item>\n            </Menu.SubMenu>\n          </Menu>\n        </Layout.Header>\n        <Layout.Content style={{ marginTop: 55, padding: 10, height: \"100%\" }}>\n          {component}\n        </Layout.Content>\n      </Layout>\n    );\n  }\n\n  private onChangeMenu = (selection: SelectParam) => {\n    this.setState({ activeMenu: selection.key as MenuItem });\n  };\n}\n\nfunction db2props(state: DB) {\n  return {\n    app: state.app,\n    hasActiveDataset: state.datasets.activeDataset !== null,\n    hasResources: _.size(state.resources) > 0\n  };\n}\n\nexport default connect(db2props)(App);\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as constants from \"../constants\";\nimport { DReprAction } from \"../actions\";\nimport { defaultAppStoreState, AppTbl, defaultSemanticModel } from \"../types\";\nimport { SemanticModel, ClassId, Node } from \"src/models\";\n\nfunction addEdge(\n  sm: SemanticModel,\n  sourceId: ClassId,\n  predicate: string,\n  targetId: ClassId | string\n) {\n  if (!sm.hasNode(sourceId.id)) {\n    sm.addNode(Node.classnode(sourceId));\n  }\n\n  if (targetId instanceof ClassId && !sm.hasNode(targetId.id)) {\n    sm.addNode(Node.classnode(targetId));\n  }\n\n  if (targetId instanceof ClassId) {\n    // add normal edge\n    sm.addEdge(sourceId.id, predicate, targetId.id);\n  } else {\n    // replace edge as data node has maximum one parent\n    for (const e of sm.iterIncomingEdges(targetId)) {\n      sm.upwardCascadeRemoveEdge(e.id);\n    }\n\n    sm.addEdge(sourceId.id, predicate, targetId);\n  }\n}\n\nexport function semanticModelReducer(\n  sm: SemanticModel = defaultSemanticModel,\n  action: DReprAction\n): SemanticModel {\n  switch (action.type) {\n    case constants.DATASET_SELECT: {\n      return action.semanticModel;\n    }\n    case constants.DATASET_DESELECT: {\n      return defaultSemanticModel;\n    }\n    case constants.SM_ADD_DATA_NODE: {\n      if (sm.hasNode(action.dnode.id)) {\n        return sm;\n      }\n\n      sm.addNode(action.dnode);\n      return sm.cloneRef();\n    }\n    case constants.SM_ADD_EDGE: {\n      addEdge(sm, action.sourceId, action.predicate, action.targetId);\n      return sm.cloneRef();\n    }\n    case constants.SM_REMOVE_NODE: {\n      sm.cascadeRemoveNode(action.nodeId);\n      return sm.cloneRef();\n    }\n    case constants.SM_REMOVE_EDGE: {\n      // also remove parent nodes, we don't remove children node because\n      // there may be lots of nodes attached to it\n      sm.upwardCascadeRemoveEdge(action.edgeId);\n      return sm.cloneRef();\n    }\n    case constants.SM_UPDATE_EDGE: {\n      const edge = sm.getEdgeById(action.edgeId);\n      if (\n        edge.sourceId === action.sourceId.id &&\n        edge.targetId ===\n          (action.targetId instanceof ClassId\n            ? action.targetId.id\n            : action.targetId)\n      ) {\n        edge.predicate = action.predicate;\n      } else {\n        addEdge(sm, action.sourceId, action.predicate, action.targetId);\n\n        sm.upwardCascadeRemoveEdge(action.edgeId);\n      }\n      return sm.cloneRef();\n    }\n    default:\n      return sm;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport { resourceReducer } from \"./resource\";\nimport { DB } from \"../types\";\nimport { DReprAction } from \"../actions\";\nimport { uiConfReducer } from \"./uiConf\";\nimport { variableReducer } from \"./variable\";\nimport { appReducer } from \"./app\";\nimport { ontologyReducer } from \"./ontology\";\nimport { semanticModelReducer } from \"./semanticModel\";\nimport { mappingReducer } from \"./alignment\";\nimport { datasetReducer } from \"./dataset\";\n\nconst reducer = combineReducers<DB, DReprAction>({\n  app: appReducer,\n  uiConf: uiConfReducer,\n  datasets: datasetReducer,\n  resources: resourceReducer,\n  variables: variableReducer,\n  ontologies: ontologyReducer,\n  semanticModel: semanticModelReducer,\n  alignments: mappingReducer\n});\n\nexport default reducer;\n","import * as constants from \"../constants\";\nimport { DReprAction } from \"../actions\";\nimport { defaultAppStoreState, AppTbl } from \"../types\";\n\nexport function appReducer(\n  state: AppTbl = defaultAppStoreState,\n  action: DReprAction\n): AppTbl {\n  switch (action.type) {\n    case constants.APP_RELOAD: {\n      return action.app;\n    }\n    case constants.APP_SET_SYNC: {\n      const ns = state.cloneRef();\n      ns.synchStatus = action.syncStatus;\n      return ns;\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import * as constants from \"../constants\";\nimport { DReprAction } from \"../actions\";\nimport { defaultUIConfiguration, UIConfiguration } from \"../types\";\n\nexport function uiConfReducer(\n  state: UIConfiguration = defaultUIConfiguration,\n  action: DReprAction\n): UIConfiguration {\n  switch (action.type) {\n    case constants.UI_SET_DISPLAY_MAX_1_RESOURCE:\n      return state.setDisplayMax1Resource(action.value);\n    default: {\n      return state;\n    }\n  }\n}\n","import * as constants from \"../constants\";\nimport { DReprAction } from \"../actions\";\nimport { DatasetTbl, defaultDatasetStoreState } from \"../types\";\nimport * as _ from \"lodash\";\n\nexport function datasetReducer(\n  state: DatasetTbl = defaultDatasetStoreState,\n  action: DReprAction\n): DatasetTbl {\n  switch (action.type) {\n    case constants.DATASET_LIST: {\n      // if activeDataset is out of sync, detect it outside of this function\n      return {\n        datasets: action.datasets,\n        activeDataset: state.activeDataset\n      };\n    }\n    case constants.DATASET_DESELECT: {\n      return {\n        datasets: state.datasets,\n        activeDataset: null\n      };\n    }\n    case constants.DATASET_CREATE: {\n      return {\n        datasets: [...state.datasets, action.dataset],\n        activeDataset: state.activeDataset\n      };\n    }\n    case constants.DATASET_SELECT: {\n      return {\n        datasets: state.datasets,\n        activeDataset: action.datasetName\n      };\n    }\n    case constants.DATASET_REMOVE: {\n      return {\n        datasets: _.filter(state.datasets, d => d.name !== action.datasetName),\n        activeDataset:\n          state.activeDataset === action.datasetName\n            ? null\n            : state.activeDataset\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import * as constants from \"../constants\";\nimport { DReprAction } from \"../actions\";\nimport {\n  defaultResourceStoreState,\n  ResourcesTbl,\n  ResourceRecord\n} from \"../types\";\nimport * as _ from \"lodash\";\n\nexport function resourceReducer(\n  state: ResourcesTbl = defaultResourceStoreState,\n  action: DReprAction\n): ResourcesTbl {\n  switch (action.type) {\n    case constants.DATASET_SELECT: {\n      return _.keyBy(\n        action.resources,\n        (r: ResourceRecord) => r.resource.resourceId\n      );\n    }\n    case constants.DATASET_DESELECT: {\n      return defaultResourceStoreState;\n    }\n    case constants.RESOURCE_UPSERT: {\n      return { ...state, [action.resourceID]: action.resource };\n    }\n    case constants.RESOURCE_UPDATE_DATA: {\n      state[action.resourceID].data.pod = action.pod;\n      return { ...state, [action.resourceID]: state[action.resourceID] };\n    }\n    case constants.RESOURCE_DELETE: {\n      const ns = { ...state };\n      delete ns[action.resourceId];\n      return ns;\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import * as constants from \"../constants\";\nimport { DReprAction } from \"../actions\";\nimport { VariableTbl, defaultVariableStoreState } from \"../types\";\nimport { Variable } from \"src/models\";\nimport * as _ from \"lodash\";\n\nexport function variableReducer(\n  state: VariableTbl = defaultVariableStoreState,\n  action: DReprAction\n): VariableTbl {\n  switch (action.type) {\n    case constants.DATASET_SELECT: {\n      return _.keyBy(action.variables, (v: Variable) => v.id);\n    }\n    case constants.DATASET_DESELECT: {\n      return defaultVariableStoreState;\n    }\n    case constants.VARIABLE_UPSERT: {\n      const newState = { ...state };\n      if (action.previousVariableId !== null) {\n        delete newState[action.previousVariableId];\n      }\n\n      newState[action.variable.id] = action.variable;\n      return newState;\n    }\n    case constants.VARIABLE_DELETE: {\n      const newState = { ...state };\n      delete newState[action.variableId];\n      return newState;\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import * as constants from \"../constants\";\nimport { DReprAction } from \"../actions\";\nimport { OntologyTbl, defaultOntologyStoreState } from \"../types\";\nimport * as _ from \"lodash\";\nimport { Ontology } from \"src/models\";\n\nexport function ontologyReducer(\n  state: OntologyTbl = defaultOntologyStoreState,\n  action: DReprAction\n): OntologyTbl {\n  switch (action.type) {\n    case constants.ONTOLOGY_LIST: {\n      return _.keyBy(action.ontologies, o => o.prefix);\n    }\n    case constants.ONTOLOGY_CREATE: {\n      return {\n        ...state,\n        [action.prefix]: new Ontology(action.prefix, action.namespace)\n      };\n    }\n    case constants.ONTOLOGY_REMOVE: {\n      const newState = { ...state };\n      delete newState[action.prefix];\n      return newState;\n    }\n    default:\n      return state;\n  }\n}\n","import * as constants from \"../constants\";\nimport { DReprAction } from \"../actions\";\nimport { Alignment } from \"../../models\";\nimport { defaultAlignmentStoreState, AlignmentTbl } from \"../types\";\nimport * as _ from \"lodash\";\n\nexport function mappingReducer(\n  state: AlignmentTbl = defaultAlignmentStoreState,\n  action: DReprAction\n): AlignmentTbl {\n  switch (action.type) {\n    case constants.DATASET_SELECT: {\n      return action.alignments;\n    }\n    case constants.DATASET_DESELECT: {\n      return defaultAlignmentStoreState;\n    }\n    case constants.ALIGNMENT_UPSERT: {\n      const maps = state.filter(m => !m.isEqual(action.mapping));\n      maps.push(action.mapping);\n      return maps;\n    }\n    case constants.VARIABLE_UPSERT: {\n      if (action.previousVariableId !== null) {\n        const alignments = [];\n        for (const align of state) {\n          if (align.source === action.previousVariableId) {\n            align.source = action.variable.id;\n          }\n          if (align.target === action.previousVariableId) {\n            align.target = action.variable.id;\n          }\n          alignments.push(align);\n        }\n        return alignments;\n      }\n      return state;\n    }\n    case constants.VARIABLE_DELETE: {\n      return state.filter((align: Alignment) => {\n        return (\n          align.source !== action.variableId &&\n          align.target !== action.variableId\n        );\n      });\n    }\n    case constants.ALIGNMENT_REMOVE: {\n      return state.filter(m => !m.isEqual(action.mapping));\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import { applyMiddleware, createStore, Dispatch } from \"redux\";\nimport reducer from \"./reducers\";\nimport { DB } from \"./types\";\nimport { DReprAction } from \"./actions\";\nimport thunk from \"redux-thunk\";\nimport logger from \"redux-logger\";\nimport { syncWithServerMiddleware } from \"./middlewares\";\n\nconst store = createStore<DB, any, any, any>(\n  reducer,\n  applyMiddleware(thunk, logger, syncWithServerMiddleware as any)\n);\n\nexport type DreprDispatch = Dispatch<DReprAction>;\nexport default store;\n","import { DReprAction, appSetSync } from \"../actions\";\nimport { Dispatch, Store } from \"redux\";\nimport { DB, SyncStatus } from \"../types\";\nimport axios from \"axios\";\nimport * as constants from \"../constants\";\nimport * as _ from \"lodash\";\n\nconst syncWithServerMiddleware = (store: Store<DB, any>) => (\n  next: Dispatch\n) => (action: DReprAction) => {\n  const result = next(action);\n\n  // check the action type and sync it with the server\n  switch (action.type) {\n    case constants.VARIABLE_UPSERT: {\n      const db = store.getState();\n      next(appSetSync(SyncStatus.synching));\n      db.app\n        .post(`/datasets/${db.datasets.activeDataset}/variables`, {\n          prev_id: action.previousVariableId,\n          id: action.variable.id,\n          sorted: action.variable.sorted,\n          value_type: action.variable.type,\n          unique: action.variable.unique,\n          missing_values: action.variable.missingValues,\n          location: {\n            resource_id: action.variable.location.resourceId,\n            slices: _.map(action.variable.location.slices, s => s.serialize())\n          }\n        })\n        .then((resp: any) => {\n          next(appSetSync(SyncStatus.synched));\n        })\n        .catch(() => {\n          next(appSetSync(SyncStatus.error));\n        });\n      break;\n    }\n    case constants.VARIABLE_DELETE: {\n      const db = store.getState();\n      next(appSetSync(SyncStatus.synching));\n      db.app\n        .delete(\n          `/datasets/${db.datasets.activeDataset}/variables/${\n            action.variableId\n          }`\n        )\n        .then((resp: any) => {\n          next(appSetSync(SyncStatus.synched));\n        })\n        .catch(() => {\n          next(appSetSync(SyncStatus.error));\n        });\n      break;\n    }\n    case constants.SM_ADD_DATA_NODE:\n      // add a node doesn't actually add new edge, so the model doesn't change => don't need to sync with the server\n      break;\n    case constants.SM_ADD_EDGE:\n    case constants.SM_REMOVE_NODE:\n    case constants.SM_REMOVE_EDGE:\n    case constants.SM_UPDATE_EDGE: {\n      const db = store.getState();\n      next(appSetSync(SyncStatus.synching));\n      db.app\n        .post(\n          `/datasets/${db.datasets.activeDataset}/semantic_model`,\n          db.semanticModel.serialize(db.ontologies)\n        )\n        .then((resp: any) => {\n          next(appSetSync(SyncStatus.synched));\n        })\n        .catch(() => {\n          next(appSetSync(SyncStatus.error));\n        });\n      break;\n    }\n    case constants.ALIGNMENT_REMOVE:\n    case constants.ALIGNMENT_UPSERT: {\n      const db = store.getState();\n      next(appSetSync(SyncStatus.synching));\n      db.app\n        .post(\n          `/datasets/${db.datasets.activeDataset}/alignments`,\n          _.map(db.alignments, m => m.serialize())\n        )\n        .then((resp: any) => {\n          next(appSetSync(SyncStatus.synched));\n        })\n        .catch(() => {\n          next(appSetSync(SyncStatus.error));\n        });\n    }\n  }\n\n  return result;\n};\n\nexport { syncWithServerMiddleware };\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\") as HTMLElement\n);\n\nregisterServiceWorker();\n","export class BugError extends Error {\n  constructor(msg: string) {\n    super(`Congrat! You found a bug! ${msg}`);\n    this.name = \"Bug\";\n  }\n}\n","import * as constants from \"../constants\";\nimport { Dispatch } from \"redux\";\nimport { DReprAction } from \".\";\nimport { Ontology } from \"src/models\";\nimport * as _ from \"lodash\";\nimport { DB } from \"../types\";\nimport axios from \"axios\";\nimport { notification } from \"antd\";\n\nexport interface OntologyList {\n  type: constants.ONTOLOGY_LIST;\n  ontologies: Ontology[];\n}\n\nexport interface OntologyRemove {\n  type: constants.ONTOLOGY_REMOVE;\n  prefix: string;\n  namespace: string;\n}\n\nexport interface OntologyCreate {\n  type: constants.ONTOLOGY_CREATE;\n  prefix: string;\n  namespace: string;\n}\n\nexport function ontologyList(): any {\n  return async (dispatch: Dispatch<DReprAction>, getState: () => DB) => {\n    const resp = await axios.get(\"/ontologies\");\n    dispatch({\n      type: constants.ONTOLOGY_LIST,\n      ontologies: _.map(\n        resp.data.ontologies,\n        (uri, ns) => new Ontology(ns, uri)\n      )\n    });\n  };\n}\n\nexport function ontologyRemove(prefix: string, ns: string): any {\n  return async (dispatch: Dispatch<DReprAction>, getState: () => DB) => {\n    return getState()\n      .app.delete(`/ontologies/${ns}`)\n      .then(() => {\n        return dispatch({\n          type: constants.ONTOLOGY_REMOVE,\n          prefix,\n          namespace: ns\n        });\n      });\n  };\n}\n\nexport function ontologyCreate(\n  ontFile: File,\n  prefix: string,\n  namespace: string\n): any {\n  return async (dispatch: Dispatch<DReprAction>, getState: () => DB) => {\n    const formData = new FormData();\n    formData.set(\"ontology_file\", ontFile);\n    formData.set(\"prefix\", prefix);\n    formData.set(\"namespace\", namespace);\n\n    return getState()\n      .app.post(`/ontologies`, formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      })\n      .then((resp: { data: { n_classes: number; n_predicates: number } }) => {\n        if (resp.data.n_classes + resp.data.n_predicates === 0) {\n          notification.warning({\n            message: \"ontology\",\n            description:\n              \"The ontology is imported, but 0 class and predicate was added\"\n          });\n          return null;\n        }\n\n        notification.info({\n          message: \"Import ontology success\",\n          description: `${resp.data.n_classes} classes added and ${\n            resp.data.n_predicates\n          } predicates added`\n        });\n\n        return dispatch({\n          type: constants.ONTOLOGY_CREATE,\n          prefix,\n          namespace\n        });\n      });\n  };\n}\n","import { Index, Dimension, RangeDimension } from \"./data\";\nimport * as _ from \"lodash\";\n\nexport const SLICE_UNSET = -Infinity;\nconst RANGE_SLICE_REGEX = /^(?:(\\d+|(?:\\${[^}]+}))?\\.\\.(\\d+|(?:\\${[^}]+}))?(?:;(\\d+|(?:\\${[^}]+})))?)|(\\d+|(?:\\${[^}]+}))$/;\n\nexport class RangeSlice {\n  public static default() {\n    return new RangeSlice(SLICE_UNSET, SLICE_UNSET, 1);\n  }\n\n  public start: number;\n  public end: number;\n  public step: number;\n\n  constructor(start: number, end: number, step: number = 1) {\n    this.start = start;\n    this.end = end;\n    this.step = step;\n  }\n\n  // test if this slice is select only one element\n  public isSelectOne(): boolean {\n    return (this.end - this.start) / this.step === 1;\n  }\n\n  public isSelected(val: number): boolean {\n    return (\n      val >= this.start &&\n      val < this.end &&\n      Number.isInteger((val - this.start) / this.step)\n    );\n  }\n\n  public isRangeOverlapped(start: number, end: number): boolean {\n    return end > this.start && this.end > start;\n  }\n\n  public clone() {\n    return new RangeSlice(this.start, this.end, this.step);\n  }\n\n  public isUninitialized() {\n    return this.start === SLICE_UNSET && this.end === SLICE_UNSET;\n  }\n\n  public toString(): string {\n    if (this.isUninitialized()) {\n      return \" \";\n    }\n\n    if (this.end === this.start + this.step) {\n      return `${this.start}`;\n    }\n\n    const step = this.step === 1 ? \"\" : `;${this.step}`;\n    if (this.end === Infinity) {\n      return `${this.start}..${step}`;\n    }\n    return `${this.start}..${this.end}${step}`;\n  }\n\n  public serialize() {\n    return {\n      type: \"range\",\n      start: this.start,\n      end: this.end,\n      step: this.step\n    };\n  }\n}\n\nexport class IndexSlice {\n  public static default() {\n    return new IndexSlice(SLICE_UNSET);\n  }\n\n  public index: Index;\n\n  constructor(index: Index) {\n    this.index = index;\n  }\n\n  // test if this slice is select only one element\n  public isSelectOne(): boolean {\n    return true;\n  }\n\n  public isSelected(val: Index): boolean {\n    return this.index !== SLICE_UNSET && this.index === val;\n  }\n\n  public clone(): IndexSlice {\n    return new IndexSlice(this.index);\n  }\n\n  public isUninitialized() {\n    return this.index === SLICE_UNSET;\n  }\n\n  public toString(): string {\n    if (this.isUninitialized()) {\n      return \" \";\n    }\n\n    return `${this.index}`;\n  }\n\n  public serialize() {\n    return {\n      type: \"index\",\n      idx: this.index\n    };\n  }\n}\n\nexport type Slice = RangeSlice | IndexSlice;\n\nexport class Location {\n  public static fromSerializedSlices(resourceId: string, slices: any[]) {\n    return new Location(\n      resourceId,\n      slices.map(s => {\n        switch (s.type) {\n          case \"range\":\n            return new RangeSlice(\n              s.start,\n              s.end === null ? Infinity : s.end,\n              s.step\n            );\n          case \"index\":\n            return new IndexSlice(s.idx);\n          default:\n            throw new Error(`Invalid slice type: ${s.type}`);\n        }\n      })\n    );\n  }\n\n  public static fromString(resourceId: string, layout: string): Location {\n    const slices = [];\n    for (const sers of layout.split(\":\")) {\n      const match = RANGE_SLICE_REGEX.exec(sers);\n      if (match === null) {\n        slices.push(new IndexSlice(sers));\n        continue;\n      }\n\n      if (match[4] !== undefined) {\n        slices.push(new IndexSlice(parseInt(match[4] as string, 10)));\n      } else {\n        slices.push(\n          new RangeSlice(\n            parseInt(match[1] || \"0\", 10),\n            match[2] ? parseInt(match[2], 10) : Infinity,\n            parseInt(match[3] || \"1\", 10)\n          )\n        );\n      }\n    }\n\n    return new Location(resourceId, slices);\n  }\n\n  public resourceId: string;\n  public slices: Slice[];\n\n  constructor(resourceId: string, slices: Slice[]) {\n    this.resourceId = resourceId;\n    this.slices = slices;\n  }\n\n  public toString(withoutResourceID: boolean) {\n    const layout: string[] = [];\n    for (const slice of this.slices) {\n      layout.push(slice.toString());\n    }\n\n    if (withoutResourceID) {\n      return layout.join(\":\");\n    }\n\n    return `${this.resourceId}@${layout.join(\":\")}`;\n  }\n\n  // test if the layout is compatible with the dimension of data source\n  public validate(dim: Dimension): boolean {\n    return validateSlices(0, this.slices, dim);\n  }\n\n  public clone() {\n    return new Location(this.resourceId, this.slices.map(s => s.clone()));\n  }\n}\n\nfunction validateSlices(\n  sliceIdx: number,\n  slices: Slice[],\n  dim: Dimension\n): boolean {\n  if (sliceIdx === slices.length) {\n    // get to this when haven't consume all dimension is false\n    return false;\n    // // doing a check here to make sure it is a list, cannot be object\n    // // all values need to be null\n    // return (\n    //   dim instanceof RangeDimension && _.every(dim.values, v => v === null)\n    // );\n  }\n\n  const slice = slices[sliceIdx];\n  if (slice instanceof RangeSlice) {\n    if (dim instanceof RangeDimension) {\n      if (\n        !(\n          dim.range[0] <= slice.start &&\n          (slice.end === Infinity ||\n            dim.range[dim.range.length - 1] >= slice.end)\n        )\n      ) {\n        // some part of slice range is out of dimension range\n        return false;\n      }\n\n      const startIndex = _.sortedLastIndex(dim.range, slice.start) - 1;\n      const subdims = [];\n      for (let i = startIndex; i < dim.range.length - 1; i++) {\n        subdims.push(dim.values[i]);\n        if (dim.range[i + 1] >= slice.end) {\n          break;\n        }\n      }\n\n      for (const sdim of subdims) {\n        if (sdim === null) {\n          return sliceIdx === slices.length - 1;\n        } else if (sdim === undefined) {\n          return false;\n        }\n\n        if (!validateSlices(sliceIdx + 1, slices, sdim)) {\n          return false;\n        }\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    if (dim instanceof RangeDimension && typeof slice.index !== \"number\") {\n      return false;\n    }\n\n    const subdim = dim.get(slice.index);\n    if (subdim === null) {\n      return sliceIdx === slices.length - 1;\n    } else if (subdim === undefined) {\n      return false;\n    }\n    return validateSlices(sliceIdx + 1, slices, subdim);\n  }\n}\n\nexport type TypeVariableSorted = \"ascending\" | \"descending\" | \"none\";\nexport type TypeVariableType =\n  | \"unspecified\"\n  | \"string\"\n  | \"int\"\n  | \"float\"\n  | \"list[int]\"\n  | \"list[string]\"\n  | \"list[float]\";\n\nexport class Variable {\n  public static default(id: string, location: Location): Variable {\n    return new Variable(id, \"none\", \"unspecified\", false, [], location);\n  }\n\n  public id: string;\n  public sorted: TypeVariableSorted;\n  public type: TypeVariableType;\n  public unique: boolean;\n  public missingValues: string[];\n  public location: Location;\n\n  constructor(\n    id: string,\n    sorted: TypeVariableSorted,\n    type: TypeVariableType,\n    unique: boolean,\n    missingValues: string[],\n    location: Location\n  ) {\n    this.id = id;\n    this.location = location;\n    this.sorted = sorted;\n    this.type = type;\n    this.unique = unique;\n    this.missingValues = missingValues;\n  }\n\n  public clone() {\n    return new Variable(\n      this.id,\n      this.sorted,\n      this.type,\n      this.unique,\n      this.missingValues,\n      this.location.clone()\n    );\n  }\n}\n","import {\n  DataSlice,\n  Index,\n  DataSliceImpl,\n  UnitOfData,\n  Dimension,\n  RangeDimension,\n  IndexDimension,\n  ContinuousRangeDataSlice,\n  IndexDataSlice\n} from \".\";\n\nexport abstract class PortionOfData {\n  public static fromSlices(\n    slice: DataSlice,\n    dim: Dimension,\n    data: any\n  ): PortionOfData {\n    if (!dim.isValidSlice(slice)) {\n      throw new Error(\"The slice doesn't match with the dimension\");\n    }\n\n    return fromDataSlice(\n      slice as DataSliceImpl,\n      dim,\n      data,\n      []\n    ) as PortionOfData;\n  }\n\n  // If this portion of data contains all indices, it doesn't mean all the data has been fetched\n  private $hasAllIndices: boolean = false;\n  private $hasAllUpperIndices: boolean = false;\n\n  get hasAllIndices() {\n    return this.$hasAllIndices;\n  }\n\n  get hasAllUpperIndices() {\n    return this.$hasAllUpperIndices;\n  }\n\n  public setHasAllIndices() {\n    this.$hasAllIndices = true;\n    this.$hasAllUpperIndices = true;\n  }\n\n  public setHasAllUpperIndices() {\n    this.$hasAllUpperIndices = true;\n  }\n\n  public abstract get(idx: Index): PortionOfData | UnitOfData;\n  // whether it contains the data in this index, always true if we don't have all indices\n  public abstract mayHas(idx: Index): boolean;\n  public abstract portionSize(): number;\n  // convert the data into JSON\n  public abstract toJSON(): any;\n\n  public addData(slice: DataSlice, dim: Dimension, data: any): PortionOfData {\n    if (!dim.isValidSlice(slice, true)) {\n      throw new Error(\"The slice doesn't match with the dimension\");\n    }\n    return addDataSlice(\n      (this as unknown) as PortionOfDataImpl,\n      slice as DataSliceImpl,\n      dim,\n      data,\n      []\n    ) as PortionOfData;\n  }\n\n  public getData(indice: Index[]): UnitOfData {\n    if (indice.length === 1) {\n      return this.get(indice[0]) as UnitOfData;\n    }\n\n    let result: PortionOfData = this;\n    for (let i = 0; i < indice.length - 1; i++) {\n      result = result.get(indice[i]) as PortionOfData;\n    }\n\n    return result.get(indice[indice.length - 1]) as UnitOfData;\n  }\n}\n\nexport type PortionOfDataImpl =\n  | HashMapPortionOfData\n  | ArrayPortionOfData\n  | DiscontinuousArrayPortionOfData;\n\nexport class HashMapPortionOfData extends PortionOfData {\n  public hashMap: { [value: string]: PortionOfData | UnitOfData };\n\n  public portionSize(): number {\n    return Object.keys(this.hashMap).length;\n  }\n\n  public mayHas(idx: string): boolean {\n    // we say this index exists even when we don't have all data\n    return idx in this.hashMap || !this.hasAllIndices;\n  }\n\n  public get(idx: string): PortionOfData | UnitOfData {\n    return this.hashMap[idx];\n  }\n\n  public toJSON(): any {\n    const obj = {};\n    for (const k of Object.keys(this.hashMap)) {\n      const v = this.hashMap[k];\n      obj[k] = v instanceof PortionOfData ? v.toJSON() : v.value;\n    }\n    return obj;\n  }\n}\n\nexport class ArrayPortionOfData extends PortionOfData {\n  public start: number;\n  public end: number;\n  public items: Array<PortionOfData | UnitOfData>;\n\n  constructor(start: number) {\n    super();\n    this.start = start;\n    this.end = start;\n    this.items = new Array<PortionOfData | UnitOfData>();\n  }\n\n  public mayHas(idx: Index): boolean {\n    return this.start <= idx && idx < this.end;\n  }\n\n  public portionSize(): number {\n    return this.items.length;\n  }\n\n  public push(val: PortionOfData | UnitOfData) {\n    this.items.push(val);\n    this.end++;\n  }\n\n  public get(idx: Index): PortionOfData | UnitOfData {\n    return this.items[(idx as number) - this.start];\n  }\n\n  public set(idx: Index, val: PortionOfData | UnitOfData) {\n    this.items[(idx as number) - this.start] = val;\n  }\n\n  public toJSON(): any {\n    if (this.start !== 0) {\n      throw new Error(\n        \"[BUG] the start should always be 0 because it is not discontinuous\"\n      );\n    }\n\n    return this.items.map(v =>\n      v instanceof PortionOfData ? v.toJSON() : v.value\n    );\n  }\n}\n\nexport class DiscontinuousArrayPortionOfData extends PortionOfData {\n  public arrays: ArrayPortionOfData[];\n\n  constructor(arrays: ArrayPortionOfData[]) {\n    super();\n    this.arrays = arrays;\n  }\n\n  public mayHas(idx: number): boolean {\n    for (const item of this.arrays) {\n      if (item.mayHas(idx)) {\n        return true;\n      }\n    }\n\n    return !this.hasAllIndices;\n  }\n\n  public get(idx: number): PortionOfData | UnitOfData {\n    // TODO: optimize me!\n    for (const item of this.arrays) {\n      if (item.start <= idx && idx <= item.end) {\n        return item.get(idx);\n      }\n    }\n\n    throw Error(\"Invalid index \" + idx);\n  }\n\n  public portionSize(): number {\n    return this.arrays.reduce((accum, a) => accum + a.portionSize(), 0);\n  }\n\n  public toJSON(): any {\n    const obj = [];\n    for (const darray of this.arrays) {\n      while (obj.length < darray.start) {\n        obj.push(null);\n      }\n      for (const v of darray.items) {\n        obj.push(v instanceof PortionOfData ? v.toJSON() : v.value);\n      }\n    }\n\n    return obj;\n  }\n}\n\nfunction fromDataSlice(\n  slice: DataSliceImpl | null,\n  dim: Dimension | null,\n  data: any,\n  indices: Index[]\n): PortionOfData | UnitOfData {\n  // TODO: optimize me!\n  if (slice === null) {\n    // no more element left, you get into the value\n    return new UnitOfData(indices.slice(), data);\n  }\n\n  if (slice instanceof ContinuousRangeDataSlice) {\n    const arrayPortion = new ArrayPortionOfData(slice.start);\n    const i = indices.length;\n    indices.push(0);\n\n    for (let idx = 0; idx < data.length && idx < slice.end; idx++) {\n      indices[i] = slice.start + idx;\n      arrayPortion.push(\n        fromDataSlice(\n          slice.getValue(indices[i]) as DataSliceImpl | null,\n          dim!.get(indices[i]) as (Dimension | null),\n          data[idx],\n          indices\n        )\n      );\n    }\n\n    indices.pop();\n\n    if (slice.isSlicingAllIndices(dim!)) {\n      arrayPortion.setHasAllIndices();\n      return arrayPortion;\n    }\n\n    return new DiscontinuousArrayPortionOfData([arrayPortion]);\n  } else {\n    const mapPortion = new HashMapPortionOfData();\n    const i = indices.length;\n    indices.push(\"\");\n\n    for (const idx of Object.keys(slice.index2slice)) {\n      indices[i] = idx;\n      mapPortion.hashMap[idx] = fromDataSlice(\n        slice.index2slice[idx] as DataSliceImpl | null,\n        dim!.get(idx) as (Dimension | null),\n        data[idx],\n        indices\n      );\n    }\n\n    indices.pop();\n\n    if (slice.isSlicingAllIndices(dim!)) {\n      mapPortion.setHasAllIndices();\n    }\n    return mapPortion;\n  }\n}\n\nfunction addDataSlice(\n  pod: PortionOfDataImpl,\n  slice: DataSliceImpl | null,\n  dim: Dimension | null,\n  data: any,\n  indices: Index[]\n): PortionOfData | UnitOfData {\n  if (slice === null) {\n    // no more elment left, you get into the value\n    return new UnitOfData(indices.slice(), data);\n  }\n\n  if (pod instanceof HashMapPortionOfData) {\n    if (!(slice instanceof IndexDataSlice)) {\n      throw new Error(\n        \"You can only set data for HashMapPortionOfData when using IndexDataSlice\"\n      );\n    }\n\n    const i = indices.length;\n    indices.push(\"\");\n\n    for (const k of Object.keys(slice.index2slice)) {\n      indices[i] = k;\n\n      if (k in pod.hashMap) {\n        addDataSlice(\n          pod.hashMap[k] as PortionOfDataImpl,\n          slice.index2slice[k] as DataSliceImpl | null,\n          dim!.get(k) as (Dimension | null),\n          data[k],\n          indices\n        );\n      } else {\n        pod.hashMap[k] = fromDataSlice(\n          slice.index2slice[k] as DataSliceImpl | null,\n          dim!.get(k) as (Dimension | null),\n          data[k],\n          indices\n        );\n      }\n    }\n    indices.pop();\n\n    if (!pod.hasAllIndices) {\n      if (\n        new Set(Object.keys(pod.hashMap)) ===\n        new Set(Object.keys((dim as IndexDimension).index2val))\n      ) {\n        pod.setHasAllIndices();\n      }\n    }\n    return pod;\n  } else {\n    if (!(slice instanceof ContinuousRangeDataSlice)) {\n      throw new Error(\n        \"You can only set data for ArrayPortionOfData when using ContinuousRangeDataSlice\"\n      );\n    }\n\n    if (pod instanceof DiscontinuousArrayPortionOfData) {\n      let startExtractIndex = -1;\n      let endExtractIndex = -1;\n\n      for (const [i, da] of pod.arrays.entries()) {\n        if (\n          isRangeOverlappedOrContinuous(\n            da.start,\n            da.end,\n            slice.start,\n            slice.end\n          )\n        ) {\n          if (startExtractIndex === -1) {\n            startExtractIndex = i;\n            endExtractIndex = i + 1;\n          } else {\n            endExtractIndex++;\n          }\n        }\n      }\n\n      if (startExtractIndex === endExtractIndex) {\n        // no overlapping or continous\n        if (data.length > 0) {\n          const darray = fromDataSlice(slice, dim, data, indices);\n          if (!(darray instanceof DiscontinuousArrayPortionOfData)) {\n            throw new Error(\n              \"[BUG] Congrat! You found a bug, darray must always be DiscontinuousArrayPOD\"\n            );\n          }\n\n          if (pod.arrays[0].start > darray.arrays[0].start) {\n            pod.arrays.unshift(darray.arrays[0]);\n          } else {\n            pod.arrays.push(darray.arrays[0]);\n          }\n        } else if (slice.start === pod.arrays[pod.arrays.length - 1].end) {\n          if (\n            pod.arrays.length === 1 &&\n            (dim as RangeDimension).range[0] === pod.arrays[0].start\n          ) {\n            // we did retrieve all data\n            pod.arrays[0].setHasAllIndices();\n            return pod.arrays[0];\n          } else {\n            pod.setHasAllUpperIndices();\n          }\n        }\n      } else {\n        const indicesLastIdx = indices.length;\n\n        // extract and merge overlapping or continous subarrays\n        const darray = new ArrayPortionOfData(\n          Math.min(slice.start, pod.arrays[startExtractIndex].start)\n        );\n        indices.push(-1);\n\n        for (\n          let idx = slice.start;\n          idx < pod.arrays[startExtractIndex].start;\n          idx++\n        ) {\n          indices[indicesLastIdx] = idx;\n          const val = fromDataSlice(\n            slice.getValue(idx) as DataSliceImpl | null,\n            dim!.get(idx) as (Dimension | null),\n            data[idx - slice.start],\n            indices\n          );\n          darray.push(val);\n        }\n\n        for (let i = startExtractIndex; i < endExtractIndex; i++) {\n          const sarray = pod.arrays[i];\n          // TODO: optimize me, can do better\n          for (let idx = sarray.start; idx < sarray.end; idx++) {\n            if (idx >= slice.start && idx < slice.end) {\n              indices[indicesLastIdx] = idx;\n              const val = addDataSlice(\n                sarray.get(idx) as PortionOfDataImpl,\n                slice.getValue(idx) as DataSliceImpl | null,\n                dim!.get(idx) as Dimension | null,\n                data[idx - slice.start],\n                indices\n              );\n              darray.push(val);\n            } else {\n              darray.push(sarray.get(idx));\n            }\n          }\n\n          if (i + 1 < endExtractIndex && sarray.end < pod.arrays[i + 1].start) {\n            // there is a gap, fill the gap\n            for (let idx = sarray.end; idx < pod.arrays[i + 1].start; idx++) {\n              indices[indicesLastIdx] = idx;\n              const val = fromDataSlice(\n                slice.getValue(idx) as DataSliceImpl | null,\n                dim!.get(idx) as (Dimension | null),\n                data[idx - slice.start],\n                indices\n              );\n              darray.push(val);\n            }\n          }\n        }\n\n        for (\n          let idx = pod.arrays[endExtractIndex - 1].end;\n          idx < slice.start + data.length;\n          idx++\n        ) {\n          indices[indicesLastIdx] = idx;\n          const val = fromDataSlice(\n            slice.getValue(idx) as DataSliceImpl | null,\n            dim!.get(idx) as (Dimension | null),\n            data[idx - slice.start],\n            indices\n          );\n          darray.push(val);\n        }\n\n        indices.pop();\n        const newArrays = pod.arrays.slice(0, startExtractIndex);\n        newArrays.push(darray);\n        pod.arrays = newArrays.concat(pod.arrays.slice(endExtractIndex));\n      }\n\n      if (\n        ((slice.start === slice.end &&\n          slice.start === pod.arrays[pod.arrays.length - 1].end) ||\n          (data.length > 0 && slice.end > slice.start + data.length)) &&\n        !pod.hasAllIndices\n      ) {\n        // empty slice mean there is no more data\n        if (\n          pod.arrays.length === 1 &&\n          (dim as RangeDimension).range[0] === pod.arrays[0].start\n        ) {\n          // we did retrieve all data\n          pod.arrays[0].setHasAllIndices();\n          return pod.arrays[0];\n        } else {\n          pod.setHasAllUpperIndices();\n        }\n      }\n    } else {\n      // ArrayPortionsOfData\n      const indicesLastIdx = indices.length;\n      indices.push(0);\n\n      for (\n        let idx = slice.start, n = slice.start + data.length;\n        idx < n;\n        idx++\n      ) {\n        indices[indicesLastIdx] = idx;\n        const val = addDataSlice(\n          pod.get(idx) as PortionOfDataImpl,\n          slice.getValue(idx) as DataSliceImpl | null,\n          dim!.get(idx) as (Dimension | null),\n          data[idx - slice.start],\n          indices\n        );\n        pod.set(idx, val);\n      }\n\n      indices.pop();\n    }\n\n    return pod;\n  }\n}\n\nfunction isRangeOverlappedOrContinuous(\n  start0: number,\n  end0: number,\n  start1: number,\n  end1: number\n): boolean {\n  return end1 >= start0 && end0 >= start1;\n}\n"],"sourceRoot":""}