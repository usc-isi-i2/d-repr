use std::fs::File;
use std::time::Instant;

use clap::{App, Arg, SubCommand};
use fnv::FnvHashMap;

use drepr::executors::*;
use drepr::inputs::*;
use drepr::test::*;
use drepr::writers::*;

fn main() -> Result<(), std::io::Error> {
  let matches = App::new("D-REPR")
    .version(env!("CARGO_PKG_VERSION"))
    .author("someone at ISI")
    .about("Mapping heterogeneous data sources to Relational Model")
    .arg(
      Arg::with_name("repr_file")
        .required(true)
        .help("Representation file"),
    )
    .arg(
      Arg::with_name("output")
        .required(true)
        .help("Output in the following format: <format>:<channel>:<config>"),
    )
    .arg(
      Arg::with_name("resources")
        .help("<resource_id>:<resource_file>")
        .required(true)
        .multiple(true)
        .min_values(1),
    )
    .subcommand(
      SubCommand::with_name("test")
        .about("Run testing functions")
        .arg(
          Arg::with_name("test_func")
            .short("f")
            .required(true)
            .takes_value(true)
            .help("Testing function to run"),
        )
        .arg(
          Arg::with_name("sargs")
            .short("a")
            .takes_value(true)
            .help("Arbitrary arguments for the sub functions: <name>:<value>,<name>:<value>,..."),
        ),
    )
    .get_matches();

  let resources = matches
    .values_of("resources")
    .unwrap()
    .map(|s| {
      let tmp = s.split(":").collect::<Vec<_>>();
      InputPhysicalResource {
        resource_id: tmp
          .get(0)
          .expect("The format for each resource should be <resource_id>:<resource_file>")
          .to_string(),
        resource_file: tmp
          .get(1)
          .expect("The format for each resource should be <resource_id>:<resource_file>")
          .to_string(),
      }
    })
    .collect::<Vec<_>>();
  let repr_file = matches.value_of("repr_file").unwrap();
  let output_conf: Vec<&str> = matches
    .value_of("output")
    .unwrap()
    .split(":")
    .collect::<Vec<_>>();
  let input_repr: InputRepresentation =
    serde_yaml::from_reader(File::open(repr_file).expect("File doesn't exist")).unwrap();

  if let Some(matches) = matches.subcommand_matches("test") {
    let args: FnvHashMap<String, String> = match matches.value_of("sargs") {
      None => FnvHashMap::default(),
      Some(s) => s
        .split(",")
        .map(|x| {
          let y = x.split("=").collect::<Vec<_>>();
          (y[0].to_string(), y[1].to_string())
        })
        .collect::<FnvHashMap<_, _>>(),
    };

    match matches.value_of("test_func").unwrap() {
      "read_data" => {
        test_read_data(&resources[0].resource_file);
      }
      "value_alignment" => {
        test_value_alignment(&resources[0].resource_file, input_repr, &args["var"])
      }
      "preprocessing" => {
        test_preprocessing(&resources[0].resource_file);
      }
      _ => panic!(
        "Invalid function: {}",
        matches.value_of("test_func").unwrap()
      ),
    }

    return Ok(());
  }

  let start = Instant::now();
  match (output_conf[0], output_conf[1]) {
    ("ttl", "file") => {
      let mut writer = TurtleWriter::<File>::write2file(output_conf[2]);
      exec_mapping(input_repr, &resources, &mut writer);
    },
    ("graph_json", "file") => {
      let mut writer = GraphJSONWriter::<File>::write2file(
        &format!("{}.nodes.out", output_conf[2]),
        &format!("{}.edges.out", output_conf[2]),
      );
      exec_mapping(input_repr, &resources, &mut writer);
    }
    _ => unimplemented!(),
  };

  let duration = start.elapsed();
  println!(">>> [D-REPR] runtime: {:?}", duration);
  Ok(())
}
